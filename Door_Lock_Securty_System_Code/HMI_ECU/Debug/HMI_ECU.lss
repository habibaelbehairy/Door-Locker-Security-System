
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004856  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000016c  00800060  00004856  000048ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  008001cc  008001cc  00004a56  2**0
                  ALLOC
  3 .stab         00003af8  00000000  00000000  00004a58  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012db  00000000  00000000  00008550  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000982b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000996b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00009adb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000b724  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000c60f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000d3bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000d51c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000d7a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000df77  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 19 21 	jmp	0x4232	; 0x4232 <__vector_7>
      20:	0c 94 4c 21 	jmp	0x4298	; 0x4298 <__vector_8>
      24:	0c 94 e6 20 	jmp	0x41cc	; 0x41cc <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e5       	ldi	r30, 0x56	; 86
      68:	f8 e4       	ldi	r31, 0x48	; 72
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3c       	cpi	r26, 0xCC	; 204
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac ec       	ldi	r26, 0xCC	; 204
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3d       	cpi	r26, 0xD0	; 208
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <main>
      8a:	0c 94 29 24 	jmp	0x4852	; 0x4852 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ad 23 	jmp	0x475a	; 0x475a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 eb       	ldi	r26, 0xB6	; 182
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c9 23 	jmp	0x4792	; 0x4792 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b9 23 	jmp	0x4772	; 0x4772 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d5 23 	jmp	0x47aa	; 0x47aa <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b9 23 	jmp	0x4772	; 0x4772 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d5 23 	jmp	0x47aa	; 0x47aa <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ad 23 	jmp	0x475a	; 0x475a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 eb       	ldi	r24, 0xB6	; 182
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c9 23 	jmp	0x4792	; 0x4792 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b9 23 	jmp	0x4772	; 0x4772 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 d5 23 	jmp	0x47aa	; 0x47aa <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 b9 23 	jmp	0x4772	; 0x4772 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 d5 23 	jmp	0x47aa	; 0x47aa <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 b9 23 	jmp	0x4772	; 0x4772 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 d5 23 	jmp	0x47aa	; 0x47aa <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 bd 23 	jmp	0x477a	; 0x477a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 d9 23 	jmp	0x47b2	; 0x47b2 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Timer1_CallBackFun>:

/*
 * Description:
 * Call back Fun for timer 1
 */
void Timer1_CallBackFun(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	g_countSeconds++;
     b4e:	80 91 cc 01 	lds	r24, 0x01CC
     b52:	8f 5f       	subi	r24, 0xFF	; 255
     b54:	80 93 cc 01 	sts	0x01CC, r24
}
     b58:	cf 91       	pop	r28
     b5a:	df 91       	pop	r29
     b5c:	08 95       	ret

00000b5e <New_Password>:
/*
 * Description:
 * Function to write new password and check for confirmation of the re-password then
 * send it to MC2 to save it in EEPROM
 */ 
void New_Password(void) {
     b5e:	0f 93       	push	r16
     b60:	1f 93       	push	r17
     b62:	df 93       	push	r29
     b64:	cf 93       	push	r28
     b66:	cd b7       	in	r28, 0x3d	; 61
     b68:	de b7       	in	r29, 0x3e	; 62
     b6a:	c3 5c       	subi	r28, 0xC3	; 195
     b6c:	d0 40       	sbci	r29, 0x00	; 0
     b6e:	0f b6       	in	r0, 0x3f	; 63
     b70:	f8 94       	cli
     b72:	de bf       	out	0x3e, r29	; 62
     b74:	0f be       	out	0x3f, r0	; 63
     b76:	cd bf       	out	0x3d, r28	; 61
	 * key to store the pressed key
	 * password to store the password
	 * re_password to store the re-entered password
	 * match to check if the password and re_password are matched
	*/
    uint8 pass_Counter = 0;
     b78:	fe 01       	movw	r30, r28
     b7a:	e7 54       	subi	r30, 0x47	; 71
     b7c:	ff 4f       	sbci	r31, 0xFF	; 255
     b7e:	10 82       	st	Z, r1
    uint8 key = 0;
     b80:	fe 01       	movw	r30, r28
     b82:	e8 54       	subi	r30, 0x48	; 72
     b84:	ff 4f       	sbci	r31, 0xFF	; 255
     b86:	10 82       	st	Z, r1
    uint8 password[5];
    uint8 re_password[5];
    uint8 match = 1;
     b88:	fe 01       	movw	r30, r28
     b8a:	e9 54       	subi	r30, 0x49	; 73
     b8c:	ff 4f       	sbci	r31, 0xFF	; 255
     b8e:	81 e0       	ldi	r24, 0x01	; 1
     b90:	80 83       	st	Z, r24
	/*
	 * display a message to the user to enter the password
	*/
    LCD_clearScreen();
     b92:	0e 94 dc 20 	call	0x41b8	; 0x41b8 <LCD_clearScreen>
    LCD_displayStringRowColumn(0, 0, "Lets Create");
     b96:	20 e6       	ldi	r18, 0x60	; 96
     b98:	30 e0       	ldi	r19, 0x00	; 0
     b9a:	80 e0       	ldi	r24, 0x00	; 0
     b9c:	60 e0       	ldi	r22, 0x00	; 0
     b9e:	a9 01       	movw	r20, r18
     ba0:	0e 94 a0 20 	call	0x4140	; 0x4140 <LCD_displayStringRowColumn>
    LCD_displayStringRowColumn(1, 0, "New Password ");
     ba4:	2c e6       	ldi	r18, 0x6C	; 108
     ba6:	30 e0       	ldi	r19, 0x00	; 0
     ba8:	81 e0       	ldi	r24, 0x01	; 1
     baa:	60 e0       	ldi	r22, 0x00	; 0
     bac:	a9 01       	movw	r20, r18
     bae:	0e 94 a0 20 	call	0x4140	; 0x4140 <LCD_displayStringRowColumn>
     bb2:	fe 01       	movw	r30, r28
     bb4:	ed 54       	subi	r30, 0x4D	; 77
     bb6:	ff 4f       	sbci	r31, 0xFF	; 255
     bb8:	80 e0       	ldi	r24, 0x00	; 0
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	aa e7       	ldi	r26, 0x7A	; 122
     bbe:	b4 e4       	ldi	r27, 0x44	; 68
     bc0:	80 83       	st	Z, r24
     bc2:	91 83       	std	Z+1, r25	; 0x01
     bc4:	a2 83       	std	Z+2, r26	; 0x02
     bc6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bc8:	8e 01       	movw	r16, r28
     bca:	01 55       	subi	r16, 0x51	; 81
     bcc:	1f 4f       	sbci	r17, 0xFF	; 255
     bce:	fe 01       	movw	r30, r28
     bd0:	ed 54       	subi	r30, 0x4D	; 77
     bd2:	ff 4f       	sbci	r31, 0xFF	; 255
     bd4:	60 81       	ld	r22, Z
     bd6:	71 81       	ldd	r23, Z+1	; 0x01
     bd8:	82 81       	ldd	r24, Z+2	; 0x02
     bda:	93 81       	ldd	r25, Z+3	; 0x03
     bdc:	20 e0       	ldi	r18, 0x00	; 0
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	4a ef       	ldi	r20, 0xFA	; 250
     be2:	54 e4       	ldi	r21, 0x44	; 68
     be4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     be8:	dc 01       	movw	r26, r24
     bea:	cb 01       	movw	r24, r22
     bec:	f8 01       	movw	r30, r16
     bee:	80 83       	st	Z, r24
     bf0:	91 83       	std	Z+1, r25	; 0x01
     bf2:	a2 83       	std	Z+2, r26	; 0x02
     bf4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     bf6:	fe 01       	movw	r30, r28
     bf8:	e1 55       	subi	r30, 0x51	; 81
     bfa:	ff 4f       	sbci	r31, 0xFF	; 255
     bfc:	60 81       	ld	r22, Z
     bfe:	71 81       	ldd	r23, Z+1	; 0x01
     c00:	82 81       	ldd	r24, Z+2	; 0x02
     c02:	93 81       	ldd	r25, Z+3	; 0x03
     c04:	20 e0       	ldi	r18, 0x00	; 0
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	40 e8       	ldi	r20, 0x80	; 128
     c0a:	5f e3       	ldi	r21, 0x3F	; 63
     c0c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c10:	88 23       	and	r24, r24
     c12:	44 f4       	brge	.+16     	; 0xc24 <New_Password+0xc6>
		__ticks = 1;
     c14:	fe 01       	movw	r30, r28
     c16:	e3 55       	subi	r30, 0x53	; 83
     c18:	ff 4f       	sbci	r31, 0xFF	; 255
     c1a:	81 e0       	ldi	r24, 0x01	; 1
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	91 83       	std	Z+1, r25	; 0x01
     c20:	80 83       	st	Z, r24
     c22:	64 c0       	rjmp	.+200    	; 0xcec <New_Password+0x18e>
	else if (__tmp > 65535)
     c24:	fe 01       	movw	r30, r28
     c26:	e1 55       	subi	r30, 0x51	; 81
     c28:	ff 4f       	sbci	r31, 0xFF	; 255
     c2a:	60 81       	ld	r22, Z
     c2c:	71 81       	ldd	r23, Z+1	; 0x01
     c2e:	82 81       	ldd	r24, Z+2	; 0x02
     c30:	93 81       	ldd	r25, Z+3	; 0x03
     c32:	20 e0       	ldi	r18, 0x00	; 0
     c34:	3f ef       	ldi	r19, 0xFF	; 255
     c36:	4f e7       	ldi	r20, 0x7F	; 127
     c38:	57 e4       	ldi	r21, 0x47	; 71
     c3a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c3e:	18 16       	cp	r1, r24
     c40:	0c f0       	brlt	.+2      	; 0xc44 <New_Password+0xe6>
     c42:	43 c0       	rjmp	.+134    	; 0xcca <New_Password+0x16c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c44:	fe 01       	movw	r30, r28
     c46:	ed 54       	subi	r30, 0x4D	; 77
     c48:	ff 4f       	sbci	r31, 0xFF	; 255
     c4a:	60 81       	ld	r22, Z
     c4c:	71 81       	ldd	r23, Z+1	; 0x01
     c4e:	82 81       	ldd	r24, Z+2	; 0x02
     c50:	93 81       	ldd	r25, Z+3	; 0x03
     c52:	20 e0       	ldi	r18, 0x00	; 0
     c54:	30 e0       	ldi	r19, 0x00	; 0
     c56:	40 e2       	ldi	r20, 0x20	; 32
     c58:	51 e4       	ldi	r21, 0x41	; 65
     c5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c5e:	dc 01       	movw	r26, r24
     c60:	cb 01       	movw	r24, r22
     c62:	8e 01       	movw	r16, r28
     c64:	03 55       	subi	r16, 0x53	; 83
     c66:	1f 4f       	sbci	r17, 0xFF	; 255
     c68:	bc 01       	movw	r22, r24
     c6a:	cd 01       	movw	r24, r26
     c6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c70:	dc 01       	movw	r26, r24
     c72:	cb 01       	movw	r24, r22
     c74:	f8 01       	movw	r30, r16
     c76:	91 83       	std	Z+1, r25	; 0x01
     c78:	80 83       	st	Z, r24
     c7a:	1f c0       	rjmp	.+62     	; 0xcba <New_Password+0x15c>
     c7c:	fe 01       	movw	r30, r28
     c7e:	e5 55       	subi	r30, 0x55	; 85
     c80:	ff 4f       	sbci	r31, 0xFF	; 255
     c82:	88 ec       	ldi	r24, 0xC8	; 200
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	91 83       	std	Z+1, r25	; 0x01
     c88:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c8a:	fe 01       	movw	r30, r28
     c8c:	e5 55       	subi	r30, 0x55	; 85
     c8e:	ff 4f       	sbci	r31, 0xFF	; 255
     c90:	80 81       	ld	r24, Z
     c92:	91 81       	ldd	r25, Z+1	; 0x01
     c94:	01 97       	sbiw	r24, 0x01	; 1
     c96:	f1 f7       	brne	.-4      	; 0xc94 <New_Password+0x136>
     c98:	fe 01       	movw	r30, r28
     c9a:	e5 55       	subi	r30, 0x55	; 85
     c9c:	ff 4f       	sbci	r31, 0xFF	; 255
     c9e:	91 83       	std	Z+1, r25	; 0x01
     ca0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ca2:	de 01       	movw	r26, r28
     ca4:	a3 55       	subi	r26, 0x53	; 83
     ca6:	bf 4f       	sbci	r27, 0xFF	; 255
     ca8:	fe 01       	movw	r30, r28
     caa:	e3 55       	subi	r30, 0x53	; 83
     cac:	ff 4f       	sbci	r31, 0xFF	; 255
     cae:	80 81       	ld	r24, Z
     cb0:	91 81       	ldd	r25, Z+1	; 0x01
     cb2:	01 97       	sbiw	r24, 0x01	; 1
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cba:	fe 01       	movw	r30, r28
     cbc:	e3 55       	subi	r30, 0x53	; 83
     cbe:	ff 4f       	sbci	r31, 0xFF	; 255
     cc0:	80 81       	ld	r24, Z
     cc2:	91 81       	ldd	r25, Z+1	; 0x01
     cc4:	00 97       	sbiw	r24, 0x00	; 0
     cc6:	d1 f6       	brne	.-76     	; 0xc7c <New_Password+0x11e>
     cc8:	27 c0       	rjmp	.+78     	; 0xd18 <New_Password+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cca:	8e 01       	movw	r16, r28
     ccc:	03 55       	subi	r16, 0x53	; 83
     cce:	1f 4f       	sbci	r17, 0xFF	; 255
     cd0:	fe 01       	movw	r30, r28
     cd2:	e1 55       	subi	r30, 0x51	; 81
     cd4:	ff 4f       	sbci	r31, 0xFF	; 255
     cd6:	60 81       	ld	r22, Z
     cd8:	71 81       	ldd	r23, Z+1	; 0x01
     cda:	82 81       	ldd	r24, Z+2	; 0x02
     cdc:	93 81       	ldd	r25, Z+3	; 0x03
     cde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ce2:	dc 01       	movw	r26, r24
     ce4:	cb 01       	movw	r24, r22
     ce6:	f8 01       	movw	r30, r16
     ce8:	91 83       	std	Z+1, r25	; 0x01
     cea:	80 83       	st	Z, r24
     cec:	de 01       	movw	r26, r28
     cee:	a7 55       	subi	r26, 0x57	; 87
     cf0:	bf 4f       	sbci	r27, 0xFF	; 255
     cf2:	fe 01       	movw	r30, r28
     cf4:	e3 55       	subi	r30, 0x53	; 83
     cf6:	ff 4f       	sbci	r31, 0xFF	; 255
     cf8:	80 81       	ld	r24, Z
     cfa:	91 81       	ldd	r25, Z+1	; 0x01
     cfc:	8d 93       	st	X+, r24
     cfe:	9c 93       	st	X, r25
     d00:	fe 01       	movw	r30, r28
     d02:	e7 55       	subi	r30, 0x57	; 87
     d04:	ff 4f       	sbci	r31, 0xFF	; 255
     d06:	80 81       	ld	r24, Z
     d08:	91 81       	ldd	r25, Z+1	; 0x01
     d0a:	01 97       	sbiw	r24, 0x01	; 1
     d0c:	f1 f7       	brne	.-4      	; 0xd0a <New_Password+0x1ac>
     d0e:	fe 01       	movw	r30, r28
     d10:	e7 55       	subi	r30, 0x57	; 87
     d12:	ff 4f       	sbci	r31, 0xFF	; 255
     d14:	91 83       	std	Z+1, r25	; 0x01
     d16:	80 83       	st	Z, r24
    _delay_ms(1000);

    LCD_clearScreen();
     d18:	0e 94 dc 20 	call	0x41b8	; 0x41b8 <LCD_clearScreen>
    LCD_displayStringRowColumn(0, 0, "Plz Enter Pass:");
     d1c:	2a e7       	ldi	r18, 0x7A	; 122
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	80 e0       	ldi	r24, 0x00	; 0
     d22:	60 e0       	ldi	r22, 0x00	; 0
     d24:	a9 01       	movw	r20, r18
     d26:	0e 94 a0 20 	call	0x4140	; 0x4140 <LCD_displayStringRowColumn>
    LCD_moveCursor(1,0);
     d2a:	81 e0       	ldi	r24, 0x01	; 1
     d2c:	60 e0       	ldi	r22, 0x00	; 0
     d2e:	0e 94 5e 20 	call	0x40bc	; 0x40bc <LCD_moveCursor>
     d32:	53 c2       	rjmp	.+1190   	; 0x11da <New_Password+0x67c>
	/*
	 * loop to get the new password from the user
	 */

    while (pass_Counter < 5) {
        key = KEYPAD_getPressedKey();
     d34:	0e 94 30 1a 	call	0x3460	; 0x3460 <KEYPAD_getPressedKey>
     d38:	fe 01       	movw	r30, r28
     d3a:	e8 54       	subi	r30, 0x48	; 72
     d3c:	ff 4f       	sbci	r31, 0xFF	; 255
     d3e:	80 83       	st	Z, r24
     d40:	fe 01       	movw	r30, r28
     d42:	eb 55       	subi	r30, 0x5B	; 91
     d44:	ff 4f       	sbci	r31, 0xFF	; 255
     d46:	80 e0       	ldi	r24, 0x00	; 0
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	a0 e2       	ldi	r26, 0x20	; 32
     d4c:	b1 e4       	ldi	r27, 0x41	; 65
     d4e:	80 83       	st	Z, r24
     d50:	91 83       	std	Z+1, r25	; 0x01
     d52:	a2 83       	std	Z+2, r26	; 0x02
     d54:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d56:	8e 01       	movw	r16, r28
     d58:	0f 55       	subi	r16, 0x5F	; 95
     d5a:	1f 4f       	sbci	r17, 0xFF	; 255
     d5c:	fe 01       	movw	r30, r28
     d5e:	eb 55       	subi	r30, 0x5B	; 91
     d60:	ff 4f       	sbci	r31, 0xFF	; 255
     d62:	60 81       	ld	r22, Z
     d64:	71 81       	ldd	r23, Z+1	; 0x01
     d66:	82 81       	ldd	r24, Z+2	; 0x02
     d68:	93 81       	ldd	r25, Z+3	; 0x03
     d6a:	20 e0       	ldi	r18, 0x00	; 0
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	4a ef       	ldi	r20, 0xFA	; 250
     d70:	54 e4       	ldi	r21, 0x44	; 68
     d72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d76:	dc 01       	movw	r26, r24
     d78:	cb 01       	movw	r24, r22
     d7a:	f8 01       	movw	r30, r16
     d7c:	80 83       	st	Z, r24
     d7e:	91 83       	std	Z+1, r25	; 0x01
     d80:	a2 83       	std	Z+2, r26	; 0x02
     d82:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d84:	fe 01       	movw	r30, r28
     d86:	ef 55       	subi	r30, 0x5F	; 95
     d88:	ff 4f       	sbci	r31, 0xFF	; 255
     d8a:	60 81       	ld	r22, Z
     d8c:	71 81       	ldd	r23, Z+1	; 0x01
     d8e:	82 81       	ldd	r24, Z+2	; 0x02
     d90:	93 81       	ldd	r25, Z+3	; 0x03
     d92:	20 e0       	ldi	r18, 0x00	; 0
     d94:	30 e0       	ldi	r19, 0x00	; 0
     d96:	40 e8       	ldi	r20, 0x80	; 128
     d98:	5f e3       	ldi	r21, 0x3F	; 63
     d9a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d9e:	88 23       	and	r24, r24
     da0:	44 f4       	brge	.+16     	; 0xdb2 <New_Password+0x254>
		__ticks = 1;
     da2:	fe 01       	movw	r30, r28
     da4:	e1 56       	subi	r30, 0x61	; 97
     da6:	ff 4f       	sbci	r31, 0xFF	; 255
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	91 83       	std	Z+1, r25	; 0x01
     dae:	80 83       	st	Z, r24
     db0:	64 c0       	rjmp	.+200    	; 0xe7a <New_Password+0x31c>
	else if (__tmp > 65535)
     db2:	fe 01       	movw	r30, r28
     db4:	ef 55       	subi	r30, 0x5F	; 95
     db6:	ff 4f       	sbci	r31, 0xFF	; 255
     db8:	60 81       	ld	r22, Z
     dba:	71 81       	ldd	r23, Z+1	; 0x01
     dbc:	82 81       	ldd	r24, Z+2	; 0x02
     dbe:	93 81       	ldd	r25, Z+3	; 0x03
     dc0:	20 e0       	ldi	r18, 0x00	; 0
     dc2:	3f ef       	ldi	r19, 0xFF	; 255
     dc4:	4f e7       	ldi	r20, 0x7F	; 127
     dc6:	57 e4       	ldi	r21, 0x47	; 71
     dc8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     dcc:	18 16       	cp	r1, r24
     dce:	0c f0       	brlt	.+2      	; 0xdd2 <New_Password+0x274>
     dd0:	43 c0       	rjmp	.+134    	; 0xe58 <New_Password+0x2fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dd2:	fe 01       	movw	r30, r28
     dd4:	eb 55       	subi	r30, 0x5B	; 91
     dd6:	ff 4f       	sbci	r31, 0xFF	; 255
     dd8:	60 81       	ld	r22, Z
     dda:	71 81       	ldd	r23, Z+1	; 0x01
     ddc:	82 81       	ldd	r24, Z+2	; 0x02
     dde:	93 81       	ldd	r25, Z+3	; 0x03
     de0:	20 e0       	ldi	r18, 0x00	; 0
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	40 e2       	ldi	r20, 0x20	; 32
     de6:	51 e4       	ldi	r21, 0x41	; 65
     de8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dec:	dc 01       	movw	r26, r24
     dee:	cb 01       	movw	r24, r22
     df0:	8e 01       	movw	r16, r28
     df2:	01 56       	subi	r16, 0x61	; 97
     df4:	1f 4f       	sbci	r17, 0xFF	; 255
     df6:	bc 01       	movw	r22, r24
     df8:	cd 01       	movw	r24, r26
     dfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dfe:	dc 01       	movw	r26, r24
     e00:	cb 01       	movw	r24, r22
     e02:	f8 01       	movw	r30, r16
     e04:	91 83       	std	Z+1, r25	; 0x01
     e06:	80 83       	st	Z, r24
     e08:	1f c0       	rjmp	.+62     	; 0xe48 <New_Password+0x2ea>
     e0a:	fe 01       	movw	r30, r28
     e0c:	e3 56       	subi	r30, 0x63	; 99
     e0e:	ff 4f       	sbci	r31, 0xFF	; 255
     e10:	88 ec       	ldi	r24, 0xC8	; 200
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	91 83       	std	Z+1, r25	; 0x01
     e16:	80 83       	st	Z, r24
     e18:	fe 01       	movw	r30, r28
     e1a:	e3 56       	subi	r30, 0x63	; 99
     e1c:	ff 4f       	sbci	r31, 0xFF	; 255
     e1e:	80 81       	ld	r24, Z
     e20:	91 81       	ldd	r25, Z+1	; 0x01
     e22:	01 97       	sbiw	r24, 0x01	; 1
     e24:	f1 f7       	brne	.-4      	; 0xe22 <New_Password+0x2c4>
     e26:	fe 01       	movw	r30, r28
     e28:	e3 56       	subi	r30, 0x63	; 99
     e2a:	ff 4f       	sbci	r31, 0xFF	; 255
     e2c:	91 83       	std	Z+1, r25	; 0x01
     e2e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e30:	de 01       	movw	r26, r28
     e32:	a1 56       	subi	r26, 0x61	; 97
     e34:	bf 4f       	sbci	r27, 0xFF	; 255
     e36:	fe 01       	movw	r30, r28
     e38:	e1 56       	subi	r30, 0x61	; 97
     e3a:	ff 4f       	sbci	r31, 0xFF	; 255
     e3c:	80 81       	ld	r24, Z
     e3e:	91 81       	ldd	r25, Z+1	; 0x01
     e40:	01 97       	sbiw	r24, 0x01	; 1
     e42:	11 96       	adiw	r26, 0x01	; 1
     e44:	9c 93       	st	X, r25
     e46:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e48:	fe 01       	movw	r30, r28
     e4a:	e1 56       	subi	r30, 0x61	; 97
     e4c:	ff 4f       	sbci	r31, 0xFF	; 255
     e4e:	80 81       	ld	r24, Z
     e50:	91 81       	ldd	r25, Z+1	; 0x01
     e52:	00 97       	sbiw	r24, 0x00	; 0
     e54:	d1 f6       	brne	.-76     	; 0xe0a <New_Password+0x2ac>
     e56:	e3 c0       	rjmp	.+454    	; 0x101e <New_Password+0x4c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e58:	8e 01       	movw	r16, r28
     e5a:	01 56       	subi	r16, 0x61	; 97
     e5c:	1f 4f       	sbci	r17, 0xFF	; 255
     e5e:	fe 01       	movw	r30, r28
     e60:	ef 55       	subi	r30, 0x5F	; 95
     e62:	ff 4f       	sbci	r31, 0xFF	; 255
     e64:	60 81       	ld	r22, Z
     e66:	71 81       	ldd	r23, Z+1	; 0x01
     e68:	82 81       	ldd	r24, Z+2	; 0x02
     e6a:	93 81       	ldd	r25, Z+3	; 0x03
     e6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e70:	dc 01       	movw	r26, r24
     e72:	cb 01       	movw	r24, r22
     e74:	f8 01       	movw	r30, r16
     e76:	91 83       	std	Z+1, r25	; 0x01
     e78:	80 83       	st	Z, r24
     e7a:	de 01       	movw	r26, r28
     e7c:	a5 56       	subi	r26, 0x65	; 101
     e7e:	bf 4f       	sbci	r27, 0xFF	; 255
     e80:	fe 01       	movw	r30, r28
     e82:	e1 56       	subi	r30, 0x61	; 97
     e84:	ff 4f       	sbci	r31, 0xFF	; 255
     e86:	80 81       	ld	r24, Z
     e88:	91 81       	ldd	r25, Z+1	; 0x01
     e8a:	11 96       	adiw	r26, 0x01	; 1
     e8c:	9c 93       	st	X, r25
     e8e:	8e 93       	st	-X, r24
     e90:	fe 01       	movw	r30, r28
     e92:	e5 56       	subi	r30, 0x65	; 101
     e94:	ff 4f       	sbci	r31, 0xFF	; 255
     e96:	80 81       	ld	r24, Z
     e98:	91 81       	ldd	r25, Z+1	; 0x01
     e9a:	01 97       	sbiw	r24, 0x01	; 1
     e9c:	f1 f7       	brne	.-4      	; 0xe9a <New_Password+0x33c>
     e9e:	fe 01       	movw	r30, r28
     ea0:	e5 56       	subi	r30, 0x65	; 101
     ea2:	ff 4f       	sbci	r31, 0xFF	; 255
     ea4:	91 83       	std	Z+1, r25	; 0x01
     ea6:	80 83       	st	Z, r24
     ea8:	ba c0       	rjmp	.+372    	; 0x101e <New_Password+0x4c0>
    	_delay_ms(10);
    	while(!((key >= 0) && (key <= 9)))
    	{
    	 key = KEYPAD_getPressedKey();
     eaa:	0e 94 30 1a 	call	0x3460	; 0x3460 <KEYPAD_getPressedKey>
     eae:	fe 01       	movw	r30, r28
     eb0:	e8 54       	subi	r30, 0x48	; 72
     eb2:	ff 4f       	sbci	r31, 0xFF	; 255
     eb4:	80 83       	st	Z, r24
     eb6:	fe 01       	movw	r30, r28
     eb8:	e9 56       	subi	r30, 0x69	; 105
     eba:	ff 4f       	sbci	r31, 0xFF	; 255
     ebc:	80 e0       	ldi	r24, 0x00	; 0
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	a0 e2       	ldi	r26, 0x20	; 32
     ec2:	b1 e4       	ldi	r27, 0x41	; 65
     ec4:	80 83       	st	Z, r24
     ec6:	91 83       	std	Z+1, r25	; 0x01
     ec8:	a2 83       	std	Z+2, r26	; 0x02
     eca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ecc:	8e 01       	movw	r16, r28
     ece:	0d 56       	subi	r16, 0x6D	; 109
     ed0:	1f 4f       	sbci	r17, 0xFF	; 255
     ed2:	fe 01       	movw	r30, r28
     ed4:	e9 56       	subi	r30, 0x69	; 105
     ed6:	ff 4f       	sbci	r31, 0xFF	; 255
     ed8:	60 81       	ld	r22, Z
     eda:	71 81       	ldd	r23, Z+1	; 0x01
     edc:	82 81       	ldd	r24, Z+2	; 0x02
     ede:	93 81       	ldd	r25, Z+3	; 0x03
     ee0:	20 e0       	ldi	r18, 0x00	; 0
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	4a ef       	ldi	r20, 0xFA	; 250
     ee6:	54 e4       	ldi	r21, 0x44	; 68
     ee8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eec:	dc 01       	movw	r26, r24
     eee:	cb 01       	movw	r24, r22
     ef0:	f8 01       	movw	r30, r16
     ef2:	80 83       	st	Z, r24
     ef4:	91 83       	std	Z+1, r25	; 0x01
     ef6:	a2 83       	std	Z+2, r26	; 0x02
     ef8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     efa:	fe 01       	movw	r30, r28
     efc:	ed 56       	subi	r30, 0x6D	; 109
     efe:	ff 4f       	sbci	r31, 0xFF	; 255
     f00:	60 81       	ld	r22, Z
     f02:	71 81       	ldd	r23, Z+1	; 0x01
     f04:	82 81       	ldd	r24, Z+2	; 0x02
     f06:	93 81       	ldd	r25, Z+3	; 0x03
     f08:	20 e0       	ldi	r18, 0x00	; 0
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	40 e8       	ldi	r20, 0x80	; 128
     f0e:	5f e3       	ldi	r21, 0x3F	; 63
     f10:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f14:	88 23       	and	r24, r24
     f16:	44 f4       	brge	.+16     	; 0xf28 <New_Password+0x3ca>
		__ticks = 1;
     f18:	fe 01       	movw	r30, r28
     f1a:	ef 56       	subi	r30, 0x6F	; 111
     f1c:	ff 4f       	sbci	r31, 0xFF	; 255
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	91 83       	std	Z+1, r25	; 0x01
     f24:	80 83       	st	Z, r24
     f26:	64 c0       	rjmp	.+200    	; 0xff0 <New_Password+0x492>
	else if (__tmp > 65535)
     f28:	fe 01       	movw	r30, r28
     f2a:	ed 56       	subi	r30, 0x6D	; 109
     f2c:	ff 4f       	sbci	r31, 0xFF	; 255
     f2e:	60 81       	ld	r22, Z
     f30:	71 81       	ldd	r23, Z+1	; 0x01
     f32:	82 81       	ldd	r24, Z+2	; 0x02
     f34:	93 81       	ldd	r25, Z+3	; 0x03
     f36:	20 e0       	ldi	r18, 0x00	; 0
     f38:	3f ef       	ldi	r19, 0xFF	; 255
     f3a:	4f e7       	ldi	r20, 0x7F	; 127
     f3c:	57 e4       	ldi	r21, 0x47	; 71
     f3e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f42:	18 16       	cp	r1, r24
     f44:	0c f0       	brlt	.+2      	; 0xf48 <New_Password+0x3ea>
     f46:	43 c0       	rjmp	.+134    	; 0xfce <New_Password+0x470>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f48:	fe 01       	movw	r30, r28
     f4a:	e9 56       	subi	r30, 0x69	; 105
     f4c:	ff 4f       	sbci	r31, 0xFF	; 255
     f4e:	60 81       	ld	r22, Z
     f50:	71 81       	ldd	r23, Z+1	; 0x01
     f52:	82 81       	ldd	r24, Z+2	; 0x02
     f54:	93 81       	ldd	r25, Z+3	; 0x03
     f56:	20 e0       	ldi	r18, 0x00	; 0
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	40 e2       	ldi	r20, 0x20	; 32
     f5c:	51 e4       	ldi	r21, 0x41	; 65
     f5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f62:	dc 01       	movw	r26, r24
     f64:	cb 01       	movw	r24, r22
     f66:	8e 01       	movw	r16, r28
     f68:	0f 56       	subi	r16, 0x6F	; 111
     f6a:	1f 4f       	sbci	r17, 0xFF	; 255
     f6c:	bc 01       	movw	r22, r24
     f6e:	cd 01       	movw	r24, r26
     f70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f74:	dc 01       	movw	r26, r24
     f76:	cb 01       	movw	r24, r22
     f78:	f8 01       	movw	r30, r16
     f7a:	91 83       	std	Z+1, r25	; 0x01
     f7c:	80 83       	st	Z, r24
     f7e:	1f c0       	rjmp	.+62     	; 0xfbe <New_Password+0x460>
     f80:	fe 01       	movw	r30, r28
     f82:	e1 57       	subi	r30, 0x71	; 113
     f84:	ff 4f       	sbci	r31, 0xFF	; 255
     f86:	88 ec       	ldi	r24, 0xC8	; 200
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	91 83       	std	Z+1, r25	; 0x01
     f8c:	80 83       	st	Z, r24
     f8e:	fe 01       	movw	r30, r28
     f90:	e1 57       	subi	r30, 0x71	; 113
     f92:	ff 4f       	sbci	r31, 0xFF	; 255
     f94:	80 81       	ld	r24, Z
     f96:	91 81       	ldd	r25, Z+1	; 0x01
     f98:	01 97       	sbiw	r24, 0x01	; 1
     f9a:	f1 f7       	brne	.-4      	; 0xf98 <New_Password+0x43a>
     f9c:	fe 01       	movw	r30, r28
     f9e:	e1 57       	subi	r30, 0x71	; 113
     fa0:	ff 4f       	sbci	r31, 0xFF	; 255
     fa2:	91 83       	std	Z+1, r25	; 0x01
     fa4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fa6:	de 01       	movw	r26, r28
     fa8:	af 56       	subi	r26, 0x6F	; 111
     faa:	bf 4f       	sbci	r27, 0xFF	; 255
     fac:	fe 01       	movw	r30, r28
     fae:	ef 56       	subi	r30, 0x6F	; 111
     fb0:	ff 4f       	sbci	r31, 0xFF	; 255
     fb2:	80 81       	ld	r24, Z
     fb4:	91 81       	ldd	r25, Z+1	; 0x01
     fb6:	01 97       	sbiw	r24, 0x01	; 1
     fb8:	11 96       	adiw	r26, 0x01	; 1
     fba:	9c 93       	st	X, r25
     fbc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fbe:	fe 01       	movw	r30, r28
     fc0:	ef 56       	subi	r30, 0x6F	; 111
     fc2:	ff 4f       	sbci	r31, 0xFF	; 255
     fc4:	80 81       	ld	r24, Z
     fc6:	91 81       	ldd	r25, Z+1	; 0x01
     fc8:	00 97       	sbiw	r24, 0x00	; 0
     fca:	d1 f6       	brne	.-76     	; 0xf80 <New_Password+0x422>
     fcc:	28 c0       	rjmp	.+80     	; 0x101e <New_Password+0x4c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fce:	8e 01       	movw	r16, r28
     fd0:	0f 56       	subi	r16, 0x6F	; 111
     fd2:	1f 4f       	sbci	r17, 0xFF	; 255
     fd4:	fe 01       	movw	r30, r28
     fd6:	ed 56       	subi	r30, 0x6D	; 109
     fd8:	ff 4f       	sbci	r31, 0xFF	; 255
     fda:	60 81       	ld	r22, Z
     fdc:	71 81       	ldd	r23, Z+1	; 0x01
     fde:	82 81       	ldd	r24, Z+2	; 0x02
     fe0:	93 81       	ldd	r25, Z+3	; 0x03
     fe2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fe6:	dc 01       	movw	r26, r24
     fe8:	cb 01       	movw	r24, r22
     fea:	f8 01       	movw	r30, r16
     fec:	91 83       	std	Z+1, r25	; 0x01
     fee:	80 83       	st	Z, r24
     ff0:	de 01       	movw	r26, r28
     ff2:	a3 57       	subi	r26, 0x73	; 115
     ff4:	bf 4f       	sbci	r27, 0xFF	; 255
     ff6:	fe 01       	movw	r30, r28
     ff8:	ef 56       	subi	r30, 0x6F	; 111
     ffa:	ff 4f       	sbci	r31, 0xFF	; 255
     ffc:	80 81       	ld	r24, Z
     ffe:	91 81       	ldd	r25, Z+1	; 0x01
    1000:	11 96       	adiw	r26, 0x01	; 1
    1002:	9c 93       	st	X, r25
    1004:	8e 93       	st	-X, r24
    1006:	fe 01       	movw	r30, r28
    1008:	e3 57       	subi	r30, 0x73	; 115
    100a:	ff 4f       	sbci	r31, 0xFF	; 255
    100c:	80 81       	ld	r24, Z
    100e:	91 81       	ldd	r25, Z+1	; 0x01
    1010:	01 97       	sbiw	r24, 0x01	; 1
    1012:	f1 f7       	brne	.-4      	; 0x1010 <New_Password+0x4b2>
    1014:	fe 01       	movw	r30, r28
    1016:	e3 57       	subi	r30, 0x73	; 115
    1018:	ff 4f       	sbci	r31, 0xFF	; 255
    101a:	91 83       	std	Z+1, r25	; 0x01
    101c:	80 83       	st	Z, r24
	 */

    while (pass_Counter < 5) {
        key = KEYPAD_getPressedKey();
    	_delay_ms(10);
    	while(!((key >= 0) && (key <= 9)))
    101e:	fe 01       	movw	r30, r28
    1020:	e8 54       	subi	r30, 0x48	; 72
    1022:	ff 4f       	sbci	r31, 0xFF	; 255
    1024:	80 81       	ld	r24, Z
    1026:	8a 30       	cpi	r24, 0x0A	; 10
    1028:	08 f0       	brcs	.+2      	; 0x102c <New_Password+0x4ce>
    102a:	3f cf       	rjmp	.-386    	; 0xeaa <New_Password+0x34c>
    	{
    	 key = KEYPAD_getPressedKey();
    		_delay_ms(10);
    	}
        LCD_displayStringRowColumn(1, pass_Counter, "*");
    102c:	fe 01       	movw	r30, r28
    102e:	e7 54       	subi	r30, 0x47	; 71
    1030:	ff 4f       	sbci	r31, 0xFF	; 255
    1032:	2a e8       	ldi	r18, 0x8A	; 138
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	60 81       	ld	r22, Z
    103a:	a9 01       	movw	r20, r18
    103c:	0e 94 a0 20 	call	0x4140	; 0x4140 <LCD_displayStringRowColumn>
    1040:	fe 01       	movw	r30, r28
    1042:	e7 57       	subi	r30, 0x77	; 119
    1044:	ff 4f       	sbci	r31, 0xFF	; 255
    1046:	80 e0       	ldi	r24, 0x00	; 0
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	aa ef       	ldi	r26, 0xFA	; 250
    104c:	b3 e4       	ldi	r27, 0x43	; 67
    104e:	80 83       	st	Z, r24
    1050:	91 83       	std	Z+1, r25	; 0x01
    1052:	a2 83       	std	Z+2, r26	; 0x02
    1054:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1056:	8e 01       	movw	r16, r28
    1058:	0b 57       	subi	r16, 0x7B	; 123
    105a:	1f 4f       	sbci	r17, 0xFF	; 255
    105c:	fe 01       	movw	r30, r28
    105e:	e7 57       	subi	r30, 0x77	; 119
    1060:	ff 4f       	sbci	r31, 0xFF	; 255
    1062:	60 81       	ld	r22, Z
    1064:	71 81       	ldd	r23, Z+1	; 0x01
    1066:	82 81       	ldd	r24, Z+2	; 0x02
    1068:	93 81       	ldd	r25, Z+3	; 0x03
    106a:	20 e0       	ldi	r18, 0x00	; 0
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	4a ef       	ldi	r20, 0xFA	; 250
    1070:	54 e4       	ldi	r21, 0x44	; 68
    1072:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1076:	dc 01       	movw	r26, r24
    1078:	cb 01       	movw	r24, r22
    107a:	f8 01       	movw	r30, r16
    107c:	80 83       	st	Z, r24
    107e:	91 83       	std	Z+1, r25	; 0x01
    1080:	a2 83       	std	Z+2, r26	; 0x02
    1082:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1084:	fe 01       	movw	r30, r28
    1086:	eb 57       	subi	r30, 0x7B	; 123
    1088:	ff 4f       	sbci	r31, 0xFF	; 255
    108a:	60 81       	ld	r22, Z
    108c:	71 81       	ldd	r23, Z+1	; 0x01
    108e:	82 81       	ldd	r24, Z+2	; 0x02
    1090:	93 81       	ldd	r25, Z+3	; 0x03
    1092:	20 e0       	ldi	r18, 0x00	; 0
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	40 e8       	ldi	r20, 0x80	; 128
    1098:	5f e3       	ldi	r21, 0x3F	; 63
    109a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    109e:	88 23       	and	r24, r24
    10a0:	44 f4       	brge	.+16     	; 0x10b2 <New_Password+0x554>
		__ticks = 1;
    10a2:	fe 01       	movw	r30, r28
    10a4:	ed 57       	subi	r30, 0x7D	; 125
    10a6:	ff 4f       	sbci	r31, 0xFF	; 255
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	91 83       	std	Z+1, r25	; 0x01
    10ae:	80 83       	st	Z, r24
    10b0:	64 c0       	rjmp	.+200    	; 0x117a <New_Password+0x61c>
	else if (__tmp > 65535)
    10b2:	fe 01       	movw	r30, r28
    10b4:	eb 57       	subi	r30, 0x7B	; 123
    10b6:	ff 4f       	sbci	r31, 0xFF	; 255
    10b8:	60 81       	ld	r22, Z
    10ba:	71 81       	ldd	r23, Z+1	; 0x01
    10bc:	82 81       	ldd	r24, Z+2	; 0x02
    10be:	93 81       	ldd	r25, Z+3	; 0x03
    10c0:	20 e0       	ldi	r18, 0x00	; 0
    10c2:	3f ef       	ldi	r19, 0xFF	; 255
    10c4:	4f e7       	ldi	r20, 0x7F	; 127
    10c6:	57 e4       	ldi	r21, 0x47	; 71
    10c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10cc:	18 16       	cp	r1, r24
    10ce:	0c f0       	brlt	.+2      	; 0x10d2 <New_Password+0x574>
    10d0:	43 c0       	rjmp	.+134    	; 0x1158 <New_Password+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10d2:	fe 01       	movw	r30, r28
    10d4:	e7 57       	subi	r30, 0x77	; 119
    10d6:	ff 4f       	sbci	r31, 0xFF	; 255
    10d8:	60 81       	ld	r22, Z
    10da:	71 81       	ldd	r23, Z+1	; 0x01
    10dc:	82 81       	ldd	r24, Z+2	; 0x02
    10de:	93 81       	ldd	r25, Z+3	; 0x03
    10e0:	20 e0       	ldi	r18, 0x00	; 0
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	40 e2       	ldi	r20, 0x20	; 32
    10e6:	51 e4       	ldi	r21, 0x41	; 65
    10e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10ec:	dc 01       	movw	r26, r24
    10ee:	cb 01       	movw	r24, r22
    10f0:	8e 01       	movw	r16, r28
    10f2:	0d 57       	subi	r16, 0x7D	; 125
    10f4:	1f 4f       	sbci	r17, 0xFF	; 255
    10f6:	bc 01       	movw	r22, r24
    10f8:	cd 01       	movw	r24, r26
    10fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10fe:	dc 01       	movw	r26, r24
    1100:	cb 01       	movw	r24, r22
    1102:	f8 01       	movw	r30, r16
    1104:	91 83       	std	Z+1, r25	; 0x01
    1106:	80 83       	st	Z, r24
    1108:	1f c0       	rjmp	.+62     	; 0x1148 <New_Password+0x5ea>
    110a:	fe 01       	movw	r30, r28
    110c:	ef 57       	subi	r30, 0x7F	; 127
    110e:	ff 4f       	sbci	r31, 0xFF	; 255
    1110:	88 ec       	ldi	r24, 0xC8	; 200
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	91 83       	std	Z+1, r25	; 0x01
    1116:	80 83       	st	Z, r24
    1118:	fe 01       	movw	r30, r28
    111a:	ef 57       	subi	r30, 0x7F	; 127
    111c:	ff 4f       	sbci	r31, 0xFF	; 255
    111e:	80 81       	ld	r24, Z
    1120:	91 81       	ldd	r25, Z+1	; 0x01
    1122:	01 97       	sbiw	r24, 0x01	; 1
    1124:	f1 f7       	brne	.-4      	; 0x1122 <New_Password+0x5c4>
    1126:	fe 01       	movw	r30, r28
    1128:	ef 57       	subi	r30, 0x7F	; 127
    112a:	ff 4f       	sbci	r31, 0xFF	; 255
    112c:	91 83       	std	Z+1, r25	; 0x01
    112e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1130:	de 01       	movw	r26, r28
    1132:	ad 57       	subi	r26, 0x7D	; 125
    1134:	bf 4f       	sbci	r27, 0xFF	; 255
    1136:	fe 01       	movw	r30, r28
    1138:	ed 57       	subi	r30, 0x7D	; 125
    113a:	ff 4f       	sbci	r31, 0xFF	; 255
    113c:	80 81       	ld	r24, Z
    113e:	91 81       	ldd	r25, Z+1	; 0x01
    1140:	01 97       	sbiw	r24, 0x01	; 1
    1142:	11 96       	adiw	r26, 0x01	; 1
    1144:	9c 93       	st	X, r25
    1146:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1148:	fe 01       	movw	r30, r28
    114a:	ed 57       	subi	r30, 0x7D	; 125
    114c:	ff 4f       	sbci	r31, 0xFF	; 255
    114e:	80 81       	ld	r24, Z
    1150:	91 81       	ldd	r25, Z+1	; 0x01
    1152:	00 97       	sbiw	r24, 0x00	; 0
    1154:	d1 f6       	brne	.-76     	; 0x110a <New_Password+0x5ac>
    1156:	27 c0       	rjmp	.+78     	; 0x11a6 <New_Password+0x648>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1158:	8e 01       	movw	r16, r28
    115a:	0d 57       	subi	r16, 0x7D	; 125
    115c:	1f 4f       	sbci	r17, 0xFF	; 255
    115e:	fe 01       	movw	r30, r28
    1160:	eb 57       	subi	r30, 0x7B	; 123
    1162:	ff 4f       	sbci	r31, 0xFF	; 255
    1164:	60 81       	ld	r22, Z
    1166:	71 81       	ldd	r23, Z+1	; 0x01
    1168:	82 81       	ldd	r24, Z+2	; 0x02
    116a:	93 81       	ldd	r25, Z+3	; 0x03
    116c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1170:	dc 01       	movw	r26, r24
    1172:	cb 01       	movw	r24, r22
    1174:	f8 01       	movw	r30, r16
    1176:	91 83       	std	Z+1, r25	; 0x01
    1178:	80 83       	st	Z, r24
    117a:	de 01       	movw	r26, r28
    117c:	a1 58       	subi	r26, 0x81	; 129
    117e:	bf 4f       	sbci	r27, 0xFF	; 255
    1180:	fe 01       	movw	r30, r28
    1182:	ed 57       	subi	r30, 0x7D	; 125
    1184:	ff 4f       	sbci	r31, 0xFF	; 255
    1186:	80 81       	ld	r24, Z
    1188:	91 81       	ldd	r25, Z+1	; 0x01
    118a:	8d 93       	st	X+, r24
    118c:	9c 93       	st	X, r25
    118e:	fe 01       	movw	r30, r28
    1190:	e1 58       	subi	r30, 0x81	; 129
    1192:	ff 4f       	sbci	r31, 0xFF	; 255
    1194:	80 81       	ld	r24, Z
    1196:	91 81       	ldd	r25, Z+1	; 0x01
    1198:	01 97       	sbiw	r24, 0x01	; 1
    119a:	f1 f7       	brne	.-4      	; 0x1198 <New_Password+0x63a>
    119c:	fe 01       	movw	r30, r28
    119e:	e1 58       	subi	r30, 0x81	; 129
    11a0:	ff 4f       	sbci	r31, 0xFF	; 255
    11a2:	91 83       	std	Z+1, r25	; 0x01
    11a4:	80 83       	st	Z, r24
    	_delay_ms(500);
    	/*
    	 * store entered key to compare it with repassword
    	 */
        password[pass_Counter] = key;
    11a6:	fe 01       	movw	r30, r28
    11a8:	e7 54       	subi	r30, 0x47	; 71
    11aa:	ff 4f       	sbci	r31, 0xFF	; 255
    11ac:	80 81       	ld	r24, Z
    11ae:	28 2f       	mov	r18, r24
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	ce 01       	movw	r24, r28
    11b4:	86 54       	subi	r24, 0x46	; 70
    11b6:	9f 4f       	sbci	r25, 0xFF	; 255
    11b8:	dc 01       	movw	r26, r24
    11ba:	a2 0f       	add	r26, r18
    11bc:	b3 1f       	adc	r27, r19
    11be:	fe 01       	movw	r30, r28
    11c0:	e8 54       	subi	r30, 0x48	; 72
    11c2:	ff 4f       	sbci	r31, 0xFF	; 255
    11c4:	80 81       	ld	r24, Z
    11c6:	8c 93       	st	X, r24
        pass_Counter++;
    11c8:	de 01       	movw	r26, r28
    11ca:	a7 54       	subi	r26, 0x47	; 71
    11cc:	bf 4f       	sbci	r27, 0xFF	; 255
    11ce:	fe 01       	movw	r30, r28
    11d0:	e7 54       	subi	r30, 0x47	; 71
    11d2:	ff 4f       	sbci	r31, 0xFF	; 255
    11d4:	80 81       	ld	r24, Z
    11d6:	8f 5f       	subi	r24, 0xFF	; 255
    11d8:	8c 93       	st	X, r24
    LCD_moveCursor(1,0);
	/*
	 * loop to get the new password from the user
	 */

    while (pass_Counter < 5) {
    11da:	fe 01       	movw	r30, r28
    11dc:	e7 54       	subi	r30, 0x47	; 71
    11de:	ff 4f       	sbci	r31, 0xFF	; 255
    11e0:	80 81       	ld	r24, Z
    11e2:	85 30       	cpi	r24, 0x05	; 5
    11e4:	08 f4       	brcc	.+2      	; 0x11e8 <New_Password+0x68a>
    11e6:	a6 cd       	rjmp	.-1204   	; 0xd34 <New_Password+0x1d6>
    	 * store entered key to compare it with repassword
    	 */
        password[pass_Counter] = key;
        pass_Counter++;
    }
    LCD_clearScreen();
    11e8:	0e 94 dc 20 	call	0x41b8	; 0x41b8 <LCD_clearScreen>
    LCD_displayStringRowColumn(0, 0, "Press = to ");
    11ec:	2c e8       	ldi	r18, 0x8C	; 140
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	80 e0       	ldi	r24, 0x00	; 0
    11f2:	60 e0       	ldi	r22, 0x00	; 0
    11f4:	a9 01       	movw	r20, r18
    11f6:	0e 94 a0 20 	call	0x4140	; 0x4140 <LCD_displayStringRowColumn>
    LCD_displayStringRowColumn(1, 0, "save password");
    11fa:	28 e9       	ldi	r18, 0x98	; 152
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	60 e0       	ldi	r22, 0x00	; 0
    1202:	a9 01       	movw	r20, r18
    1204:	0e 94 a0 20 	call	0x4140	; 0x4140 <LCD_displayStringRowColumn>
    key = KEYPAD_getPressedKey();
    1208:	0e 94 30 1a 	call	0x3460	; 0x3460 <KEYPAD_getPressedKey>
    120c:	fe 01       	movw	r30, r28
    120e:	e8 54       	subi	r30, 0x48	; 72
    1210:	ff 4f       	sbci	r31, 0xFF	; 255
    1212:	80 83       	st	Z, r24
    1214:	ba c0       	rjmp	.+372    	; 0x138a <New_Password+0x82c>
    while(key!='=')
    {	/*
		* display a message to the user to press = to save the password
		*/

    	key=KEYPAD_getPressedKey();
    1216:	0e 94 30 1a 	call	0x3460	; 0x3460 <KEYPAD_getPressedKey>
    121a:	fe 01       	movw	r30, r28
    121c:	e8 54       	subi	r30, 0x48	; 72
    121e:	ff 4f       	sbci	r31, 0xFF	; 255
    1220:	80 83       	st	Z, r24
    1222:	fe 01       	movw	r30, r28
    1224:	e5 58       	subi	r30, 0x85	; 133
    1226:	ff 4f       	sbci	r31, 0xFF	; 255
    1228:	80 e0       	ldi	r24, 0x00	; 0
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	a8 e4       	ldi	r26, 0x48	; 72
    122e:	b2 e4       	ldi	r27, 0x42	; 66
    1230:	80 83       	st	Z, r24
    1232:	91 83       	std	Z+1, r25	; 0x01
    1234:	a2 83       	std	Z+2, r26	; 0x02
    1236:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1238:	8e 01       	movw	r16, r28
    123a:	09 58       	subi	r16, 0x89	; 137
    123c:	1f 4f       	sbci	r17, 0xFF	; 255
    123e:	fe 01       	movw	r30, r28
    1240:	e5 58       	subi	r30, 0x85	; 133
    1242:	ff 4f       	sbci	r31, 0xFF	; 255
    1244:	60 81       	ld	r22, Z
    1246:	71 81       	ldd	r23, Z+1	; 0x01
    1248:	82 81       	ldd	r24, Z+2	; 0x02
    124a:	93 81       	ldd	r25, Z+3	; 0x03
    124c:	20 e0       	ldi	r18, 0x00	; 0
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	4a ef       	ldi	r20, 0xFA	; 250
    1252:	54 e4       	ldi	r21, 0x44	; 68
    1254:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1258:	dc 01       	movw	r26, r24
    125a:	cb 01       	movw	r24, r22
    125c:	f8 01       	movw	r30, r16
    125e:	80 83       	st	Z, r24
    1260:	91 83       	std	Z+1, r25	; 0x01
    1262:	a2 83       	std	Z+2, r26	; 0x02
    1264:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1266:	fe 01       	movw	r30, r28
    1268:	e9 58       	subi	r30, 0x89	; 137
    126a:	ff 4f       	sbci	r31, 0xFF	; 255
    126c:	60 81       	ld	r22, Z
    126e:	71 81       	ldd	r23, Z+1	; 0x01
    1270:	82 81       	ldd	r24, Z+2	; 0x02
    1272:	93 81       	ldd	r25, Z+3	; 0x03
    1274:	20 e0       	ldi	r18, 0x00	; 0
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	40 e8       	ldi	r20, 0x80	; 128
    127a:	5f e3       	ldi	r21, 0x3F	; 63
    127c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1280:	88 23       	and	r24, r24
    1282:	44 f4       	brge	.+16     	; 0x1294 <New_Password+0x736>
		__ticks = 1;
    1284:	fe 01       	movw	r30, r28
    1286:	eb 58       	subi	r30, 0x8B	; 139
    1288:	ff 4f       	sbci	r31, 0xFF	; 255
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	91 83       	std	Z+1, r25	; 0x01
    1290:	80 83       	st	Z, r24
    1292:	64 c0       	rjmp	.+200    	; 0x135c <New_Password+0x7fe>
	else if (__tmp > 65535)
    1294:	fe 01       	movw	r30, r28
    1296:	e9 58       	subi	r30, 0x89	; 137
    1298:	ff 4f       	sbci	r31, 0xFF	; 255
    129a:	60 81       	ld	r22, Z
    129c:	71 81       	ldd	r23, Z+1	; 0x01
    129e:	82 81       	ldd	r24, Z+2	; 0x02
    12a0:	93 81       	ldd	r25, Z+3	; 0x03
    12a2:	20 e0       	ldi	r18, 0x00	; 0
    12a4:	3f ef       	ldi	r19, 0xFF	; 255
    12a6:	4f e7       	ldi	r20, 0x7F	; 127
    12a8:	57 e4       	ldi	r21, 0x47	; 71
    12aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12ae:	18 16       	cp	r1, r24
    12b0:	0c f0       	brlt	.+2      	; 0x12b4 <New_Password+0x756>
    12b2:	43 c0       	rjmp	.+134    	; 0x133a <New_Password+0x7dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12b4:	fe 01       	movw	r30, r28
    12b6:	e5 58       	subi	r30, 0x85	; 133
    12b8:	ff 4f       	sbci	r31, 0xFF	; 255
    12ba:	60 81       	ld	r22, Z
    12bc:	71 81       	ldd	r23, Z+1	; 0x01
    12be:	82 81       	ldd	r24, Z+2	; 0x02
    12c0:	93 81       	ldd	r25, Z+3	; 0x03
    12c2:	20 e0       	ldi	r18, 0x00	; 0
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	40 e2       	ldi	r20, 0x20	; 32
    12c8:	51 e4       	ldi	r21, 0x41	; 65
    12ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12ce:	dc 01       	movw	r26, r24
    12d0:	cb 01       	movw	r24, r22
    12d2:	8e 01       	movw	r16, r28
    12d4:	0b 58       	subi	r16, 0x8B	; 139
    12d6:	1f 4f       	sbci	r17, 0xFF	; 255
    12d8:	bc 01       	movw	r22, r24
    12da:	cd 01       	movw	r24, r26
    12dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12e0:	dc 01       	movw	r26, r24
    12e2:	cb 01       	movw	r24, r22
    12e4:	f8 01       	movw	r30, r16
    12e6:	91 83       	std	Z+1, r25	; 0x01
    12e8:	80 83       	st	Z, r24
    12ea:	1f c0       	rjmp	.+62     	; 0x132a <New_Password+0x7cc>
    12ec:	fe 01       	movw	r30, r28
    12ee:	ed 58       	subi	r30, 0x8D	; 141
    12f0:	ff 4f       	sbci	r31, 0xFF	; 255
    12f2:	88 ec       	ldi	r24, 0xC8	; 200
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	91 83       	std	Z+1, r25	; 0x01
    12f8:	80 83       	st	Z, r24
    12fa:	fe 01       	movw	r30, r28
    12fc:	ed 58       	subi	r30, 0x8D	; 141
    12fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1300:	80 81       	ld	r24, Z
    1302:	91 81       	ldd	r25, Z+1	; 0x01
    1304:	01 97       	sbiw	r24, 0x01	; 1
    1306:	f1 f7       	brne	.-4      	; 0x1304 <New_Password+0x7a6>
    1308:	fe 01       	movw	r30, r28
    130a:	ed 58       	subi	r30, 0x8D	; 141
    130c:	ff 4f       	sbci	r31, 0xFF	; 255
    130e:	91 83       	std	Z+1, r25	; 0x01
    1310:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1312:	de 01       	movw	r26, r28
    1314:	ab 58       	subi	r26, 0x8B	; 139
    1316:	bf 4f       	sbci	r27, 0xFF	; 255
    1318:	fe 01       	movw	r30, r28
    131a:	eb 58       	subi	r30, 0x8B	; 139
    131c:	ff 4f       	sbci	r31, 0xFF	; 255
    131e:	80 81       	ld	r24, Z
    1320:	91 81       	ldd	r25, Z+1	; 0x01
    1322:	01 97       	sbiw	r24, 0x01	; 1
    1324:	11 96       	adiw	r26, 0x01	; 1
    1326:	9c 93       	st	X, r25
    1328:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    132a:	fe 01       	movw	r30, r28
    132c:	eb 58       	subi	r30, 0x8B	; 139
    132e:	ff 4f       	sbci	r31, 0xFF	; 255
    1330:	80 81       	ld	r24, Z
    1332:	91 81       	ldd	r25, Z+1	; 0x01
    1334:	00 97       	sbiw	r24, 0x00	; 0
    1336:	d1 f6       	brne	.-76     	; 0x12ec <New_Password+0x78e>
    1338:	28 c0       	rjmp	.+80     	; 0x138a <New_Password+0x82c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    133a:	8e 01       	movw	r16, r28
    133c:	0b 58       	subi	r16, 0x8B	; 139
    133e:	1f 4f       	sbci	r17, 0xFF	; 255
    1340:	fe 01       	movw	r30, r28
    1342:	e9 58       	subi	r30, 0x89	; 137
    1344:	ff 4f       	sbci	r31, 0xFF	; 255
    1346:	60 81       	ld	r22, Z
    1348:	71 81       	ldd	r23, Z+1	; 0x01
    134a:	82 81       	ldd	r24, Z+2	; 0x02
    134c:	93 81       	ldd	r25, Z+3	; 0x03
    134e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1352:	dc 01       	movw	r26, r24
    1354:	cb 01       	movw	r24, r22
    1356:	f8 01       	movw	r30, r16
    1358:	91 83       	std	Z+1, r25	; 0x01
    135a:	80 83       	st	Z, r24
    135c:	de 01       	movw	r26, r28
    135e:	af 58       	subi	r26, 0x8F	; 143
    1360:	bf 4f       	sbci	r27, 0xFF	; 255
    1362:	fe 01       	movw	r30, r28
    1364:	eb 58       	subi	r30, 0x8B	; 139
    1366:	ff 4f       	sbci	r31, 0xFF	; 255
    1368:	80 81       	ld	r24, Z
    136a:	91 81       	ldd	r25, Z+1	; 0x01
    136c:	11 96       	adiw	r26, 0x01	; 1
    136e:	9c 93       	st	X, r25
    1370:	8e 93       	st	-X, r24
    1372:	fe 01       	movw	r30, r28
    1374:	ef 58       	subi	r30, 0x8F	; 143
    1376:	ff 4f       	sbci	r31, 0xFF	; 255
    1378:	80 81       	ld	r24, Z
    137a:	91 81       	ldd	r25, Z+1	; 0x01
    137c:	01 97       	sbiw	r24, 0x01	; 1
    137e:	f1 f7       	brne	.-4      	; 0x137c <New_Password+0x81e>
    1380:	fe 01       	movw	r30, r28
    1382:	ef 58       	subi	r30, 0x8F	; 143
    1384:	ff 4f       	sbci	r31, 0xFF	; 255
    1386:	91 83       	std	Z+1, r25	; 0x01
    1388:	80 83       	st	Z, r24
    }
    LCD_clearScreen();
    LCD_displayStringRowColumn(0, 0, "Press = to ");
    LCD_displayStringRowColumn(1, 0, "save password");
    key = KEYPAD_getPressedKey();
    while(key!='=')
    138a:	fe 01       	movw	r30, r28
    138c:	e8 54       	subi	r30, 0x48	; 72
    138e:	ff 4f       	sbci	r31, 0xFF	; 255
    1390:	80 81       	ld	r24, Z
    1392:	8d 33       	cpi	r24, 0x3D	; 61
    1394:	09 f0       	breq	.+2      	; 0x1398 <New_Password+0x83a>
    1396:	3f cf       	rjmp	.-386    	; 0x1216 <New_Password+0x6b8>
    	_delay_ms(50);
    }
	/*
	 * display a message to the user to re-enter the password
	*/
    LCD_clearScreen();
    1398:	0e 94 dc 20 	call	0x41b8	; 0x41b8 <LCD_clearScreen>
    LCD_displayStringRowColumn(0, 0, "Re-enter Pass:");
    139c:	26 ea       	ldi	r18, 0xA6	; 166
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	80 e0       	ldi	r24, 0x00	; 0
    13a2:	60 e0       	ldi	r22, 0x00	; 0
    13a4:	a9 01       	movw	r20, r18
    13a6:	0e 94 a0 20 	call	0x4140	; 0x4140 <LCD_displayStringRowColumn>
    LCD_moveCursor(1,0);
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	60 e0       	ldi	r22, 0x00	; 0
    13ae:	0e 94 5e 20 	call	0x40bc	; 0x40bc <LCD_moveCursor>
	/*
	 * loop to get the re-entered password from the user
	*/
    pass_Counter = 0;
    13b2:	fe 01       	movw	r30, r28
    13b4:	e7 54       	subi	r30, 0x47	; 71
    13b6:	ff 4f       	sbci	r31, 0xFF	; 255
    13b8:	10 82       	st	Z, r1
    13ba:	53 c2       	rjmp	.+1190   	; 0x1862 <New_Password+0xd04>
    while (pass_Counter < 5) {
        key = KEYPAD_getPressedKey();
    13bc:	0e 94 30 1a 	call	0x3460	; 0x3460 <KEYPAD_getPressedKey>
    13c0:	fe 01       	movw	r30, r28
    13c2:	e8 54       	subi	r30, 0x48	; 72
    13c4:	ff 4f       	sbci	r31, 0xFF	; 255
    13c6:	80 83       	st	Z, r24
    13c8:	fe 01       	movw	r30, r28
    13ca:	e3 59       	subi	r30, 0x93	; 147
    13cc:	ff 4f       	sbci	r31, 0xFF	; 255
    13ce:	80 e0       	ldi	r24, 0x00	; 0
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	a0 e2       	ldi	r26, 0x20	; 32
    13d4:	b1 e4       	ldi	r27, 0x41	; 65
    13d6:	80 83       	st	Z, r24
    13d8:	91 83       	std	Z+1, r25	; 0x01
    13da:	a2 83       	std	Z+2, r26	; 0x02
    13dc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13de:	8e 01       	movw	r16, r28
    13e0:	07 59       	subi	r16, 0x97	; 151
    13e2:	1f 4f       	sbci	r17, 0xFF	; 255
    13e4:	fe 01       	movw	r30, r28
    13e6:	e3 59       	subi	r30, 0x93	; 147
    13e8:	ff 4f       	sbci	r31, 0xFF	; 255
    13ea:	60 81       	ld	r22, Z
    13ec:	71 81       	ldd	r23, Z+1	; 0x01
    13ee:	82 81       	ldd	r24, Z+2	; 0x02
    13f0:	93 81       	ldd	r25, Z+3	; 0x03
    13f2:	20 e0       	ldi	r18, 0x00	; 0
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	4a ef       	ldi	r20, 0xFA	; 250
    13f8:	54 e4       	ldi	r21, 0x44	; 68
    13fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13fe:	dc 01       	movw	r26, r24
    1400:	cb 01       	movw	r24, r22
    1402:	f8 01       	movw	r30, r16
    1404:	80 83       	st	Z, r24
    1406:	91 83       	std	Z+1, r25	; 0x01
    1408:	a2 83       	std	Z+2, r26	; 0x02
    140a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    140c:	fe 01       	movw	r30, r28
    140e:	e7 59       	subi	r30, 0x97	; 151
    1410:	ff 4f       	sbci	r31, 0xFF	; 255
    1412:	60 81       	ld	r22, Z
    1414:	71 81       	ldd	r23, Z+1	; 0x01
    1416:	82 81       	ldd	r24, Z+2	; 0x02
    1418:	93 81       	ldd	r25, Z+3	; 0x03
    141a:	20 e0       	ldi	r18, 0x00	; 0
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	40 e8       	ldi	r20, 0x80	; 128
    1420:	5f e3       	ldi	r21, 0x3F	; 63
    1422:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1426:	88 23       	and	r24, r24
    1428:	44 f4       	brge	.+16     	; 0x143a <New_Password+0x8dc>
		__ticks = 1;
    142a:	fe 01       	movw	r30, r28
    142c:	e9 59       	subi	r30, 0x99	; 153
    142e:	ff 4f       	sbci	r31, 0xFF	; 255
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	91 83       	std	Z+1, r25	; 0x01
    1436:	80 83       	st	Z, r24
    1438:	64 c0       	rjmp	.+200    	; 0x1502 <New_Password+0x9a4>
	else if (__tmp > 65535)
    143a:	fe 01       	movw	r30, r28
    143c:	e7 59       	subi	r30, 0x97	; 151
    143e:	ff 4f       	sbci	r31, 0xFF	; 255
    1440:	60 81       	ld	r22, Z
    1442:	71 81       	ldd	r23, Z+1	; 0x01
    1444:	82 81       	ldd	r24, Z+2	; 0x02
    1446:	93 81       	ldd	r25, Z+3	; 0x03
    1448:	20 e0       	ldi	r18, 0x00	; 0
    144a:	3f ef       	ldi	r19, 0xFF	; 255
    144c:	4f e7       	ldi	r20, 0x7F	; 127
    144e:	57 e4       	ldi	r21, 0x47	; 71
    1450:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1454:	18 16       	cp	r1, r24
    1456:	0c f0       	brlt	.+2      	; 0x145a <New_Password+0x8fc>
    1458:	43 c0       	rjmp	.+134    	; 0x14e0 <New_Password+0x982>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    145a:	fe 01       	movw	r30, r28
    145c:	e3 59       	subi	r30, 0x93	; 147
    145e:	ff 4f       	sbci	r31, 0xFF	; 255
    1460:	60 81       	ld	r22, Z
    1462:	71 81       	ldd	r23, Z+1	; 0x01
    1464:	82 81       	ldd	r24, Z+2	; 0x02
    1466:	93 81       	ldd	r25, Z+3	; 0x03
    1468:	20 e0       	ldi	r18, 0x00	; 0
    146a:	30 e0       	ldi	r19, 0x00	; 0
    146c:	40 e2       	ldi	r20, 0x20	; 32
    146e:	51 e4       	ldi	r21, 0x41	; 65
    1470:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1474:	dc 01       	movw	r26, r24
    1476:	cb 01       	movw	r24, r22
    1478:	8e 01       	movw	r16, r28
    147a:	09 59       	subi	r16, 0x99	; 153
    147c:	1f 4f       	sbci	r17, 0xFF	; 255
    147e:	bc 01       	movw	r22, r24
    1480:	cd 01       	movw	r24, r26
    1482:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1486:	dc 01       	movw	r26, r24
    1488:	cb 01       	movw	r24, r22
    148a:	f8 01       	movw	r30, r16
    148c:	91 83       	std	Z+1, r25	; 0x01
    148e:	80 83       	st	Z, r24
    1490:	1f c0       	rjmp	.+62     	; 0x14d0 <New_Password+0x972>
    1492:	fe 01       	movw	r30, r28
    1494:	eb 59       	subi	r30, 0x9B	; 155
    1496:	ff 4f       	sbci	r31, 0xFF	; 255
    1498:	88 ec       	ldi	r24, 0xC8	; 200
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	91 83       	std	Z+1, r25	; 0x01
    149e:	80 83       	st	Z, r24
    14a0:	fe 01       	movw	r30, r28
    14a2:	eb 59       	subi	r30, 0x9B	; 155
    14a4:	ff 4f       	sbci	r31, 0xFF	; 255
    14a6:	80 81       	ld	r24, Z
    14a8:	91 81       	ldd	r25, Z+1	; 0x01
    14aa:	01 97       	sbiw	r24, 0x01	; 1
    14ac:	f1 f7       	brne	.-4      	; 0x14aa <New_Password+0x94c>
    14ae:	fe 01       	movw	r30, r28
    14b0:	eb 59       	subi	r30, 0x9B	; 155
    14b2:	ff 4f       	sbci	r31, 0xFF	; 255
    14b4:	91 83       	std	Z+1, r25	; 0x01
    14b6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14b8:	de 01       	movw	r26, r28
    14ba:	a9 59       	subi	r26, 0x99	; 153
    14bc:	bf 4f       	sbci	r27, 0xFF	; 255
    14be:	fe 01       	movw	r30, r28
    14c0:	e9 59       	subi	r30, 0x99	; 153
    14c2:	ff 4f       	sbci	r31, 0xFF	; 255
    14c4:	80 81       	ld	r24, Z
    14c6:	91 81       	ldd	r25, Z+1	; 0x01
    14c8:	01 97       	sbiw	r24, 0x01	; 1
    14ca:	11 96       	adiw	r26, 0x01	; 1
    14cc:	9c 93       	st	X, r25
    14ce:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14d0:	fe 01       	movw	r30, r28
    14d2:	e9 59       	subi	r30, 0x99	; 153
    14d4:	ff 4f       	sbci	r31, 0xFF	; 255
    14d6:	80 81       	ld	r24, Z
    14d8:	91 81       	ldd	r25, Z+1	; 0x01
    14da:	00 97       	sbiw	r24, 0x00	; 0
    14dc:	d1 f6       	brne	.-76     	; 0x1492 <New_Password+0x934>
    14de:	e3 c0       	rjmp	.+454    	; 0x16a6 <New_Password+0xb48>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14e0:	8e 01       	movw	r16, r28
    14e2:	09 59       	subi	r16, 0x99	; 153
    14e4:	1f 4f       	sbci	r17, 0xFF	; 255
    14e6:	fe 01       	movw	r30, r28
    14e8:	e7 59       	subi	r30, 0x97	; 151
    14ea:	ff 4f       	sbci	r31, 0xFF	; 255
    14ec:	60 81       	ld	r22, Z
    14ee:	71 81       	ldd	r23, Z+1	; 0x01
    14f0:	82 81       	ldd	r24, Z+2	; 0x02
    14f2:	93 81       	ldd	r25, Z+3	; 0x03
    14f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14f8:	dc 01       	movw	r26, r24
    14fa:	cb 01       	movw	r24, r22
    14fc:	f8 01       	movw	r30, r16
    14fe:	91 83       	std	Z+1, r25	; 0x01
    1500:	80 83       	st	Z, r24
    1502:	de 01       	movw	r26, r28
    1504:	ad 59       	subi	r26, 0x9D	; 157
    1506:	bf 4f       	sbci	r27, 0xFF	; 255
    1508:	fe 01       	movw	r30, r28
    150a:	e9 59       	subi	r30, 0x99	; 153
    150c:	ff 4f       	sbci	r31, 0xFF	; 255
    150e:	80 81       	ld	r24, Z
    1510:	91 81       	ldd	r25, Z+1	; 0x01
    1512:	11 96       	adiw	r26, 0x01	; 1
    1514:	9c 93       	st	X, r25
    1516:	8e 93       	st	-X, r24
    1518:	fe 01       	movw	r30, r28
    151a:	ed 59       	subi	r30, 0x9D	; 157
    151c:	ff 4f       	sbci	r31, 0xFF	; 255
    151e:	80 81       	ld	r24, Z
    1520:	91 81       	ldd	r25, Z+1	; 0x01
    1522:	01 97       	sbiw	r24, 0x01	; 1
    1524:	f1 f7       	brne	.-4      	; 0x1522 <New_Password+0x9c4>
    1526:	fe 01       	movw	r30, r28
    1528:	ed 59       	subi	r30, 0x9D	; 157
    152a:	ff 4f       	sbci	r31, 0xFF	; 255
    152c:	91 83       	std	Z+1, r25	; 0x01
    152e:	80 83       	st	Z, r24
    1530:	ba c0       	rjmp	.+372    	; 0x16a6 <New_Password+0xb48>
    	_delay_ms(10);
    	while(!((key >= 0) && (key <= 9)))
    	{
    	   key = KEYPAD_getPressedKey();
    1532:	0e 94 30 1a 	call	0x3460	; 0x3460 <KEYPAD_getPressedKey>
    1536:	fe 01       	movw	r30, r28
    1538:	e8 54       	subi	r30, 0x48	; 72
    153a:	ff 4f       	sbci	r31, 0xFF	; 255
    153c:	80 83       	st	Z, r24
    153e:	fe 01       	movw	r30, r28
    1540:	e1 5a       	subi	r30, 0xA1	; 161
    1542:	ff 4f       	sbci	r31, 0xFF	; 255
    1544:	80 e0       	ldi	r24, 0x00	; 0
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	a0 e2       	ldi	r26, 0x20	; 32
    154a:	b1 e4       	ldi	r27, 0x41	; 65
    154c:	80 83       	st	Z, r24
    154e:	91 83       	std	Z+1, r25	; 0x01
    1550:	a2 83       	std	Z+2, r26	; 0x02
    1552:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1554:	8e 01       	movw	r16, r28
    1556:	05 5a       	subi	r16, 0xA5	; 165
    1558:	1f 4f       	sbci	r17, 0xFF	; 255
    155a:	fe 01       	movw	r30, r28
    155c:	e1 5a       	subi	r30, 0xA1	; 161
    155e:	ff 4f       	sbci	r31, 0xFF	; 255
    1560:	60 81       	ld	r22, Z
    1562:	71 81       	ldd	r23, Z+1	; 0x01
    1564:	82 81       	ldd	r24, Z+2	; 0x02
    1566:	93 81       	ldd	r25, Z+3	; 0x03
    1568:	20 e0       	ldi	r18, 0x00	; 0
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	4a ef       	ldi	r20, 0xFA	; 250
    156e:	54 e4       	ldi	r21, 0x44	; 68
    1570:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1574:	dc 01       	movw	r26, r24
    1576:	cb 01       	movw	r24, r22
    1578:	f8 01       	movw	r30, r16
    157a:	80 83       	st	Z, r24
    157c:	91 83       	std	Z+1, r25	; 0x01
    157e:	a2 83       	std	Z+2, r26	; 0x02
    1580:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1582:	fe 01       	movw	r30, r28
    1584:	e5 5a       	subi	r30, 0xA5	; 165
    1586:	ff 4f       	sbci	r31, 0xFF	; 255
    1588:	60 81       	ld	r22, Z
    158a:	71 81       	ldd	r23, Z+1	; 0x01
    158c:	82 81       	ldd	r24, Z+2	; 0x02
    158e:	93 81       	ldd	r25, Z+3	; 0x03
    1590:	20 e0       	ldi	r18, 0x00	; 0
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	40 e8       	ldi	r20, 0x80	; 128
    1596:	5f e3       	ldi	r21, 0x3F	; 63
    1598:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    159c:	88 23       	and	r24, r24
    159e:	44 f4       	brge	.+16     	; 0x15b0 <New_Password+0xa52>
		__ticks = 1;
    15a0:	fe 01       	movw	r30, r28
    15a2:	e7 5a       	subi	r30, 0xA7	; 167
    15a4:	ff 4f       	sbci	r31, 0xFF	; 255
    15a6:	81 e0       	ldi	r24, 0x01	; 1
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	91 83       	std	Z+1, r25	; 0x01
    15ac:	80 83       	st	Z, r24
    15ae:	64 c0       	rjmp	.+200    	; 0x1678 <New_Password+0xb1a>
	else if (__tmp > 65535)
    15b0:	fe 01       	movw	r30, r28
    15b2:	e5 5a       	subi	r30, 0xA5	; 165
    15b4:	ff 4f       	sbci	r31, 0xFF	; 255
    15b6:	60 81       	ld	r22, Z
    15b8:	71 81       	ldd	r23, Z+1	; 0x01
    15ba:	82 81       	ldd	r24, Z+2	; 0x02
    15bc:	93 81       	ldd	r25, Z+3	; 0x03
    15be:	20 e0       	ldi	r18, 0x00	; 0
    15c0:	3f ef       	ldi	r19, 0xFF	; 255
    15c2:	4f e7       	ldi	r20, 0x7F	; 127
    15c4:	57 e4       	ldi	r21, 0x47	; 71
    15c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15ca:	18 16       	cp	r1, r24
    15cc:	0c f0       	brlt	.+2      	; 0x15d0 <New_Password+0xa72>
    15ce:	43 c0       	rjmp	.+134    	; 0x1656 <New_Password+0xaf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15d0:	fe 01       	movw	r30, r28
    15d2:	e1 5a       	subi	r30, 0xA1	; 161
    15d4:	ff 4f       	sbci	r31, 0xFF	; 255
    15d6:	60 81       	ld	r22, Z
    15d8:	71 81       	ldd	r23, Z+1	; 0x01
    15da:	82 81       	ldd	r24, Z+2	; 0x02
    15dc:	93 81       	ldd	r25, Z+3	; 0x03
    15de:	20 e0       	ldi	r18, 0x00	; 0
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	40 e2       	ldi	r20, 0x20	; 32
    15e4:	51 e4       	ldi	r21, 0x41	; 65
    15e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15ea:	dc 01       	movw	r26, r24
    15ec:	cb 01       	movw	r24, r22
    15ee:	8e 01       	movw	r16, r28
    15f0:	07 5a       	subi	r16, 0xA7	; 167
    15f2:	1f 4f       	sbci	r17, 0xFF	; 255
    15f4:	bc 01       	movw	r22, r24
    15f6:	cd 01       	movw	r24, r26
    15f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15fc:	dc 01       	movw	r26, r24
    15fe:	cb 01       	movw	r24, r22
    1600:	f8 01       	movw	r30, r16
    1602:	91 83       	std	Z+1, r25	; 0x01
    1604:	80 83       	st	Z, r24
    1606:	1f c0       	rjmp	.+62     	; 0x1646 <New_Password+0xae8>
    1608:	fe 01       	movw	r30, r28
    160a:	e9 5a       	subi	r30, 0xA9	; 169
    160c:	ff 4f       	sbci	r31, 0xFF	; 255
    160e:	88 ec       	ldi	r24, 0xC8	; 200
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	91 83       	std	Z+1, r25	; 0x01
    1614:	80 83       	st	Z, r24
    1616:	fe 01       	movw	r30, r28
    1618:	e9 5a       	subi	r30, 0xA9	; 169
    161a:	ff 4f       	sbci	r31, 0xFF	; 255
    161c:	80 81       	ld	r24, Z
    161e:	91 81       	ldd	r25, Z+1	; 0x01
    1620:	01 97       	sbiw	r24, 0x01	; 1
    1622:	f1 f7       	brne	.-4      	; 0x1620 <New_Password+0xac2>
    1624:	fe 01       	movw	r30, r28
    1626:	e9 5a       	subi	r30, 0xA9	; 169
    1628:	ff 4f       	sbci	r31, 0xFF	; 255
    162a:	91 83       	std	Z+1, r25	; 0x01
    162c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    162e:	de 01       	movw	r26, r28
    1630:	a7 5a       	subi	r26, 0xA7	; 167
    1632:	bf 4f       	sbci	r27, 0xFF	; 255
    1634:	fe 01       	movw	r30, r28
    1636:	e7 5a       	subi	r30, 0xA7	; 167
    1638:	ff 4f       	sbci	r31, 0xFF	; 255
    163a:	80 81       	ld	r24, Z
    163c:	91 81       	ldd	r25, Z+1	; 0x01
    163e:	01 97       	sbiw	r24, 0x01	; 1
    1640:	11 96       	adiw	r26, 0x01	; 1
    1642:	9c 93       	st	X, r25
    1644:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1646:	fe 01       	movw	r30, r28
    1648:	e7 5a       	subi	r30, 0xA7	; 167
    164a:	ff 4f       	sbci	r31, 0xFF	; 255
    164c:	80 81       	ld	r24, Z
    164e:	91 81       	ldd	r25, Z+1	; 0x01
    1650:	00 97       	sbiw	r24, 0x00	; 0
    1652:	d1 f6       	brne	.-76     	; 0x1608 <New_Password+0xaaa>
    1654:	28 c0       	rjmp	.+80     	; 0x16a6 <New_Password+0xb48>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1656:	8e 01       	movw	r16, r28
    1658:	07 5a       	subi	r16, 0xA7	; 167
    165a:	1f 4f       	sbci	r17, 0xFF	; 255
    165c:	fe 01       	movw	r30, r28
    165e:	e5 5a       	subi	r30, 0xA5	; 165
    1660:	ff 4f       	sbci	r31, 0xFF	; 255
    1662:	60 81       	ld	r22, Z
    1664:	71 81       	ldd	r23, Z+1	; 0x01
    1666:	82 81       	ldd	r24, Z+2	; 0x02
    1668:	93 81       	ldd	r25, Z+3	; 0x03
    166a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    166e:	dc 01       	movw	r26, r24
    1670:	cb 01       	movw	r24, r22
    1672:	f8 01       	movw	r30, r16
    1674:	91 83       	std	Z+1, r25	; 0x01
    1676:	80 83       	st	Z, r24
    1678:	de 01       	movw	r26, r28
    167a:	ab 5a       	subi	r26, 0xAB	; 171
    167c:	bf 4f       	sbci	r27, 0xFF	; 255
    167e:	fe 01       	movw	r30, r28
    1680:	e7 5a       	subi	r30, 0xA7	; 167
    1682:	ff 4f       	sbci	r31, 0xFF	; 255
    1684:	80 81       	ld	r24, Z
    1686:	91 81       	ldd	r25, Z+1	; 0x01
    1688:	11 96       	adiw	r26, 0x01	; 1
    168a:	9c 93       	st	X, r25
    168c:	8e 93       	st	-X, r24
    168e:	fe 01       	movw	r30, r28
    1690:	eb 5a       	subi	r30, 0xAB	; 171
    1692:	ff 4f       	sbci	r31, 0xFF	; 255
    1694:	80 81       	ld	r24, Z
    1696:	91 81       	ldd	r25, Z+1	; 0x01
    1698:	01 97       	sbiw	r24, 0x01	; 1
    169a:	f1 f7       	brne	.-4      	; 0x1698 <New_Password+0xb3a>
    169c:	fe 01       	movw	r30, r28
    169e:	eb 5a       	subi	r30, 0xAB	; 171
    16a0:	ff 4f       	sbci	r31, 0xFF	; 255
    16a2:	91 83       	std	Z+1, r25	; 0x01
    16a4:	80 83       	st	Z, r24
	*/
    pass_Counter = 0;
    while (pass_Counter < 5) {
        key = KEYPAD_getPressedKey();
    	_delay_ms(10);
    	while(!((key >= 0) && (key <= 9)))
    16a6:	fe 01       	movw	r30, r28
    16a8:	e8 54       	subi	r30, 0x48	; 72
    16aa:	ff 4f       	sbci	r31, 0xFF	; 255
    16ac:	80 81       	ld	r24, Z
    16ae:	8a 30       	cpi	r24, 0x0A	; 10
    16b0:	08 f0       	brcs	.+2      	; 0x16b4 <New_Password+0xb56>
    16b2:	3f cf       	rjmp	.-386    	; 0x1532 <New_Password+0x9d4>
    	{
    	   key = KEYPAD_getPressedKey();
    	    _delay_ms(10);
    	  }
    	LCD_displayStringRowColumn(1, pass_Counter, "*");
    16b4:	fe 01       	movw	r30, r28
    16b6:	e7 54       	subi	r30, 0x47	; 71
    16b8:	ff 4f       	sbci	r31, 0xFF	; 255
    16ba:	2a e8       	ldi	r18, 0x8A	; 138
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	81 e0       	ldi	r24, 0x01	; 1
    16c0:	60 81       	ld	r22, Z
    16c2:	a9 01       	movw	r20, r18
    16c4:	0e 94 a0 20 	call	0x4140	; 0x4140 <LCD_displayStringRowColumn>
    16c8:	fe 01       	movw	r30, r28
    16ca:	ef 5a       	subi	r30, 0xAF	; 175
    16cc:	ff 4f       	sbci	r31, 0xFF	; 255
    16ce:	80 e0       	ldi	r24, 0x00	; 0
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	aa ef       	ldi	r26, 0xFA	; 250
    16d4:	b3 e4       	ldi	r27, 0x43	; 67
    16d6:	80 83       	st	Z, r24
    16d8:	91 83       	std	Z+1, r25	; 0x01
    16da:	a2 83       	std	Z+2, r26	; 0x02
    16dc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16de:	8e 01       	movw	r16, r28
    16e0:	03 5b       	subi	r16, 0xB3	; 179
    16e2:	1f 4f       	sbci	r17, 0xFF	; 255
    16e4:	fe 01       	movw	r30, r28
    16e6:	ef 5a       	subi	r30, 0xAF	; 175
    16e8:	ff 4f       	sbci	r31, 0xFF	; 255
    16ea:	60 81       	ld	r22, Z
    16ec:	71 81       	ldd	r23, Z+1	; 0x01
    16ee:	82 81       	ldd	r24, Z+2	; 0x02
    16f0:	93 81       	ldd	r25, Z+3	; 0x03
    16f2:	20 e0       	ldi	r18, 0x00	; 0
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	4a ef       	ldi	r20, 0xFA	; 250
    16f8:	54 e4       	ldi	r21, 0x44	; 68
    16fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16fe:	dc 01       	movw	r26, r24
    1700:	cb 01       	movw	r24, r22
    1702:	f8 01       	movw	r30, r16
    1704:	80 83       	st	Z, r24
    1706:	91 83       	std	Z+1, r25	; 0x01
    1708:	a2 83       	std	Z+2, r26	; 0x02
    170a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    170c:	fe 01       	movw	r30, r28
    170e:	e3 5b       	subi	r30, 0xB3	; 179
    1710:	ff 4f       	sbci	r31, 0xFF	; 255
    1712:	60 81       	ld	r22, Z
    1714:	71 81       	ldd	r23, Z+1	; 0x01
    1716:	82 81       	ldd	r24, Z+2	; 0x02
    1718:	93 81       	ldd	r25, Z+3	; 0x03
    171a:	20 e0       	ldi	r18, 0x00	; 0
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	40 e8       	ldi	r20, 0x80	; 128
    1720:	5f e3       	ldi	r21, 0x3F	; 63
    1722:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1726:	88 23       	and	r24, r24
    1728:	44 f4       	brge	.+16     	; 0x173a <New_Password+0xbdc>
		__ticks = 1;
    172a:	fe 01       	movw	r30, r28
    172c:	e5 5b       	subi	r30, 0xB5	; 181
    172e:	ff 4f       	sbci	r31, 0xFF	; 255
    1730:	81 e0       	ldi	r24, 0x01	; 1
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	91 83       	std	Z+1, r25	; 0x01
    1736:	80 83       	st	Z, r24
    1738:	64 c0       	rjmp	.+200    	; 0x1802 <New_Password+0xca4>
	else if (__tmp > 65535)
    173a:	fe 01       	movw	r30, r28
    173c:	e3 5b       	subi	r30, 0xB3	; 179
    173e:	ff 4f       	sbci	r31, 0xFF	; 255
    1740:	60 81       	ld	r22, Z
    1742:	71 81       	ldd	r23, Z+1	; 0x01
    1744:	82 81       	ldd	r24, Z+2	; 0x02
    1746:	93 81       	ldd	r25, Z+3	; 0x03
    1748:	20 e0       	ldi	r18, 0x00	; 0
    174a:	3f ef       	ldi	r19, 0xFF	; 255
    174c:	4f e7       	ldi	r20, 0x7F	; 127
    174e:	57 e4       	ldi	r21, 0x47	; 71
    1750:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1754:	18 16       	cp	r1, r24
    1756:	0c f0       	brlt	.+2      	; 0x175a <New_Password+0xbfc>
    1758:	43 c0       	rjmp	.+134    	; 0x17e0 <New_Password+0xc82>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    175a:	fe 01       	movw	r30, r28
    175c:	ef 5a       	subi	r30, 0xAF	; 175
    175e:	ff 4f       	sbci	r31, 0xFF	; 255
    1760:	60 81       	ld	r22, Z
    1762:	71 81       	ldd	r23, Z+1	; 0x01
    1764:	82 81       	ldd	r24, Z+2	; 0x02
    1766:	93 81       	ldd	r25, Z+3	; 0x03
    1768:	20 e0       	ldi	r18, 0x00	; 0
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	40 e2       	ldi	r20, 0x20	; 32
    176e:	51 e4       	ldi	r21, 0x41	; 65
    1770:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1774:	dc 01       	movw	r26, r24
    1776:	cb 01       	movw	r24, r22
    1778:	8e 01       	movw	r16, r28
    177a:	05 5b       	subi	r16, 0xB5	; 181
    177c:	1f 4f       	sbci	r17, 0xFF	; 255
    177e:	bc 01       	movw	r22, r24
    1780:	cd 01       	movw	r24, r26
    1782:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1786:	dc 01       	movw	r26, r24
    1788:	cb 01       	movw	r24, r22
    178a:	f8 01       	movw	r30, r16
    178c:	91 83       	std	Z+1, r25	; 0x01
    178e:	80 83       	st	Z, r24
    1790:	1f c0       	rjmp	.+62     	; 0x17d0 <New_Password+0xc72>
    1792:	fe 01       	movw	r30, r28
    1794:	e7 5b       	subi	r30, 0xB7	; 183
    1796:	ff 4f       	sbci	r31, 0xFF	; 255
    1798:	88 ec       	ldi	r24, 0xC8	; 200
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	91 83       	std	Z+1, r25	; 0x01
    179e:	80 83       	st	Z, r24
    17a0:	fe 01       	movw	r30, r28
    17a2:	e7 5b       	subi	r30, 0xB7	; 183
    17a4:	ff 4f       	sbci	r31, 0xFF	; 255
    17a6:	80 81       	ld	r24, Z
    17a8:	91 81       	ldd	r25, Z+1	; 0x01
    17aa:	01 97       	sbiw	r24, 0x01	; 1
    17ac:	f1 f7       	brne	.-4      	; 0x17aa <New_Password+0xc4c>
    17ae:	fe 01       	movw	r30, r28
    17b0:	e7 5b       	subi	r30, 0xB7	; 183
    17b2:	ff 4f       	sbci	r31, 0xFF	; 255
    17b4:	91 83       	std	Z+1, r25	; 0x01
    17b6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17b8:	de 01       	movw	r26, r28
    17ba:	a5 5b       	subi	r26, 0xB5	; 181
    17bc:	bf 4f       	sbci	r27, 0xFF	; 255
    17be:	fe 01       	movw	r30, r28
    17c0:	e5 5b       	subi	r30, 0xB5	; 181
    17c2:	ff 4f       	sbci	r31, 0xFF	; 255
    17c4:	80 81       	ld	r24, Z
    17c6:	91 81       	ldd	r25, Z+1	; 0x01
    17c8:	01 97       	sbiw	r24, 0x01	; 1
    17ca:	11 96       	adiw	r26, 0x01	; 1
    17cc:	9c 93       	st	X, r25
    17ce:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17d0:	fe 01       	movw	r30, r28
    17d2:	e5 5b       	subi	r30, 0xB5	; 181
    17d4:	ff 4f       	sbci	r31, 0xFF	; 255
    17d6:	80 81       	ld	r24, Z
    17d8:	91 81       	ldd	r25, Z+1	; 0x01
    17da:	00 97       	sbiw	r24, 0x00	; 0
    17dc:	d1 f6       	brne	.-76     	; 0x1792 <New_Password+0xc34>
    17de:	27 c0       	rjmp	.+78     	; 0x182e <New_Password+0xcd0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17e0:	8e 01       	movw	r16, r28
    17e2:	05 5b       	subi	r16, 0xB5	; 181
    17e4:	1f 4f       	sbci	r17, 0xFF	; 255
    17e6:	fe 01       	movw	r30, r28
    17e8:	e3 5b       	subi	r30, 0xB3	; 179
    17ea:	ff 4f       	sbci	r31, 0xFF	; 255
    17ec:	60 81       	ld	r22, Z
    17ee:	71 81       	ldd	r23, Z+1	; 0x01
    17f0:	82 81       	ldd	r24, Z+2	; 0x02
    17f2:	93 81       	ldd	r25, Z+3	; 0x03
    17f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17f8:	dc 01       	movw	r26, r24
    17fa:	cb 01       	movw	r24, r22
    17fc:	f8 01       	movw	r30, r16
    17fe:	91 83       	std	Z+1, r25	; 0x01
    1800:	80 83       	st	Z, r24
    1802:	de 01       	movw	r26, r28
    1804:	a9 5b       	subi	r26, 0xB9	; 185
    1806:	bf 4f       	sbci	r27, 0xFF	; 255
    1808:	fe 01       	movw	r30, r28
    180a:	e5 5b       	subi	r30, 0xB5	; 181
    180c:	ff 4f       	sbci	r31, 0xFF	; 255
    180e:	80 81       	ld	r24, Z
    1810:	91 81       	ldd	r25, Z+1	; 0x01
    1812:	8d 93       	st	X+, r24
    1814:	9c 93       	st	X, r25
    1816:	fe 01       	movw	r30, r28
    1818:	e9 5b       	subi	r30, 0xB9	; 185
    181a:	ff 4f       	sbci	r31, 0xFF	; 255
    181c:	80 81       	ld	r24, Z
    181e:	91 81       	ldd	r25, Z+1	; 0x01
    1820:	01 97       	sbiw	r24, 0x01	; 1
    1822:	f1 f7       	brne	.-4      	; 0x1820 <New_Password+0xcc2>
    1824:	fe 01       	movw	r30, r28
    1826:	e9 5b       	subi	r30, 0xB9	; 185
    1828:	ff 4f       	sbci	r31, 0xFF	; 255
    182a:	91 83       	std	Z+1, r25	; 0x01
    182c:	80 83       	st	Z, r24
    	_delay_ms(500);
    	/*
         * store entered key to compare it with password
         */
        re_password[pass_Counter] = key;
    182e:	fe 01       	movw	r30, r28
    1830:	e7 54       	subi	r30, 0x47	; 71
    1832:	ff 4f       	sbci	r31, 0xFF	; 255
    1834:	80 81       	ld	r24, Z
    1836:	28 2f       	mov	r18, r24
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	ce 01       	movw	r24, r28
    183c:	81 54       	subi	r24, 0x41	; 65
    183e:	9f 4f       	sbci	r25, 0xFF	; 255
    1840:	dc 01       	movw	r26, r24
    1842:	a2 0f       	add	r26, r18
    1844:	b3 1f       	adc	r27, r19
    1846:	fe 01       	movw	r30, r28
    1848:	e8 54       	subi	r30, 0x48	; 72
    184a:	ff 4f       	sbci	r31, 0xFF	; 255
    184c:	80 81       	ld	r24, Z
    184e:	8c 93       	st	X, r24
        pass_Counter++;
    1850:	de 01       	movw	r26, r28
    1852:	a7 54       	subi	r26, 0x47	; 71
    1854:	bf 4f       	sbci	r27, 0xFF	; 255
    1856:	fe 01       	movw	r30, r28
    1858:	e7 54       	subi	r30, 0x47	; 71
    185a:	ff 4f       	sbci	r31, 0xFF	; 255
    185c:	80 81       	ld	r24, Z
    185e:	8f 5f       	subi	r24, 0xFF	; 255
    1860:	8c 93       	st	X, r24
    LCD_moveCursor(1,0);
	/*
	 * loop to get the re-entered password from the user
	*/
    pass_Counter = 0;
    while (pass_Counter < 5) {
    1862:	fe 01       	movw	r30, r28
    1864:	e7 54       	subi	r30, 0x47	; 71
    1866:	ff 4f       	sbci	r31, 0xFF	; 255
    1868:	80 81       	ld	r24, Z
    186a:	85 30       	cpi	r24, 0x05	; 5
    186c:	08 f4       	brcc	.+2      	; 0x1870 <New_Password+0xd12>
    186e:	a6 cd       	rjmp	.-1204   	; 0x13bc <New_Password+0x85e>
         * store entered key to compare it with password
         */
        re_password[pass_Counter] = key;
        pass_Counter++;
     }
    LCD_clearScreen();
    1870:	0e 94 dc 20 	call	0x41b8	; 0x41b8 <LCD_clearScreen>
    LCD_displayStringRowColumn(0, 0, "Press = to ");
    1874:	2c e8       	ldi	r18, 0x8C	; 140
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	80 e0       	ldi	r24, 0x00	; 0
    187a:	60 e0       	ldi	r22, 0x00	; 0
    187c:	a9 01       	movw	r20, r18
    187e:	0e 94 a0 20 	call	0x4140	; 0x4140 <LCD_displayStringRowColumn>
    LCD_displayStringRowColumn(1, 0, "save password");
    1882:	28 e9       	ldi	r18, 0x98	; 152
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	60 e0       	ldi	r22, 0x00	; 0
    188a:	a9 01       	movw	r20, r18
    188c:	0e 94 a0 20 	call	0x4140	; 0x4140 <LCD_displayStringRowColumn>
    key = KEYPAD_getPressedKey();
    1890:	0e 94 30 1a 	call	0x3460	; 0x3460 <KEYPAD_getPressedKey>
    1894:	fe 01       	movw	r30, r28
    1896:	e8 54       	subi	r30, 0x48	; 72
    1898:	ff 4f       	sbci	r31, 0xFF	; 255
    189a:	80 83       	st	Z, r24
    189c:	8b c0       	rjmp	.+278    	; 0x19b4 <New_Password+0xe56>
      while(key!='=')
      {
		/*
		* display a message to the user to press = to save the password
		*/
      	key=KEYPAD_getPressedKey();
    189e:	0e 94 30 1a 	call	0x3460	; 0x3460 <KEYPAD_getPressedKey>
    18a2:	fe 01       	movw	r30, r28
    18a4:	e8 54       	subi	r30, 0x48	; 72
    18a6:	ff 4f       	sbci	r31, 0xFF	; 255
    18a8:	80 83       	st	Z, r24
    18aa:	fe 01       	movw	r30, r28
    18ac:	ed 5b       	subi	r30, 0xBD	; 189
    18ae:	ff 4f       	sbci	r31, 0xFF	; 255
    18b0:	80 e0       	ldi	r24, 0x00	; 0
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	a8 e4       	ldi	r26, 0x48	; 72
    18b6:	b2 e4       	ldi	r27, 0x42	; 66
    18b8:	80 83       	st	Z, r24
    18ba:	91 83       	std	Z+1, r25	; 0x01
    18bc:	a2 83       	std	Z+2, r26	; 0x02
    18be:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18c0:	8e 01       	movw	r16, r28
    18c2:	01 5c       	subi	r16, 0xC1	; 193
    18c4:	1f 4f       	sbci	r17, 0xFF	; 255
    18c6:	fe 01       	movw	r30, r28
    18c8:	ed 5b       	subi	r30, 0xBD	; 189
    18ca:	ff 4f       	sbci	r31, 0xFF	; 255
    18cc:	60 81       	ld	r22, Z
    18ce:	71 81       	ldd	r23, Z+1	; 0x01
    18d0:	82 81       	ldd	r24, Z+2	; 0x02
    18d2:	93 81       	ldd	r25, Z+3	; 0x03
    18d4:	20 e0       	ldi	r18, 0x00	; 0
    18d6:	30 e0       	ldi	r19, 0x00	; 0
    18d8:	4a ef       	ldi	r20, 0xFA	; 250
    18da:	54 e4       	ldi	r21, 0x44	; 68
    18dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18e0:	dc 01       	movw	r26, r24
    18e2:	cb 01       	movw	r24, r22
    18e4:	f8 01       	movw	r30, r16
    18e6:	80 83       	st	Z, r24
    18e8:	91 83       	std	Z+1, r25	; 0x01
    18ea:	a2 83       	std	Z+2, r26	; 0x02
    18ec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18ee:	fe 01       	movw	r30, r28
    18f0:	ff 96       	adiw	r30, 0x3f	; 63
    18f2:	60 81       	ld	r22, Z
    18f4:	71 81       	ldd	r23, Z+1	; 0x01
    18f6:	82 81       	ldd	r24, Z+2	; 0x02
    18f8:	93 81       	ldd	r25, Z+3	; 0x03
    18fa:	20 e0       	ldi	r18, 0x00	; 0
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	40 e8       	ldi	r20, 0x80	; 128
    1900:	5f e3       	ldi	r21, 0x3F	; 63
    1902:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1906:	88 23       	and	r24, r24
    1908:	2c f4       	brge	.+10     	; 0x1914 <New_Password+0xdb6>
		__ticks = 1;
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	9e af       	std	Y+62, r25	; 0x3e
    1910:	8d af       	std	Y+61, r24	; 0x3d
    1912:	46 c0       	rjmp	.+140    	; 0x19a0 <New_Password+0xe42>
	else if (__tmp > 65535)
    1914:	fe 01       	movw	r30, r28
    1916:	ff 96       	adiw	r30, 0x3f	; 63
    1918:	60 81       	ld	r22, Z
    191a:	71 81       	ldd	r23, Z+1	; 0x01
    191c:	82 81       	ldd	r24, Z+2	; 0x02
    191e:	93 81       	ldd	r25, Z+3	; 0x03
    1920:	20 e0       	ldi	r18, 0x00	; 0
    1922:	3f ef       	ldi	r19, 0xFF	; 255
    1924:	4f e7       	ldi	r20, 0x7F	; 127
    1926:	57 e4       	ldi	r21, 0x47	; 71
    1928:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    192c:	18 16       	cp	r1, r24
    192e:	64 f5       	brge	.+88     	; 0x1988 <New_Password+0xe2a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1930:	fe 01       	movw	r30, r28
    1932:	ed 5b       	subi	r30, 0xBD	; 189
    1934:	ff 4f       	sbci	r31, 0xFF	; 255
    1936:	60 81       	ld	r22, Z
    1938:	71 81       	ldd	r23, Z+1	; 0x01
    193a:	82 81       	ldd	r24, Z+2	; 0x02
    193c:	93 81       	ldd	r25, Z+3	; 0x03
    193e:	20 e0       	ldi	r18, 0x00	; 0
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	40 e2       	ldi	r20, 0x20	; 32
    1944:	51 e4       	ldi	r21, 0x41	; 65
    1946:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    194a:	dc 01       	movw	r26, r24
    194c:	cb 01       	movw	r24, r22
    194e:	bc 01       	movw	r22, r24
    1950:	cd 01       	movw	r24, r26
    1952:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1956:	dc 01       	movw	r26, r24
    1958:	cb 01       	movw	r24, r22
    195a:	9e af       	std	Y+62, r25	; 0x3e
    195c:	8d af       	std	Y+61, r24	; 0x3d
    195e:	0f c0       	rjmp	.+30     	; 0x197e <New_Password+0xe20>
    1960:	88 ec       	ldi	r24, 0xC8	; 200
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	9c af       	std	Y+60, r25	; 0x3c
    1966:	8b af       	std	Y+59, r24	; 0x3b
    1968:	8b ad       	ldd	r24, Y+59	; 0x3b
    196a:	9c ad       	ldd	r25, Y+60	; 0x3c
    196c:	01 97       	sbiw	r24, 0x01	; 1
    196e:	f1 f7       	brne	.-4      	; 0x196c <New_Password+0xe0e>
    1970:	9c af       	std	Y+60, r25	; 0x3c
    1972:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1974:	8d ad       	ldd	r24, Y+61	; 0x3d
    1976:	9e ad       	ldd	r25, Y+62	; 0x3e
    1978:	01 97       	sbiw	r24, 0x01	; 1
    197a:	9e af       	std	Y+62, r25	; 0x3e
    197c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    197e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1980:	9e ad       	ldd	r25, Y+62	; 0x3e
    1982:	00 97       	sbiw	r24, 0x00	; 0
    1984:	69 f7       	brne	.-38     	; 0x1960 <New_Password+0xe02>
    1986:	16 c0       	rjmp	.+44     	; 0x19b4 <New_Password+0xe56>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1988:	fe 01       	movw	r30, r28
    198a:	ff 96       	adiw	r30, 0x3f	; 63
    198c:	60 81       	ld	r22, Z
    198e:	71 81       	ldd	r23, Z+1	; 0x01
    1990:	82 81       	ldd	r24, Z+2	; 0x02
    1992:	93 81       	ldd	r25, Z+3	; 0x03
    1994:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1998:	dc 01       	movw	r26, r24
    199a:	cb 01       	movw	r24, r22
    199c:	9e af       	std	Y+62, r25	; 0x3e
    199e:	8d af       	std	Y+61, r24	; 0x3d
    19a0:	8d ad       	ldd	r24, Y+61	; 0x3d
    19a2:	9e ad       	ldd	r25, Y+62	; 0x3e
    19a4:	9a af       	std	Y+58, r25	; 0x3a
    19a6:	89 af       	std	Y+57, r24	; 0x39
    19a8:	89 ad       	ldd	r24, Y+57	; 0x39
    19aa:	9a ad       	ldd	r25, Y+58	; 0x3a
    19ac:	01 97       	sbiw	r24, 0x01	; 1
    19ae:	f1 f7       	brne	.-4      	; 0x19ac <New_Password+0xe4e>
    19b0:	9a af       	std	Y+58, r25	; 0x3a
    19b2:	89 af       	std	Y+57, r24	; 0x39
    LCD_clearScreen();
    LCD_displayStringRowColumn(0, 0, "Press = to ");
    LCD_displayStringRowColumn(1, 0, "save password");
    key = KEYPAD_getPressedKey();

      while(key!='=')
    19b4:	fe 01       	movw	r30, r28
    19b6:	e8 54       	subi	r30, 0x48	; 72
    19b8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ba:	80 81       	ld	r24, Z
    19bc:	8d 33       	cpi	r24, 0x3D	; 61
    19be:	09 f0       	breq	.+2      	; 0x19c2 <New_Password+0xe64>
    19c0:	6e cf       	rjmp	.-292    	; 0x189e <New_Password+0xd40>
		* display a message to the user to press = to save the password
		*/
      	key=KEYPAD_getPressedKey();
      	_delay_ms(50);
      }
      LCD_clearScreen();
    19c2:	0e 94 dc 20 	call	0x41b8	; 0x41b8 <LCD_clearScreen>
	/*
	* loop to check if the password and re_password are matched
	*/
    for (pass_Counter=0;pass_Counter<5;pass_Counter++) {
    19c6:	fe 01       	movw	r30, r28
    19c8:	e7 54       	subi	r30, 0x47	; 71
    19ca:	ff 4f       	sbci	r31, 0xFF	; 255
    19cc:	10 82       	st	Z, r1
    19ce:	2a c0       	rjmp	.+84     	; 0x1a24 <New_Password+0xec6>
         if (password[pass_Counter] != re_password[pass_Counter]) {
    19d0:	fe 01       	movw	r30, r28
    19d2:	e7 54       	subi	r30, 0x47	; 71
    19d4:	ff 4f       	sbci	r31, 0xFF	; 255
    19d6:	80 81       	ld	r24, Z
    19d8:	28 2f       	mov	r18, r24
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	ce 01       	movw	r24, r28
    19de:	86 54       	subi	r24, 0x46	; 70
    19e0:	9f 4f       	sbci	r25, 0xFF	; 255
    19e2:	fc 01       	movw	r30, r24
    19e4:	e2 0f       	add	r30, r18
    19e6:	f3 1f       	adc	r31, r19
    19e8:	40 81       	ld	r20, Z
    19ea:	fe 01       	movw	r30, r28
    19ec:	e7 54       	subi	r30, 0x47	; 71
    19ee:	ff 4f       	sbci	r31, 0xFF	; 255
    19f0:	80 81       	ld	r24, Z
    19f2:	28 2f       	mov	r18, r24
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	ce 01       	movw	r24, r28
    19f8:	81 54       	subi	r24, 0x41	; 65
    19fa:	9f 4f       	sbci	r25, 0xFF	; 255
    19fc:	fc 01       	movw	r30, r24
    19fe:	e2 0f       	add	r30, r18
    1a00:	f3 1f       	adc	r31, r19
    1a02:	80 81       	ld	r24, Z
    1a04:	48 17       	cp	r20, r24
    1a06:	29 f0       	breq	.+10     	; 0x1a12 <New_Password+0xeb4>
             match = 0;
    1a08:	fe 01       	movw	r30, r28
    1a0a:	e9 54       	subi	r30, 0x49	; 73
    1a0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0e:	10 82       	st	Z, r1
    1a10:	0f c0       	rjmp	.+30     	; 0x1a30 <New_Password+0xed2>
      }
      LCD_clearScreen();
	/*
	* loop to check if the password and re_password are matched
	*/
    for (pass_Counter=0;pass_Counter<5;pass_Counter++) {
    1a12:	de 01       	movw	r26, r28
    1a14:	a7 54       	subi	r26, 0x47	; 71
    1a16:	bf 4f       	sbci	r27, 0xFF	; 255
    1a18:	fe 01       	movw	r30, r28
    1a1a:	e7 54       	subi	r30, 0x47	; 71
    1a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1e:	80 81       	ld	r24, Z
    1a20:	8f 5f       	subi	r24, 0xFF	; 255
    1a22:	8c 93       	st	X, r24
    1a24:	fe 01       	movw	r30, r28
    1a26:	e7 54       	subi	r30, 0x47	; 71
    1a28:	ff 4f       	sbci	r31, 0xFF	; 255
    1a2a:	80 81       	ld	r24, Z
    1a2c:	85 30       	cpi	r24, 0x05	; 5
    1a2e:	80 f2       	brcs	.-96     	; 0x19d0 <New_Password+0xe72>
         }
     }
	 /*
	 * if the password and re_password are matched send the password to MC2 to save it in EEPROM
	 */
    if (match) {
    1a30:	fe 01       	movw	r30, r28
    1a32:	e9 54       	subi	r30, 0x49	; 73
    1a34:	ff 4f       	sbci	r31, 0xFF	; 255
    1a36:	80 81       	ld	r24, Z
    1a38:	88 23       	and	r24, r24
    1a3a:	09 f4       	brne	.+2      	; 0x1a3e <New_Password+0xee0>
    1a3c:	1c c1       	rjmp	.+568    	; 0x1c76 <New_Password+0x1118>
		/*
		* send the save command to MC2
		*/
       UART_sendByte(SAVE);
    1a3e:	81 ea       	ldi	r24, 0xA1	; 161
    1a40:	0e 94 f9 22 	call	0x45f2	; 0x45f2 <UART_sendByte>
    1a44:	80 e0       	ldi	r24, 0x00	; 0
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	a0 e2       	ldi	r26, 0x20	; 32
    1a4a:	b1 e4       	ldi	r27, 0x41	; 65
    1a4c:	8d ab       	std	Y+53, r24	; 0x35
    1a4e:	9e ab       	std	Y+54, r25	; 0x36
    1a50:	af ab       	std	Y+55, r26	; 0x37
    1a52:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a54:	6d a9       	ldd	r22, Y+53	; 0x35
    1a56:	7e a9       	ldd	r23, Y+54	; 0x36
    1a58:	8f a9       	ldd	r24, Y+55	; 0x37
    1a5a:	98 ad       	ldd	r25, Y+56	; 0x38
    1a5c:	20 e0       	ldi	r18, 0x00	; 0
    1a5e:	30 e0       	ldi	r19, 0x00	; 0
    1a60:	4a ef       	ldi	r20, 0xFA	; 250
    1a62:	54 e4       	ldi	r21, 0x44	; 68
    1a64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a68:	dc 01       	movw	r26, r24
    1a6a:	cb 01       	movw	r24, r22
    1a6c:	89 ab       	std	Y+49, r24	; 0x31
    1a6e:	9a ab       	std	Y+50, r25	; 0x32
    1a70:	ab ab       	std	Y+51, r26	; 0x33
    1a72:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1a74:	69 a9       	ldd	r22, Y+49	; 0x31
    1a76:	7a a9       	ldd	r23, Y+50	; 0x32
    1a78:	8b a9       	ldd	r24, Y+51	; 0x33
    1a7a:	9c a9       	ldd	r25, Y+52	; 0x34
    1a7c:	20 e0       	ldi	r18, 0x00	; 0
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	40 e8       	ldi	r20, 0x80	; 128
    1a82:	5f e3       	ldi	r21, 0x3F	; 63
    1a84:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a88:	88 23       	and	r24, r24
    1a8a:	2c f4       	brge	.+10     	; 0x1a96 <New_Password+0xf38>
		__ticks = 1;
    1a8c:	81 e0       	ldi	r24, 0x01	; 1
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	98 ab       	std	Y+48, r25	; 0x30
    1a92:	8f a7       	std	Y+47, r24	; 0x2f
    1a94:	3f c0       	rjmp	.+126    	; 0x1b14 <New_Password+0xfb6>
	else if (__tmp > 65535)
    1a96:	69 a9       	ldd	r22, Y+49	; 0x31
    1a98:	7a a9       	ldd	r23, Y+50	; 0x32
    1a9a:	8b a9       	ldd	r24, Y+51	; 0x33
    1a9c:	9c a9       	ldd	r25, Y+52	; 0x34
    1a9e:	20 e0       	ldi	r18, 0x00	; 0
    1aa0:	3f ef       	ldi	r19, 0xFF	; 255
    1aa2:	4f e7       	ldi	r20, 0x7F	; 127
    1aa4:	57 e4       	ldi	r21, 0x47	; 71
    1aa6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1aaa:	18 16       	cp	r1, r24
    1aac:	4c f5       	brge	.+82     	; 0x1b00 <New_Password+0xfa2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aae:	6d a9       	ldd	r22, Y+53	; 0x35
    1ab0:	7e a9       	ldd	r23, Y+54	; 0x36
    1ab2:	8f a9       	ldd	r24, Y+55	; 0x37
    1ab4:	98 ad       	ldd	r25, Y+56	; 0x38
    1ab6:	20 e0       	ldi	r18, 0x00	; 0
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	40 e2       	ldi	r20, 0x20	; 32
    1abc:	51 e4       	ldi	r21, 0x41	; 65
    1abe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ac2:	dc 01       	movw	r26, r24
    1ac4:	cb 01       	movw	r24, r22
    1ac6:	bc 01       	movw	r22, r24
    1ac8:	cd 01       	movw	r24, r26
    1aca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ace:	dc 01       	movw	r26, r24
    1ad0:	cb 01       	movw	r24, r22
    1ad2:	98 ab       	std	Y+48, r25	; 0x30
    1ad4:	8f a7       	std	Y+47, r24	; 0x2f
    1ad6:	0f c0       	rjmp	.+30     	; 0x1af6 <New_Password+0xf98>
    1ad8:	88 ec       	ldi	r24, 0xC8	; 200
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	9e a7       	std	Y+46, r25	; 0x2e
    1ade:	8d a7       	std	Y+45, r24	; 0x2d
    1ae0:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ae2:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ae4:	01 97       	sbiw	r24, 0x01	; 1
    1ae6:	f1 f7       	brne	.-4      	; 0x1ae4 <New_Password+0xf86>
    1ae8:	9e a7       	std	Y+46, r25	; 0x2e
    1aea:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aec:	8f a5       	ldd	r24, Y+47	; 0x2f
    1aee:	98 a9       	ldd	r25, Y+48	; 0x30
    1af0:	01 97       	sbiw	r24, 0x01	; 1
    1af2:	98 ab       	std	Y+48, r25	; 0x30
    1af4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1af6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1af8:	98 a9       	ldd	r25, Y+48	; 0x30
    1afa:	00 97       	sbiw	r24, 0x00	; 0
    1afc:	69 f7       	brne	.-38     	; 0x1ad8 <New_Password+0xf7a>
    1afe:	14 c0       	rjmp	.+40     	; 0x1b28 <New_Password+0xfca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b00:	69 a9       	ldd	r22, Y+49	; 0x31
    1b02:	7a a9       	ldd	r23, Y+50	; 0x32
    1b04:	8b a9       	ldd	r24, Y+51	; 0x33
    1b06:	9c a9       	ldd	r25, Y+52	; 0x34
    1b08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b0c:	dc 01       	movw	r26, r24
    1b0e:	cb 01       	movw	r24, r22
    1b10:	98 ab       	std	Y+48, r25	; 0x30
    1b12:	8f a7       	std	Y+47, r24	; 0x2f
    1b14:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b16:	98 a9       	ldd	r25, Y+48	; 0x30
    1b18:	9c a7       	std	Y+44, r25	; 0x2c
    1b1a:	8b a7       	std	Y+43, r24	; 0x2b
    1b1c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b1e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b20:	01 97       	sbiw	r24, 0x01	; 1
    1b22:	f1 f7       	brne	.-4      	; 0x1b20 <New_Password+0xfc2>
    1b24:	9c a7       	std	Y+44, r25	; 0x2c
    1b26:	8b a7       	std	Y+43, r24	; 0x2b
       _delay_ms(10);
	   /*
	   * send the password digit by digit to MC2
	   */
       for(pass_Counter=0;pass_Counter<5;pass_Counter++){
    1b28:	fe 01       	movw	r30, r28
    1b2a:	e7 54       	subi	r30, 0x47	; 71
    1b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2e:	10 82       	st	Z, r1
    1b30:	1c c0       	rjmp	.+56     	; 0x1b6a <New_Password+0x100c>
		/*
		* wait until MC2 is ready to receive the password
		*/
        	while(UART_recieveByte()!= MC2_READY);
    1b32:	0e 94 10 23 	call	0x4620	; 0x4620 <UART_recieveByte>
    1b36:	80 32       	cpi	r24, 0x20	; 32
    1b38:	e1 f7       	brne	.-8      	; 0x1b32 <New_Password+0xfd4>
		/*
		* send the password digit by digit
		*/
        	UART_sendByte(password[pass_Counter]);
    1b3a:	fe 01       	movw	r30, r28
    1b3c:	e7 54       	subi	r30, 0x47	; 71
    1b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b40:	80 81       	ld	r24, Z
    1b42:	28 2f       	mov	r18, r24
    1b44:	30 e0       	ldi	r19, 0x00	; 0
    1b46:	ce 01       	movw	r24, r28
    1b48:	86 54       	subi	r24, 0x46	; 70
    1b4a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b4c:	fc 01       	movw	r30, r24
    1b4e:	e2 0f       	add	r30, r18
    1b50:	f3 1f       	adc	r31, r19
    1b52:	80 81       	ld	r24, Z
    1b54:	0e 94 f9 22 	call	0x45f2	; 0x45f2 <UART_sendByte>
       UART_sendByte(SAVE);
       _delay_ms(10);
	   /*
	   * send the password digit by digit to MC2
	   */
       for(pass_Counter=0;pass_Counter<5;pass_Counter++){
    1b58:	de 01       	movw	r26, r28
    1b5a:	a7 54       	subi	r26, 0x47	; 71
    1b5c:	bf 4f       	sbci	r27, 0xFF	; 255
    1b5e:	fe 01       	movw	r30, r28
    1b60:	e7 54       	subi	r30, 0x47	; 71
    1b62:	ff 4f       	sbci	r31, 0xFF	; 255
    1b64:	80 81       	ld	r24, Z
    1b66:	8f 5f       	subi	r24, 0xFF	; 255
    1b68:	8c 93       	st	X, r24
    1b6a:	fe 01       	movw	r30, r28
    1b6c:	e7 54       	subi	r30, 0x47	; 71
    1b6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b70:	80 81       	ld	r24, Z
    1b72:	85 30       	cpi	r24, 0x05	; 5
    1b74:	f0 f2       	brcs	.-68     	; 0x1b32 <New_Password+0xfd4>
        	UART_sendByte(password[pass_Counter]);
        }
		/*
		* wait until MC2 send END_SAVING command
		*/
        while(UART_recieveByte()!= END_SAVING);
    1b76:	0e 94 10 23 	call	0x4620	; 0x4620 <UART_recieveByte>
    1b7a:	82 3a       	cpi	r24, 0xA2	; 162
    1b7c:	e1 f7       	brne	.-8      	; 0x1b76 <New_Password+0x1018>
        LCD_clearScreen();
    1b7e:	0e 94 dc 20 	call	0x41b8	; 0x41b8 <LCD_clearScreen>
        LCD_displayStringRowColumn(0,0,"Password Saved");
    1b82:	25 eb       	ldi	r18, 0xB5	; 181
    1b84:	30 e0       	ldi	r19, 0x00	; 0
    1b86:	80 e0       	ldi	r24, 0x00	; 0
    1b88:	60 e0       	ldi	r22, 0x00	; 0
    1b8a:	a9 01       	movw	r20, r18
    1b8c:	0e 94 a0 20 	call	0x4140	; 0x4140 <LCD_displayStringRowColumn>
    1b90:	80 e0       	ldi	r24, 0x00	; 0
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	aa ef       	ldi	r26, 0xFA	; 250
    1b96:	b3 e4       	ldi	r27, 0x43	; 67
    1b98:	8f a3       	std	Y+39, r24	; 0x27
    1b9a:	98 a7       	std	Y+40, r25	; 0x28
    1b9c:	a9 a7       	std	Y+41, r26	; 0x29
    1b9e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ba0:	6f a1       	ldd	r22, Y+39	; 0x27
    1ba2:	78 a5       	ldd	r23, Y+40	; 0x28
    1ba4:	89 a5       	ldd	r24, Y+41	; 0x29
    1ba6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ba8:	20 e0       	ldi	r18, 0x00	; 0
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	4a ef       	ldi	r20, 0xFA	; 250
    1bae:	54 e4       	ldi	r21, 0x44	; 68
    1bb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bb4:	dc 01       	movw	r26, r24
    1bb6:	cb 01       	movw	r24, r22
    1bb8:	8b a3       	std	Y+35, r24	; 0x23
    1bba:	9c a3       	std	Y+36, r25	; 0x24
    1bbc:	ad a3       	std	Y+37, r26	; 0x25
    1bbe:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1bc0:	6b a1       	ldd	r22, Y+35	; 0x23
    1bc2:	7c a1       	ldd	r23, Y+36	; 0x24
    1bc4:	8d a1       	ldd	r24, Y+37	; 0x25
    1bc6:	9e a1       	ldd	r25, Y+38	; 0x26
    1bc8:	20 e0       	ldi	r18, 0x00	; 0
    1bca:	30 e0       	ldi	r19, 0x00	; 0
    1bcc:	40 e8       	ldi	r20, 0x80	; 128
    1bce:	5f e3       	ldi	r21, 0x3F	; 63
    1bd0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bd4:	88 23       	and	r24, r24
    1bd6:	2c f4       	brge	.+10     	; 0x1be2 <New_Password+0x1084>
		__ticks = 1;
    1bd8:	81 e0       	ldi	r24, 0x01	; 1
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	9a a3       	std	Y+34, r25	; 0x22
    1bde:	89 a3       	std	Y+33, r24	; 0x21
    1be0:	3f c0       	rjmp	.+126    	; 0x1c60 <New_Password+0x1102>
	else if (__tmp > 65535)
    1be2:	6b a1       	ldd	r22, Y+35	; 0x23
    1be4:	7c a1       	ldd	r23, Y+36	; 0x24
    1be6:	8d a1       	ldd	r24, Y+37	; 0x25
    1be8:	9e a1       	ldd	r25, Y+38	; 0x26
    1bea:	20 e0       	ldi	r18, 0x00	; 0
    1bec:	3f ef       	ldi	r19, 0xFF	; 255
    1bee:	4f e7       	ldi	r20, 0x7F	; 127
    1bf0:	57 e4       	ldi	r21, 0x47	; 71
    1bf2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bf6:	18 16       	cp	r1, r24
    1bf8:	4c f5       	brge	.+82     	; 0x1c4c <New_Password+0x10ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bfa:	6f a1       	ldd	r22, Y+39	; 0x27
    1bfc:	78 a5       	ldd	r23, Y+40	; 0x28
    1bfe:	89 a5       	ldd	r24, Y+41	; 0x29
    1c00:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c02:	20 e0       	ldi	r18, 0x00	; 0
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	40 e2       	ldi	r20, 0x20	; 32
    1c08:	51 e4       	ldi	r21, 0x41	; 65
    1c0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c0e:	dc 01       	movw	r26, r24
    1c10:	cb 01       	movw	r24, r22
    1c12:	bc 01       	movw	r22, r24
    1c14:	cd 01       	movw	r24, r26
    1c16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c1a:	dc 01       	movw	r26, r24
    1c1c:	cb 01       	movw	r24, r22
    1c1e:	9a a3       	std	Y+34, r25	; 0x22
    1c20:	89 a3       	std	Y+33, r24	; 0x21
    1c22:	0f c0       	rjmp	.+30     	; 0x1c42 <New_Password+0x10e4>
    1c24:	88 ec       	ldi	r24, 0xC8	; 200
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	98 a3       	std	Y+32, r25	; 0x20
    1c2a:	8f 8f       	std	Y+31, r24	; 0x1f
    1c2c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c2e:	98 a1       	ldd	r25, Y+32	; 0x20
    1c30:	01 97       	sbiw	r24, 0x01	; 1
    1c32:	f1 f7       	brne	.-4      	; 0x1c30 <New_Password+0x10d2>
    1c34:	98 a3       	std	Y+32, r25	; 0x20
    1c36:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c38:	89 a1       	ldd	r24, Y+33	; 0x21
    1c3a:	9a a1       	ldd	r25, Y+34	; 0x22
    1c3c:	01 97       	sbiw	r24, 0x01	; 1
    1c3e:	9a a3       	std	Y+34, r25	; 0x22
    1c40:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c42:	89 a1       	ldd	r24, Y+33	; 0x21
    1c44:	9a a1       	ldd	r25, Y+34	; 0x22
    1c46:	00 97       	sbiw	r24, 0x00	; 0
    1c48:	69 f7       	brne	.-38     	; 0x1c24 <New_Password+0x10c6>
    1c4a:	14 c1       	rjmp	.+552    	; 0x1e74 <New_Password+0x1316>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c4c:	6b a1       	ldd	r22, Y+35	; 0x23
    1c4e:	7c a1       	ldd	r23, Y+36	; 0x24
    1c50:	8d a1       	ldd	r24, Y+37	; 0x25
    1c52:	9e a1       	ldd	r25, Y+38	; 0x26
    1c54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c58:	dc 01       	movw	r26, r24
    1c5a:	cb 01       	movw	r24, r22
    1c5c:	9a a3       	std	Y+34, r25	; 0x22
    1c5e:	89 a3       	std	Y+33, r24	; 0x21
    1c60:	89 a1       	ldd	r24, Y+33	; 0x21
    1c62:	9a a1       	ldd	r25, Y+34	; 0x22
    1c64:	9e 8f       	std	Y+30, r25	; 0x1e
    1c66:	8d 8f       	std	Y+29, r24	; 0x1d
    1c68:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c6a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c6c:	01 97       	sbiw	r24, 0x01	; 1
    1c6e:	f1 f7       	brne	.-4      	; 0x1c6c <New_Password+0x110e>
    1c70:	9e 8f       	std	Y+30, r25	; 0x1e
    1c72:	8d 8f       	std	Y+29, r24	; 0x1d
    1c74:	ff c0       	rjmp	.+510    	; 0x1e74 <New_Password+0x1316>
	   */
    else{
		/*
		* display a message to the user that the password doesn't match
		*/
        LCD_clearScreen();
    1c76:	0e 94 dc 20 	call	0x41b8	; 0x41b8 <LCD_clearScreen>
        LCD_displayStringRowColumn(0,0,"Password doesn't");
    1c7a:	24 ec       	ldi	r18, 0xC4	; 196
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
    1c7e:	80 e0       	ldi	r24, 0x00	; 0
    1c80:	60 e0       	ldi	r22, 0x00	; 0
    1c82:	a9 01       	movw	r20, r18
    1c84:	0e 94 a0 20 	call	0x4140	; 0x4140 <LCD_displayStringRowColumn>
        LCD_displayStringRowColumn(1,0,"match");
    1c88:	25 ed       	ldi	r18, 0xD5	; 213
    1c8a:	30 e0       	ldi	r19, 0x00	; 0
    1c8c:	81 e0       	ldi	r24, 0x01	; 1
    1c8e:	60 e0       	ldi	r22, 0x00	; 0
    1c90:	a9 01       	movw	r20, r18
    1c92:	0e 94 a0 20 	call	0x4140	; 0x4140 <LCD_displayStringRowColumn>
    1c96:	80 e0       	ldi	r24, 0x00	; 0
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	aa ef       	ldi	r26, 0xFA	; 250
    1c9c:	b3 e4       	ldi	r27, 0x43	; 67
    1c9e:	89 8f       	std	Y+25, r24	; 0x19
    1ca0:	9a 8f       	std	Y+26, r25	; 0x1a
    1ca2:	ab 8f       	std	Y+27, r26	; 0x1b
    1ca4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ca6:	69 8d       	ldd	r22, Y+25	; 0x19
    1ca8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1caa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cae:	20 e0       	ldi	r18, 0x00	; 0
    1cb0:	30 e0       	ldi	r19, 0x00	; 0
    1cb2:	4a ef       	ldi	r20, 0xFA	; 250
    1cb4:	54 e4       	ldi	r21, 0x44	; 68
    1cb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cba:	dc 01       	movw	r26, r24
    1cbc:	cb 01       	movw	r24, r22
    1cbe:	8d 8b       	std	Y+21, r24	; 0x15
    1cc0:	9e 8b       	std	Y+22, r25	; 0x16
    1cc2:	af 8b       	std	Y+23, r26	; 0x17
    1cc4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1cc6:	6d 89       	ldd	r22, Y+21	; 0x15
    1cc8:	7e 89       	ldd	r23, Y+22	; 0x16
    1cca:	8f 89       	ldd	r24, Y+23	; 0x17
    1ccc:	98 8d       	ldd	r25, Y+24	; 0x18
    1cce:	20 e0       	ldi	r18, 0x00	; 0
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	40 e8       	ldi	r20, 0x80	; 128
    1cd4:	5f e3       	ldi	r21, 0x3F	; 63
    1cd6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cda:	88 23       	and	r24, r24
    1cdc:	2c f4       	brge	.+10     	; 0x1ce8 <New_Password+0x118a>
		__ticks = 1;
    1cde:	81 e0       	ldi	r24, 0x01	; 1
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	9c 8b       	std	Y+20, r25	; 0x14
    1ce4:	8b 8b       	std	Y+19, r24	; 0x13
    1ce6:	3f c0       	rjmp	.+126    	; 0x1d66 <New_Password+0x1208>
	else if (__tmp > 65535)
    1ce8:	6d 89       	ldd	r22, Y+21	; 0x15
    1cea:	7e 89       	ldd	r23, Y+22	; 0x16
    1cec:	8f 89       	ldd	r24, Y+23	; 0x17
    1cee:	98 8d       	ldd	r25, Y+24	; 0x18
    1cf0:	20 e0       	ldi	r18, 0x00	; 0
    1cf2:	3f ef       	ldi	r19, 0xFF	; 255
    1cf4:	4f e7       	ldi	r20, 0x7F	; 127
    1cf6:	57 e4       	ldi	r21, 0x47	; 71
    1cf8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cfc:	18 16       	cp	r1, r24
    1cfe:	4c f5       	brge	.+82     	; 0x1d52 <New_Password+0x11f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d00:	69 8d       	ldd	r22, Y+25	; 0x19
    1d02:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d04:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d06:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d08:	20 e0       	ldi	r18, 0x00	; 0
    1d0a:	30 e0       	ldi	r19, 0x00	; 0
    1d0c:	40 e2       	ldi	r20, 0x20	; 32
    1d0e:	51 e4       	ldi	r21, 0x41	; 65
    1d10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d14:	dc 01       	movw	r26, r24
    1d16:	cb 01       	movw	r24, r22
    1d18:	bc 01       	movw	r22, r24
    1d1a:	cd 01       	movw	r24, r26
    1d1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d20:	dc 01       	movw	r26, r24
    1d22:	cb 01       	movw	r24, r22
    1d24:	9c 8b       	std	Y+20, r25	; 0x14
    1d26:	8b 8b       	std	Y+19, r24	; 0x13
    1d28:	0f c0       	rjmp	.+30     	; 0x1d48 <New_Password+0x11ea>
    1d2a:	88 ec       	ldi	r24, 0xC8	; 200
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	9a 8b       	std	Y+18, r25	; 0x12
    1d30:	89 8b       	std	Y+17, r24	; 0x11
    1d32:	89 89       	ldd	r24, Y+17	; 0x11
    1d34:	9a 89       	ldd	r25, Y+18	; 0x12
    1d36:	01 97       	sbiw	r24, 0x01	; 1
    1d38:	f1 f7       	brne	.-4      	; 0x1d36 <New_Password+0x11d8>
    1d3a:	9a 8b       	std	Y+18, r25	; 0x12
    1d3c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d3e:	8b 89       	ldd	r24, Y+19	; 0x13
    1d40:	9c 89       	ldd	r25, Y+20	; 0x14
    1d42:	01 97       	sbiw	r24, 0x01	; 1
    1d44:	9c 8b       	std	Y+20, r25	; 0x14
    1d46:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d48:	8b 89       	ldd	r24, Y+19	; 0x13
    1d4a:	9c 89       	ldd	r25, Y+20	; 0x14
    1d4c:	00 97       	sbiw	r24, 0x00	; 0
    1d4e:	69 f7       	brne	.-38     	; 0x1d2a <New_Password+0x11cc>
    1d50:	14 c0       	rjmp	.+40     	; 0x1d7a <New_Password+0x121c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d52:	6d 89       	ldd	r22, Y+21	; 0x15
    1d54:	7e 89       	ldd	r23, Y+22	; 0x16
    1d56:	8f 89       	ldd	r24, Y+23	; 0x17
    1d58:	98 8d       	ldd	r25, Y+24	; 0x18
    1d5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d5e:	dc 01       	movw	r26, r24
    1d60:	cb 01       	movw	r24, r22
    1d62:	9c 8b       	std	Y+20, r25	; 0x14
    1d64:	8b 8b       	std	Y+19, r24	; 0x13
    1d66:	8b 89       	ldd	r24, Y+19	; 0x13
    1d68:	9c 89       	ldd	r25, Y+20	; 0x14
    1d6a:	98 8b       	std	Y+16, r25	; 0x10
    1d6c:	8f 87       	std	Y+15, r24	; 0x0f
    1d6e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d70:	98 89       	ldd	r25, Y+16	; 0x10
    1d72:	01 97       	sbiw	r24, 0x01	; 1
    1d74:	f1 f7       	brne	.-4      	; 0x1d72 <New_Password+0x1214>
    1d76:	98 8b       	std	Y+16, r25	; 0x10
    1d78:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_ms(500);
        LCD_clearScreen();
    1d7a:	0e 94 dc 20 	call	0x41b8	; 0x41b8 <LCD_clearScreen>
        LCD_displayStringRowColumn(0,0,"Try Again");
    1d7e:	2b ed       	ldi	r18, 0xDB	; 219
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	80 e0       	ldi	r24, 0x00	; 0
    1d84:	60 e0       	ldi	r22, 0x00	; 0
    1d86:	a9 01       	movw	r20, r18
    1d88:	0e 94 a0 20 	call	0x4140	; 0x4140 <LCD_displayStringRowColumn>
    1d8c:	80 e0       	ldi	r24, 0x00	; 0
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	aa ef       	ldi	r26, 0xFA	; 250
    1d92:	b3 e4       	ldi	r27, 0x43	; 67
    1d94:	8b 87       	std	Y+11, r24	; 0x0b
    1d96:	9c 87       	std	Y+12, r25	; 0x0c
    1d98:	ad 87       	std	Y+13, r26	; 0x0d
    1d9a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d9c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d9e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1da0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1da2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1da4:	20 e0       	ldi	r18, 0x00	; 0
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	4a ef       	ldi	r20, 0xFA	; 250
    1daa:	54 e4       	ldi	r21, 0x44	; 68
    1dac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1db0:	dc 01       	movw	r26, r24
    1db2:	cb 01       	movw	r24, r22
    1db4:	8f 83       	std	Y+7, r24	; 0x07
    1db6:	98 87       	std	Y+8, r25	; 0x08
    1db8:	a9 87       	std	Y+9, r26	; 0x09
    1dba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dbc:	6f 81       	ldd	r22, Y+7	; 0x07
    1dbe:	78 85       	ldd	r23, Y+8	; 0x08
    1dc0:	89 85       	ldd	r24, Y+9	; 0x09
    1dc2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dc4:	20 e0       	ldi	r18, 0x00	; 0
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	40 e8       	ldi	r20, 0x80	; 128
    1dca:	5f e3       	ldi	r21, 0x3F	; 63
    1dcc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dd0:	88 23       	and	r24, r24
    1dd2:	2c f4       	brge	.+10     	; 0x1dde <New_Password+0x1280>
		__ticks = 1;
    1dd4:	81 e0       	ldi	r24, 0x01	; 1
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	9e 83       	std	Y+6, r25	; 0x06
    1dda:	8d 83       	std	Y+5, r24	; 0x05
    1ddc:	3f c0       	rjmp	.+126    	; 0x1e5c <New_Password+0x12fe>
	else if (__tmp > 65535)
    1dde:	6f 81       	ldd	r22, Y+7	; 0x07
    1de0:	78 85       	ldd	r23, Y+8	; 0x08
    1de2:	89 85       	ldd	r24, Y+9	; 0x09
    1de4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1de6:	20 e0       	ldi	r18, 0x00	; 0
    1de8:	3f ef       	ldi	r19, 0xFF	; 255
    1dea:	4f e7       	ldi	r20, 0x7F	; 127
    1dec:	57 e4       	ldi	r21, 0x47	; 71
    1dee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1df2:	18 16       	cp	r1, r24
    1df4:	4c f5       	brge	.+82     	; 0x1e48 <New_Password+0x12ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1df6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1df8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dfa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dfc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dfe:	20 e0       	ldi	r18, 0x00	; 0
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	40 e2       	ldi	r20, 0x20	; 32
    1e04:	51 e4       	ldi	r21, 0x41	; 65
    1e06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e0a:	dc 01       	movw	r26, r24
    1e0c:	cb 01       	movw	r24, r22
    1e0e:	bc 01       	movw	r22, r24
    1e10:	cd 01       	movw	r24, r26
    1e12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e16:	dc 01       	movw	r26, r24
    1e18:	cb 01       	movw	r24, r22
    1e1a:	9e 83       	std	Y+6, r25	; 0x06
    1e1c:	8d 83       	std	Y+5, r24	; 0x05
    1e1e:	0f c0       	rjmp	.+30     	; 0x1e3e <New_Password+0x12e0>
    1e20:	88 ec       	ldi	r24, 0xC8	; 200
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	9c 83       	std	Y+4, r25	; 0x04
    1e26:	8b 83       	std	Y+3, r24	; 0x03
    1e28:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e2c:	01 97       	sbiw	r24, 0x01	; 1
    1e2e:	f1 f7       	brne	.-4      	; 0x1e2c <New_Password+0x12ce>
    1e30:	9c 83       	std	Y+4, r25	; 0x04
    1e32:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e34:	8d 81       	ldd	r24, Y+5	; 0x05
    1e36:	9e 81       	ldd	r25, Y+6	; 0x06
    1e38:	01 97       	sbiw	r24, 0x01	; 1
    1e3a:	9e 83       	std	Y+6, r25	; 0x06
    1e3c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e40:	9e 81       	ldd	r25, Y+6	; 0x06
    1e42:	00 97       	sbiw	r24, 0x00	; 0
    1e44:	69 f7       	brne	.-38     	; 0x1e20 <New_Password+0x12c2>
    1e46:	14 c0       	rjmp	.+40     	; 0x1e70 <New_Password+0x1312>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e48:	6f 81       	ldd	r22, Y+7	; 0x07
    1e4a:	78 85       	ldd	r23, Y+8	; 0x08
    1e4c:	89 85       	ldd	r24, Y+9	; 0x09
    1e4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e54:	dc 01       	movw	r26, r24
    1e56:	cb 01       	movw	r24, r22
    1e58:	9e 83       	std	Y+6, r25	; 0x06
    1e5a:	8d 83       	std	Y+5, r24	; 0x05
    1e5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e60:	9a 83       	std	Y+2, r25	; 0x02
    1e62:	89 83       	std	Y+1, r24	; 0x01
    1e64:	89 81       	ldd	r24, Y+1	; 0x01
    1e66:	9a 81       	ldd	r25, Y+2	; 0x02
    1e68:	01 97       	sbiw	r24, 0x01	; 1
    1e6a:	f1 f7       	brne	.-4      	; 0x1e68 <New_Password+0x130a>
    1e6c:	9a 83       	std	Y+2, r25	; 0x02
    1e6e:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(500);
        New_Password();
    1e70:	0e 94 af 05 	call	0xb5e	; 0xb5e <New_Password>
        }
}
    1e74:	cd 53       	subi	r28, 0x3D	; 61
    1e76:	df 4f       	sbci	r29, 0xFF	; 255
    1e78:	0f b6       	in	r0, 0x3f	; 63
    1e7a:	f8 94       	cli
    1e7c:	de bf       	out	0x3e, r29	; 62
    1e7e:	0f be       	out	0x3f, r0	; 63
    1e80:	cd bf       	out	0x3d, r28	; 61
    1e82:	cf 91       	pop	r28
    1e84:	df 91       	pop	r29
    1e86:	1f 91       	pop	r17
    1e88:	0f 91       	pop	r16
    1e8a:	08 95       	ret

00001e8c <CHECK_Password>:
 * Function to check the password from HMI with the saved password in EEPROM
 * if the password is correct prints a message to the user that the password is correct
 * else prints a message to the user that the password is wrong
 */

void CHECK_Password(void) {
    1e8c:	0f 93       	push	r16
    1e8e:	1f 93       	push	r17
    1e90:	df 93       	push	r29
    1e92:	cf 93       	push	r28
    1e94:	cd b7       	in	r28, 0x3d	; 61
    1e96:	de b7       	in	r29, 0x3e	; 62
    1e98:	cb 56       	subi	r28, 0x6B	; 107
    1e9a:	d0 40       	sbci	r29, 0x00	; 0
    1e9c:	0f b6       	in	r0, 0x3f	; 63
    1e9e:	f8 94       	cli
    1ea0:	de bf       	out	0x3e, r29	; 62
    1ea2:	0f be       	out	0x3f, r0	; 63
    1ea4:	cd bf       	out	0x3d, r28	; 61
	 * key to store the pressed key
	 * password to store the password
	 * error to count num of pasword entered wrong
	 * response to store the recive message from ELC
	*/
    uint8 pass_Counter = 0;
    1ea6:	fe 01       	movw	r30, r28
    1ea8:	ea 59       	subi	r30, 0x9A	; 154
    1eaa:	ff 4f       	sbci	r31, 0xFF	; 255
    1eac:	10 82       	st	Z, r1
    uint8 key = 0;
    1eae:	fe 01       	movw	r30, r28
    1eb0:	eb 59       	subi	r30, 0x9B	; 155
    1eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb4:	10 82       	st	Z, r1
    uint8 error = 0;
    1eb6:	fe 01       	movw	r30, r28
    1eb8:	ec 59       	subi	r30, 0x9C	; 156
    1eba:	ff 4f       	sbci	r31, 0xFF	; 255
    1ebc:	10 82       	st	Z, r1
    uint8 response;
    uint8 password[5];

    LCD_clearScreen();
    1ebe:	0e 94 dc 20 	call	0x41b8	; 0x41b8 <LCD_clearScreen>
    LCD_displayStringRowColumn(0, 0, "Plz Enter door");
    1ec2:	25 ee       	ldi	r18, 0xE5	; 229
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	80 e0       	ldi	r24, 0x00	; 0
    1ec8:	60 e0       	ldi	r22, 0x00	; 0
    1eca:	a9 01       	movw	r20, r18
    1ecc:	0e 94 a0 20 	call	0x4140	; 0x4140 <LCD_displayStringRowColumn>
    LCD_displayStringRowColumn(1, 0, "pass:");
    1ed0:	24 ef       	ldi	r18, 0xF4	; 244
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	81 e0       	ldi	r24, 0x01	; 1
    1ed6:	60 e0       	ldi	r22, 0x00	; 0
    1ed8:	a9 01       	movw	r20, r18
    1eda:	0e 94 a0 20 	call	0x4140	; 0x4140 <LCD_displayStringRowColumn>
    1ede:	28 c2       	rjmp	.+1104   	; 0x2330 <CHECK_Password+0x4a4>
	/*
	 * loop to get the password from the user
	 */
    while (pass_Counter < 5) {
        key = KEYPAD_getPressedKey();
    1ee0:	0e 94 30 1a 	call	0x3460	; 0x3460 <KEYPAD_getPressedKey>
    1ee4:	fe 01       	movw	r30, r28
    1ee6:	eb 59       	subi	r30, 0x9B	; 155
    1ee8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eea:	80 83       	st	Z, r24
    1eec:	fe 01       	movw	r30, r28
    1eee:	e1 5a       	subi	r30, 0xA1	; 161
    1ef0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef2:	80 e0       	ldi	r24, 0x00	; 0
    1ef4:	90 e0       	ldi	r25, 0x00	; 0
    1ef6:	a0 e2       	ldi	r26, 0x20	; 32
    1ef8:	b1 e4       	ldi	r27, 0x41	; 65
    1efa:	80 83       	st	Z, r24
    1efc:	91 83       	std	Z+1, r25	; 0x01
    1efe:	a2 83       	std	Z+2, r26	; 0x02
    1f00:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f02:	8e 01       	movw	r16, r28
    1f04:	05 5a       	subi	r16, 0xA5	; 165
    1f06:	1f 4f       	sbci	r17, 0xFF	; 255
    1f08:	fe 01       	movw	r30, r28
    1f0a:	e1 5a       	subi	r30, 0xA1	; 161
    1f0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0e:	60 81       	ld	r22, Z
    1f10:	71 81       	ldd	r23, Z+1	; 0x01
    1f12:	82 81       	ldd	r24, Z+2	; 0x02
    1f14:	93 81       	ldd	r25, Z+3	; 0x03
    1f16:	20 e0       	ldi	r18, 0x00	; 0
    1f18:	30 e0       	ldi	r19, 0x00	; 0
    1f1a:	4a ef       	ldi	r20, 0xFA	; 250
    1f1c:	54 e4       	ldi	r21, 0x44	; 68
    1f1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f22:	dc 01       	movw	r26, r24
    1f24:	cb 01       	movw	r24, r22
    1f26:	f8 01       	movw	r30, r16
    1f28:	80 83       	st	Z, r24
    1f2a:	91 83       	std	Z+1, r25	; 0x01
    1f2c:	a2 83       	std	Z+2, r26	; 0x02
    1f2e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f30:	fe 01       	movw	r30, r28
    1f32:	e5 5a       	subi	r30, 0xA5	; 165
    1f34:	ff 4f       	sbci	r31, 0xFF	; 255
    1f36:	60 81       	ld	r22, Z
    1f38:	71 81       	ldd	r23, Z+1	; 0x01
    1f3a:	82 81       	ldd	r24, Z+2	; 0x02
    1f3c:	93 81       	ldd	r25, Z+3	; 0x03
    1f3e:	20 e0       	ldi	r18, 0x00	; 0
    1f40:	30 e0       	ldi	r19, 0x00	; 0
    1f42:	40 e8       	ldi	r20, 0x80	; 128
    1f44:	5f e3       	ldi	r21, 0x3F	; 63
    1f46:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f4a:	88 23       	and	r24, r24
    1f4c:	44 f4       	brge	.+16     	; 0x1f5e <CHECK_Password+0xd2>
		__ticks = 1;
    1f4e:	fe 01       	movw	r30, r28
    1f50:	e7 5a       	subi	r30, 0xA7	; 167
    1f52:	ff 4f       	sbci	r31, 0xFF	; 255
    1f54:	81 e0       	ldi	r24, 0x01	; 1
    1f56:	90 e0       	ldi	r25, 0x00	; 0
    1f58:	91 83       	std	Z+1, r25	; 0x01
    1f5a:	80 83       	st	Z, r24
    1f5c:	64 c0       	rjmp	.+200    	; 0x2026 <CHECK_Password+0x19a>
	else if (__tmp > 65535)
    1f5e:	fe 01       	movw	r30, r28
    1f60:	e5 5a       	subi	r30, 0xA5	; 165
    1f62:	ff 4f       	sbci	r31, 0xFF	; 255
    1f64:	60 81       	ld	r22, Z
    1f66:	71 81       	ldd	r23, Z+1	; 0x01
    1f68:	82 81       	ldd	r24, Z+2	; 0x02
    1f6a:	93 81       	ldd	r25, Z+3	; 0x03
    1f6c:	20 e0       	ldi	r18, 0x00	; 0
    1f6e:	3f ef       	ldi	r19, 0xFF	; 255
    1f70:	4f e7       	ldi	r20, 0x7F	; 127
    1f72:	57 e4       	ldi	r21, 0x47	; 71
    1f74:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f78:	18 16       	cp	r1, r24
    1f7a:	0c f0       	brlt	.+2      	; 0x1f7e <CHECK_Password+0xf2>
    1f7c:	43 c0       	rjmp	.+134    	; 0x2004 <CHECK_Password+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f7e:	fe 01       	movw	r30, r28
    1f80:	e1 5a       	subi	r30, 0xA1	; 161
    1f82:	ff 4f       	sbci	r31, 0xFF	; 255
    1f84:	60 81       	ld	r22, Z
    1f86:	71 81       	ldd	r23, Z+1	; 0x01
    1f88:	82 81       	ldd	r24, Z+2	; 0x02
    1f8a:	93 81       	ldd	r25, Z+3	; 0x03
    1f8c:	20 e0       	ldi	r18, 0x00	; 0
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	40 e2       	ldi	r20, 0x20	; 32
    1f92:	51 e4       	ldi	r21, 0x41	; 65
    1f94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f98:	dc 01       	movw	r26, r24
    1f9a:	cb 01       	movw	r24, r22
    1f9c:	8e 01       	movw	r16, r28
    1f9e:	07 5a       	subi	r16, 0xA7	; 167
    1fa0:	1f 4f       	sbci	r17, 0xFF	; 255
    1fa2:	bc 01       	movw	r22, r24
    1fa4:	cd 01       	movw	r24, r26
    1fa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1faa:	dc 01       	movw	r26, r24
    1fac:	cb 01       	movw	r24, r22
    1fae:	f8 01       	movw	r30, r16
    1fb0:	91 83       	std	Z+1, r25	; 0x01
    1fb2:	80 83       	st	Z, r24
    1fb4:	1f c0       	rjmp	.+62     	; 0x1ff4 <CHECK_Password+0x168>
    1fb6:	fe 01       	movw	r30, r28
    1fb8:	e9 5a       	subi	r30, 0xA9	; 169
    1fba:	ff 4f       	sbci	r31, 0xFF	; 255
    1fbc:	88 ec       	ldi	r24, 0xC8	; 200
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	91 83       	std	Z+1, r25	; 0x01
    1fc2:	80 83       	st	Z, r24
    1fc4:	fe 01       	movw	r30, r28
    1fc6:	e9 5a       	subi	r30, 0xA9	; 169
    1fc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fca:	80 81       	ld	r24, Z
    1fcc:	91 81       	ldd	r25, Z+1	; 0x01
    1fce:	01 97       	sbiw	r24, 0x01	; 1
    1fd0:	f1 f7       	brne	.-4      	; 0x1fce <CHECK_Password+0x142>
    1fd2:	fe 01       	movw	r30, r28
    1fd4:	e9 5a       	subi	r30, 0xA9	; 169
    1fd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd8:	91 83       	std	Z+1, r25	; 0x01
    1fda:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fdc:	de 01       	movw	r26, r28
    1fde:	a7 5a       	subi	r26, 0xA7	; 167
    1fe0:	bf 4f       	sbci	r27, 0xFF	; 255
    1fe2:	fe 01       	movw	r30, r28
    1fe4:	e7 5a       	subi	r30, 0xA7	; 167
    1fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe8:	80 81       	ld	r24, Z
    1fea:	91 81       	ldd	r25, Z+1	; 0x01
    1fec:	01 97       	sbiw	r24, 0x01	; 1
    1fee:	11 96       	adiw	r26, 0x01	; 1
    1ff0:	9c 93       	st	X, r25
    1ff2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ff4:	fe 01       	movw	r30, r28
    1ff6:	e7 5a       	subi	r30, 0xA7	; 167
    1ff8:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffa:	80 81       	ld	r24, Z
    1ffc:	91 81       	ldd	r25, Z+1	; 0x01
    1ffe:	00 97       	sbiw	r24, 0x00	; 0
    2000:	d1 f6       	brne	.-76     	; 0x1fb6 <CHECK_Password+0x12a>
    2002:	e3 c0       	rjmp	.+454    	; 0x21ca <CHECK_Password+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2004:	8e 01       	movw	r16, r28
    2006:	07 5a       	subi	r16, 0xA7	; 167
    2008:	1f 4f       	sbci	r17, 0xFF	; 255
    200a:	fe 01       	movw	r30, r28
    200c:	e5 5a       	subi	r30, 0xA5	; 165
    200e:	ff 4f       	sbci	r31, 0xFF	; 255
    2010:	60 81       	ld	r22, Z
    2012:	71 81       	ldd	r23, Z+1	; 0x01
    2014:	82 81       	ldd	r24, Z+2	; 0x02
    2016:	93 81       	ldd	r25, Z+3	; 0x03
    2018:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    201c:	dc 01       	movw	r26, r24
    201e:	cb 01       	movw	r24, r22
    2020:	f8 01       	movw	r30, r16
    2022:	91 83       	std	Z+1, r25	; 0x01
    2024:	80 83       	st	Z, r24
    2026:	de 01       	movw	r26, r28
    2028:	ab 5a       	subi	r26, 0xAB	; 171
    202a:	bf 4f       	sbci	r27, 0xFF	; 255
    202c:	fe 01       	movw	r30, r28
    202e:	e7 5a       	subi	r30, 0xA7	; 167
    2030:	ff 4f       	sbci	r31, 0xFF	; 255
    2032:	80 81       	ld	r24, Z
    2034:	91 81       	ldd	r25, Z+1	; 0x01
    2036:	11 96       	adiw	r26, 0x01	; 1
    2038:	9c 93       	st	X, r25
    203a:	8e 93       	st	-X, r24
    203c:	fe 01       	movw	r30, r28
    203e:	eb 5a       	subi	r30, 0xAB	; 171
    2040:	ff 4f       	sbci	r31, 0xFF	; 255
    2042:	80 81       	ld	r24, Z
    2044:	91 81       	ldd	r25, Z+1	; 0x01
    2046:	01 97       	sbiw	r24, 0x01	; 1
    2048:	f1 f7       	brne	.-4      	; 0x2046 <CHECK_Password+0x1ba>
    204a:	fe 01       	movw	r30, r28
    204c:	eb 5a       	subi	r30, 0xAB	; 171
    204e:	ff 4f       	sbci	r31, 0xFF	; 255
    2050:	91 83       	std	Z+1, r25	; 0x01
    2052:	80 83       	st	Z, r24
    2054:	ba c0       	rjmp	.+372    	; 0x21ca <CHECK_Password+0x33e>
        _delay_ms(10);
        while (!((key >= 0) && (key <= 9))) {
            key = KEYPAD_getPressedKey();
    2056:	0e 94 30 1a 	call	0x3460	; 0x3460 <KEYPAD_getPressedKey>
    205a:	fe 01       	movw	r30, r28
    205c:	eb 59       	subi	r30, 0x9B	; 155
    205e:	ff 4f       	sbci	r31, 0xFF	; 255
    2060:	80 83       	st	Z, r24
    2062:	fe 01       	movw	r30, r28
    2064:	ef 5a       	subi	r30, 0xAF	; 175
    2066:	ff 4f       	sbci	r31, 0xFF	; 255
    2068:	80 e0       	ldi	r24, 0x00	; 0
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	a0 e2       	ldi	r26, 0x20	; 32
    206e:	b1 e4       	ldi	r27, 0x41	; 65
    2070:	80 83       	st	Z, r24
    2072:	91 83       	std	Z+1, r25	; 0x01
    2074:	a2 83       	std	Z+2, r26	; 0x02
    2076:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2078:	8e 01       	movw	r16, r28
    207a:	03 5b       	subi	r16, 0xB3	; 179
    207c:	1f 4f       	sbci	r17, 0xFF	; 255
    207e:	fe 01       	movw	r30, r28
    2080:	ef 5a       	subi	r30, 0xAF	; 175
    2082:	ff 4f       	sbci	r31, 0xFF	; 255
    2084:	60 81       	ld	r22, Z
    2086:	71 81       	ldd	r23, Z+1	; 0x01
    2088:	82 81       	ldd	r24, Z+2	; 0x02
    208a:	93 81       	ldd	r25, Z+3	; 0x03
    208c:	20 e0       	ldi	r18, 0x00	; 0
    208e:	30 e0       	ldi	r19, 0x00	; 0
    2090:	4a ef       	ldi	r20, 0xFA	; 250
    2092:	54 e4       	ldi	r21, 0x44	; 68
    2094:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2098:	dc 01       	movw	r26, r24
    209a:	cb 01       	movw	r24, r22
    209c:	f8 01       	movw	r30, r16
    209e:	80 83       	st	Z, r24
    20a0:	91 83       	std	Z+1, r25	; 0x01
    20a2:	a2 83       	std	Z+2, r26	; 0x02
    20a4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20a6:	fe 01       	movw	r30, r28
    20a8:	e3 5b       	subi	r30, 0xB3	; 179
    20aa:	ff 4f       	sbci	r31, 0xFF	; 255
    20ac:	60 81       	ld	r22, Z
    20ae:	71 81       	ldd	r23, Z+1	; 0x01
    20b0:	82 81       	ldd	r24, Z+2	; 0x02
    20b2:	93 81       	ldd	r25, Z+3	; 0x03
    20b4:	20 e0       	ldi	r18, 0x00	; 0
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	40 e8       	ldi	r20, 0x80	; 128
    20ba:	5f e3       	ldi	r21, 0x3F	; 63
    20bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20c0:	88 23       	and	r24, r24
    20c2:	44 f4       	brge	.+16     	; 0x20d4 <CHECK_Password+0x248>
		__ticks = 1;
    20c4:	fe 01       	movw	r30, r28
    20c6:	e5 5b       	subi	r30, 0xB5	; 181
    20c8:	ff 4f       	sbci	r31, 0xFF	; 255
    20ca:	81 e0       	ldi	r24, 0x01	; 1
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	91 83       	std	Z+1, r25	; 0x01
    20d0:	80 83       	st	Z, r24
    20d2:	64 c0       	rjmp	.+200    	; 0x219c <CHECK_Password+0x310>
	else if (__tmp > 65535)
    20d4:	fe 01       	movw	r30, r28
    20d6:	e3 5b       	subi	r30, 0xB3	; 179
    20d8:	ff 4f       	sbci	r31, 0xFF	; 255
    20da:	60 81       	ld	r22, Z
    20dc:	71 81       	ldd	r23, Z+1	; 0x01
    20de:	82 81       	ldd	r24, Z+2	; 0x02
    20e0:	93 81       	ldd	r25, Z+3	; 0x03
    20e2:	20 e0       	ldi	r18, 0x00	; 0
    20e4:	3f ef       	ldi	r19, 0xFF	; 255
    20e6:	4f e7       	ldi	r20, 0x7F	; 127
    20e8:	57 e4       	ldi	r21, 0x47	; 71
    20ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20ee:	18 16       	cp	r1, r24
    20f0:	0c f0       	brlt	.+2      	; 0x20f4 <CHECK_Password+0x268>
    20f2:	43 c0       	rjmp	.+134    	; 0x217a <CHECK_Password+0x2ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20f4:	fe 01       	movw	r30, r28
    20f6:	ef 5a       	subi	r30, 0xAF	; 175
    20f8:	ff 4f       	sbci	r31, 0xFF	; 255
    20fa:	60 81       	ld	r22, Z
    20fc:	71 81       	ldd	r23, Z+1	; 0x01
    20fe:	82 81       	ldd	r24, Z+2	; 0x02
    2100:	93 81       	ldd	r25, Z+3	; 0x03
    2102:	20 e0       	ldi	r18, 0x00	; 0
    2104:	30 e0       	ldi	r19, 0x00	; 0
    2106:	40 e2       	ldi	r20, 0x20	; 32
    2108:	51 e4       	ldi	r21, 0x41	; 65
    210a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    210e:	dc 01       	movw	r26, r24
    2110:	cb 01       	movw	r24, r22
    2112:	8e 01       	movw	r16, r28
    2114:	05 5b       	subi	r16, 0xB5	; 181
    2116:	1f 4f       	sbci	r17, 0xFF	; 255
    2118:	bc 01       	movw	r22, r24
    211a:	cd 01       	movw	r24, r26
    211c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2120:	dc 01       	movw	r26, r24
    2122:	cb 01       	movw	r24, r22
    2124:	f8 01       	movw	r30, r16
    2126:	91 83       	std	Z+1, r25	; 0x01
    2128:	80 83       	st	Z, r24
    212a:	1f c0       	rjmp	.+62     	; 0x216a <CHECK_Password+0x2de>
    212c:	fe 01       	movw	r30, r28
    212e:	e7 5b       	subi	r30, 0xB7	; 183
    2130:	ff 4f       	sbci	r31, 0xFF	; 255
    2132:	88 ec       	ldi	r24, 0xC8	; 200
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	91 83       	std	Z+1, r25	; 0x01
    2138:	80 83       	st	Z, r24
    213a:	fe 01       	movw	r30, r28
    213c:	e7 5b       	subi	r30, 0xB7	; 183
    213e:	ff 4f       	sbci	r31, 0xFF	; 255
    2140:	80 81       	ld	r24, Z
    2142:	91 81       	ldd	r25, Z+1	; 0x01
    2144:	01 97       	sbiw	r24, 0x01	; 1
    2146:	f1 f7       	brne	.-4      	; 0x2144 <CHECK_Password+0x2b8>
    2148:	fe 01       	movw	r30, r28
    214a:	e7 5b       	subi	r30, 0xB7	; 183
    214c:	ff 4f       	sbci	r31, 0xFF	; 255
    214e:	91 83       	std	Z+1, r25	; 0x01
    2150:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2152:	de 01       	movw	r26, r28
    2154:	a5 5b       	subi	r26, 0xB5	; 181
    2156:	bf 4f       	sbci	r27, 0xFF	; 255
    2158:	fe 01       	movw	r30, r28
    215a:	e5 5b       	subi	r30, 0xB5	; 181
    215c:	ff 4f       	sbci	r31, 0xFF	; 255
    215e:	80 81       	ld	r24, Z
    2160:	91 81       	ldd	r25, Z+1	; 0x01
    2162:	01 97       	sbiw	r24, 0x01	; 1
    2164:	11 96       	adiw	r26, 0x01	; 1
    2166:	9c 93       	st	X, r25
    2168:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    216a:	fe 01       	movw	r30, r28
    216c:	e5 5b       	subi	r30, 0xB5	; 181
    216e:	ff 4f       	sbci	r31, 0xFF	; 255
    2170:	80 81       	ld	r24, Z
    2172:	91 81       	ldd	r25, Z+1	; 0x01
    2174:	00 97       	sbiw	r24, 0x00	; 0
    2176:	d1 f6       	brne	.-76     	; 0x212c <CHECK_Password+0x2a0>
    2178:	28 c0       	rjmp	.+80     	; 0x21ca <CHECK_Password+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    217a:	8e 01       	movw	r16, r28
    217c:	05 5b       	subi	r16, 0xB5	; 181
    217e:	1f 4f       	sbci	r17, 0xFF	; 255
    2180:	fe 01       	movw	r30, r28
    2182:	e3 5b       	subi	r30, 0xB3	; 179
    2184:	ff 4f       	sbci	r31, 0xFF	; 255
    2186:	60 81       	ld	r22, Z
    2188:	71 81       	ldd	r23, Z+1	; 0x01
    218a:	82 81       	ldd	r24, Z+2	; 0x02
    218c:	93 81       	ldd	r25, Z+3	; 0x03
    218e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2192:	dc 01       	movw	r26, r24
    2194:	cb 01       	movw	r24, r22
    2196:	f8 01       	movw	r30, r16
    2198:	91 83       	std	Z+1, r25	; 0x01
    219a:	80 83       	st	Z, r24
    219c:	de 01       	movw	r26, r28
    219e:	a9 5b       	subi	r26, 0xB9	; 185
    21a0:	bf 4f       	sbci	r27, 0xFF	; 255
    21a2:	fe 01       	movw	r30, r28
    21a4:	e5 5b       	subi	r30, 0xB5	; 181
    21a6:	ff 4f       	sbci	r31, 0xFF	; 255
    21a8:	80 81       	ld	r24, Z
    21aa:	91 81       	ldd	r25, Z+1	; 0x01
    21ac:	11 96       	adiw	r26, 0x01	; 1
    21ae:	9c 93       	st	X, r25
    21b0:	8e 93       	st	-X, r24
    21b2:	fe 01       	movw	r30, r28
    21b4:	e9 5b       	subi	r30, 0xB9	; 185
    21b6:	ff 4f       	sbci	r31, 0xFF	; 255
    21b8:	80 81       	ld	r24, Z
    21ba:	91 81       	ldd	r25, Z+1	; 0x01
    21bc:	01 97       	sbiw	r24, 0x01	; 1
    21be:	f1 f7       	brne	.-4      	; 0x21bc <CHECK_Password+0x330>
    21c0:	fe 01       	movw	r30, r28
    21c2:	e9 5b       	subi	r30, 0xB9	; 185
    21c4:	ff 4f       	sbci	r31, 0xFF	; 255
    21c6:	91 83       	std	Z+1, r25	; 0x01
    21c8:	80 83       	st	Z, r24
	 * loop to get the password from the user
	 */
    while (pass_Counter < 5) {
        key = KEYPAD_getPressedKey();
        _delay_ms(10);
        while (!((key >= 0) && (key <= 9))) {
    21ca:	fe 01       	movw	r30, r28
    21cc:	eb 59       	subi	r30, 0x9B	; 155
    21ce:	ff 4f       	sbci	r31, 0xFF	; 255
    21d0:	80 81       	ld	r24, Z
    21d2:	8a 30       	cpi	r24, 0x0A	; 10
    21d4:	08 f0       	brcs	.+2      	; 0x21d8 <CHECK_Password+0x34c>
    21d6:	3f cf       	rjmp	.-386    	; 0x2056 <CHECK_Password+0x1ca>
            _delay_ms(10);
        }
        /*
         * Store the entered key in the password array
         */
        password[pass_Counter] = key;
    21d8:	fe 01       	movw	r30, r28
    21da:	ea 59       	subi	r30, 0x9A	; 154
    21dc:	ff 4f       	sbci	r31, 0xFF	; 255
    21de:	80 81       	ld	r24, Z
    21e0:	28 2f       	mov	r18, r24
    21e2:	30 e0       	ldi	r19, 0x00	; 0
    21e4:	ce 01       	movw	r24, r28
    21e6:	89 59       	subi	r24, 0x99	; 153
    21e8:	9f 4f       	sbci	r25, 0xFF	; 255
    21ea:	dc 01       	movw	r26, r24
    21ec:	a2 0f       	add	r26, r18
    21ee:	b3 1f       	adc	r27, r19
    21f0:	fe 01       	movw	r30, r28
    21f2:	eb 59       	subi	r30, 0x9B	; 155
    21f4:	ff 4f       	sbci	r31, 0xFF	; 255
    21f6:	80 81       	ld	r24, Z
    21f8:	8c 93       	st	X, r24
        /*
         * pass_Counter+5 position in lcd
         * */
        LCD_displayStringRowColumn(1, pass_Counter+5, "*");
    21fa:	fe 01       	movw	r30, r28
    21fc:	ea 59       	subi	r30, 0x9A	; 154
    21fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2200:	80 81       	ld	r24, Z
    2202:	98 2f       	mov	r25, r24
    2204:	9b 5f       	subi	r25, 0xFB	; 251
    2206:	2a e8       	ldi	r18, 0x8A	; 138
    2208:	30 e0       	ldi	r19, 0x00	; 0
    220a:	81 e0       	ldi	r24, 0x01	; 1
    220c:	69 2f       	mov	r22, r25
    220e:	a9 01       	movw	r20, r18
    2210:	0e 94 a0 20 	call	0x4140	; 0x4140 <LCD_displayStringRowColumn>
    2214:	fe 01       	movw	r30, r28
    2216:	ed 5b       	subi	r30, 0xBD	; 189
    2218:	ff 4f       	sbci	r31, 0xFF	; 255
    221a:	80 e0       	ldi	r24, 0x00	; 0
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	aa ef       	ldi	r26, 0xFA	; 250
    2220:	b3 e4       	ldi	r27, 0x43	; 67
    2222:	80 83       	st	Z, r24
    2224:	91 83       	std	Z+1, r25	; 0x01
    2226:	a2 83       	std	Z+2, r26	; 0x02
    2228:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    222a:	8e 01       	movw	r16, r28
    222c:	01 5c       	subi	r16, 0xC1	; 193
    222e:	1f 4f       	sbci	r17, 0xFF	; 255
    2230:	fe 01       	movw	r30, r28
    2232:	ed 5b       	subi	r30, 0xBD	; 189
    2234:	ff 4f       	sbci	r31, 0xFF	; 255
    2236:	60 81       	ld	r22, Z
    2238:	71 81       	ldd	r23, Z+1	; 0x01
    223a:	82 81       	ldd	r24, Z+2	; 0x02
    223c:	93 81       	ldd	r25, Z+3	; 0x03
    223e:	20 e0       	ldi	r18, 0x00	; 0
    2240:	30 e0       	ldi	r19, 0x00	; 0
    2242:	4a ef       	ldi	r20, 0xFA	; 250
    2244:	54 e4       	ldi	r21, 0x44	; 68
    2246:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    224a:	dc 01       	movw	r26, r24
    224c:	cb 01       	movw	r24, r22
    224e:	f8 01       	movw	r30, r16
    2250:	80 83       	st	Z, r24
    2252:	91 83       	std	Z+1, r25	; 0x01
    2254:	a2 83       	std	Z+2, r26	; 0x02
    2256:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2258:	fe 01       	movw	r30, r28
    225a:	ff 96       	adiw	r30, 0x3f	; 63
    225c:	60 81       	ld	r22, Z
    225e:	71 81       	ldd	r23, Z+1	; 0x01
    2260:	82 81       	ldd	r24, Z+2	; 0x02
    2262:	93 81       	ldd	r25, Z+3	; 0x03
    2264:	20 e0       	ldi	r18, 0x00	; 0
    2266:	30 e0       	ldi	r19, 0x00	; 0
    2268:	40 e8       	ldi	r20, 0x80	; 128
    226a:	5f e3       	ldi	r21, 0x3F	; 63
    226c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2270:	88 23       	and	r24, r24
    2272:	2c f4       	brge	.+10     	; 0x227e <CHECK_Password+0x3f2>
		__ticks = 1;
    2274:	81 e0       	ldi	r24, 0x01	; 1
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	9e af       	std	Y+62, r25	; 0x3e
    227a:	8d af       	std	Y+61, r24	; 0x3d
    227c:	46 c0       	rjmp	.+140    	; 0x230a <CHECK_Password+0x47e>
	else if (__tmp > 65535)
    227e:	fe 01       	movw	r30, r28
    2280:	ff 96       	adiw	r30, 0x3f	; 63
    2282:	60 81       	ld	r22, Z
    2284:	71 81       	ldd	r23, Z+1	; 0x01
    2286:	82 81       	ldd	r24, Z+2	; 0x02
    2288:	93 81       	ldd	r25, Z+3	; 0x03
    228a:	20 e0       	ldi	r18, 0x00	; 0
    228c:	3f ef       	ldi	r19, 0xFF	; 255
    228e:	4f e7       	ldi	r20, 0x7F	; 127
    2290:	57 e4       	ldi	r21, 0x47	; 71
    2292:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2296:	18 16       	cp	r1, r24
    2298:	64 f5       	brge	.+88     	; 0x22f2 <CHECK_Password+0x466>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    229a:	fe 01       	movw	r30, r28
    229c:	ed 5b       	subi	r30, 0xBD	; 189
    229e:	ff 4f       	sbci	r31, 0xFF	; 255
    22a0:	60 81       	ld	r22, Z
    22a2:	71 81       	ldd	r23, Z+1	; 0x01
    22a4:	82 81       	ldd	r24, Z+2	; 0x02
    22a6:	93 81       	ldd	r25, Z+3	; 0x03
    22a8:	20 e0       	ldi	r18, 0x00	; 0
    22aa:	30 e0       	ldi	r19, 0x00	; 0
    22ac:	40 e2       	ldi	r20, 0x20	; 32
    22ae:	51 e4       	ldi	r21, 0x41	; 65
    22b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22b4:	dc 01       	movw	r26, r24
    22b6:	cb 01       	movw	r24, r22
    22b8:	bc 01       	movw	r22, r24
    22ba:	cd 01       	movw	r24, r26
    22bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22c0:	dc 01       	movw	r26, r24
    22c2:	cb 01       	movw	r24, r22
    22c4:	9e af       	std	Y+62, r25	; 0x3e
    22c6:	8d af       	std	Y+61, r24	; 0x3d
    22c8:	0f c0       	rjmp	.+30     	; 0x22e8 <CHECK_Password+0x45c>
    22ca:	88 ec       	ldi	r24, 0xC8	; 200
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	9c af       	std	Y+60, r25	; 0x3c
    22d0:	8b af       	std	Y+59, r24	; 0x3b
    22d2:	8b ad       	ldd	r24, Y+59	; 0x3b
    22d4:	9c ad       	ldd	r25, Y+60	; 0x3c
    22d6:	01 97       	sbiw	r24, 0x01	; 1
    22d8:	f1 f7       	brne	.-4      	; 0x22d6 <CHECK_Password+0x44a>
    22da:	9c af       	std	Y+60, r25	; 0x3c
    22dc:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22de:	8d ad       	ldd	r24, Y+61	; 0x3d
    22e0:	9e ad       	ldd	r25, Y+62	; 0x3e
    22e2:	01 97       	sbiw	r24, 0x01	; 1
    22e4:	9e af       	std	Y+62, r25	; 0x3e
    22e6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22e8:	8d ad       	ldd	r24, Y+61	; 0x3d
    22ea:	9e ad       	ldd	r25, Y+62	; 0x3e
    22ec:	00 97       	sbiw	r24, 0x00	; 0
    22ee:	69 f7       	brne	.-38     	; 0x22ca <CHECK_Password+0x43e>
    22f0:	16 c0       	rjmp	.+44     	; 0x231e <CHECK_Password+0x492>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22f2:	fe 01       	movw	r30, r28
    22f4:	ff 96       	adiw	r30, 0x3f	; 63
    22f6:	60 81       	ld	r22, Z
    22f8:	71 81       	ldd	r23, Z+1	; 0x01
    22fa:	82 81       	ldd	r24, Z+2	; 0x02
    22fc:	93 81       	ldd	r25, Z+3	; 0x03
    22fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2302:	dc 01       	movw	r26, r24
    2304:	cb 01       	movw	r24, r22
    2306:	9e af       	std	Y+62, r25	; 0x3e
    2308:	8d af       	std	Y+61, r24	; 0x3d
    230a:	8d ad       	ldd	r24, Y+61	; 0x3d
    230c:	9e ad       	ldd	r25, Y+62	; 0x3e
    230e:	9a af       	std	Y+58, r25	; 0x3a
    2310:	89 af       	std	Y+57, r24	; 0x39
    2312:	89 ad       	ldd	r24, Y+57	; 0x39
    2314:	9a ad       	ldd	r25, Y+58	; 0x3a
    2316:	01 97       	sbiw	r24, 0x01	; 1
    2318:	f1 f7       	brne	.-4      	; 0x2316 <CHECK_Password+0x48a>
    231a:	9a af       	std	Y+58, r25	; 0x3a
    231c:	89 af       	std	Y+57, r24	; 0x39
        _delay_ms(500);
        pass_Counter++;
    231e:	de 01       	movw	r26, r28
    2320:	aa 59       	subi	r26, 0x9A	; 154
    2322:	bf 4f       	sbci	r27, 0xFF	; 255
    2324:	fe 01       	movw	r30, r28
    2326:	ea 59       	subi	r30, 0x9A	; 154
    2328:	ff 4f       	sbci	r31, 0xFF	; 255
    232a:	80 81       	ld	r24, Z
    232c:	8f 5f       	subi	r24, 0xFF	; 255
    232e:	8c 93       	st	X, r24
    LCD_displayStringRowColumn(0, 0, "Plz Enter door");
    LCD_displayStringRowColumn(1, 0, "pass:");
	/*
	 * loop to get the password from the user
	 */
    while (pass_Counter < 5) {
    2330:	fe 01       	movw	r30, r28
    2332:	ea 59       	subi	r30, 0x9A	; 154
    2334:	ff 4f       	sbci	r31, 0xFF	; 255
    2336:	80 81       	ld	r24, Z
    2338:	85 30       	cpi	r24, 0x05	; 5
    233a:	08 f4       	brcc	.+2      	; 0x233e <CHECK_Password+0x4b2>
    233c:	d1 cd       	rjmp	.-1118   	; 0x1ee0 <CHECK_Password+0x54>
         * */
        LCD_displayStringRowColumn(1, pass_Counter+5, "*");
        _delay_ms(500);
        pass_Counter++;
    }
    LCD_clearScreen();
    233e:	0e 94 dc 20 	call	0x41b8	; 0x41b8 <LCD_clearScreen>
    LCD_displayStringRowColumn(0, 0, "Press = to ");
    2342:	2c e8       	ldi	r18, 0x8C	; 140
    2344:	30 e0       	ldi	r19, 0x00	; 0
    2346:	80 e0       	ldi	r24, 0x00	; 0
    2348:	60 e0       	ldi	r22, 0x00	; 0
    234a:	a9 01       	movw	r20, r18
    234c:	0e 94 a0 20 	call	0x4140	; 0x4140 <LCD_displayStringRowColumn>
    LCD_displayStringRowColumn(1, 0, "enter password");
    2350:	2a ef       	ldi	r18, 0xFA	; 250
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	81 e0       	ldi	r24, 0x01	; 1
    2356:	60 e0       	ldi	r22, 0x00	; 0
    2358:	a9 01       	movw	r20, r18
    235a:	0e 94 a0 20 	call	0x4140	; 0x4140 <LCD_displayStringRowColumn>
    235e:	78 c0       	rjmp	.+240    	; 0x2450 <CHECK_Password+0x5c4>

    while (KEYPAD_getPressedKey() != '=') {
        key = KEYPAD_getPressedKey();
    2360:	0e 94 30 1a 	call	0x3460	; 0x3460 <KEYPAD_getPressedKey>
    2364:	fe 01       	movw	r30, r28
    2366:	eb 59       	subi	r30, 0x9B	; 155
    2368:	ff 4f       	sbci	r31, 0xFF	; 255
    236a:	80 83       	st	Z, r24
    236c:	80 e0       	ldi	r24, 0x00	; 0
    236e:	90 e0       	ldi	r25, 0x00	; 0
    2370:	aa ef       	ldi	r26, 0xFA	; 250
    2372:	b3 e4       	ldi	r27, 0x43	; 67
    2374:	8d ab       	std	Y+53, r24	; 0x35
    2376:	9e ab       	std	Y+54, r25	; 0x36
    2378:	af ab       	std	Y+55, r26	; 0x37
    237a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    237c:	6d a9       	ldd	r22, Y+53	; 0x35
    237e:	7e a9       	ldd	r23, Y+54	; 0x36
    2380:	8f a9       	ldd	r24, Y+55	; 0x37
    2382:	98 ad       	ldd	r25, Y+56	; 0x38
    2384:	20 e0       	ldi	r18, 0x00	; 0
    2386:	30 e0       	ldi	r19, 0x00	; 0
    2388:	4a ef       	ldi	r20, 0xFA	; 250
    238a:	54 e4       	ldi	r21, 0x44	; 68
    238c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2390:	dc 01       	movw	r26, r24
    2392:	cb 01       	movw	r24, r22
    2394:	89 ab       	std	Y+49, r24	; 0x31
    2396:	9a ab       	std	Y+50, r25	; 0x32
    2398:	ab ab       	std	Y+51, r26	; 0x33
    239a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    239c:	69 a9       	ldd	r22, Y+49	; 0x31
    239e:	7a a9       	ldd	r23, Y+50	; 0x32
    23a0:	8b a9       	ldd	r24, Y+51	; 0x33
    23a2:	9c a9       	ldd	r25, Y+52	; 0x34
    23a4:	20 e0       	ldi	r18, 0x00	; 0
    23a6:	30 e0       	ldi	r19, 0x00	; 0
    23a8:	40 e8       	ldi	r20, 0x80	; 128
    23aa:	5f e3       	ldi	r21, 0x3F	; 63
    23ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23b0:	88 23       	and	r24, r24
    23b2:	2c f4       	brge	.+10     	; 0x23be <CHECK_Password+0x532>
		__ticks = 1;
    23b4:	81 e0       	ldi	r24, 0x01	; 1
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	98 ab       	std	Y+48, r25	; 0x30
    23ba:	8f a7       	std	Y+47, r24	; 0x2f
    23bc:	3f c0       	rjmp	.+126    	; 0x243c <CHECK_Password+0x5b0>
	else if (__tmp > 65535)
    23be:	69 a9       	ldd	r22, Y+49	; 0x31
    23c0:	7a a9       	ldd	r23, Y+50	; 0x32
    23c2:	8b a9       	ldd	r24, Y+51	; 0x33
    23c4:	9c a9       	ldd	r25, Y+52	; 0x34
    23c6:	20 e0       	ldi	r18, 0x00	; 0
    23c8:	3f ef       	ldi	r19, 0xFF	; 255
    23ca:	4f e7       	ldi	r20, 0x7F	; 127
    23cc:	57 e4       	ldi	r21, 0x47	; 71
    23ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23d2:	18 16       	cp	r1, r24
    23d4:	4c f5       	brge	.+82     	; 0x2428 <CHECK_Password+0x59c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23d6:	6d a9       	ldd	r22, Y+53	; 0x35
    23d8:	7e a9       	ldd	r23, Y+54	; 0x36
    23da:	8f a9       	ldd	r24, Y+55	; 0x37
    23dc:	98 ad       	ldd	r25, Y+56	; 0x38
    23de:	20 e0       	ldi	r18, 0x00	; 0
    23e0:	30 e0       	ldi	r19, 0x00	; 0
    23e2:	40 e2       	ldi	r20, 0x20	; 32
    23e4:	51 e4       	ldi	r21, 0x41	; 65
    23e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ea:	dc 01       	movw	r26, r24
    23ec:	cb 01       	movw	r24, r22
    23ee:	bc 01       	movw	r22, r24
    23f0:	cd 01       	movw	r24, r26
    23f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23f6:	dc 01       	movw	r26, r24
    23f8:	cb 01       	movw	r24, r22
    23fa:	98 ab       	std	Y+48, r25	; 0x30
    23fc:	8f a7       	std	Y+47, r24	; 0x2f
    23fe:	0f c0       	rjmp	.+30     	; 0x241e <CHECK_Password+0x592>
    2400:	88 ec       	ldi	r24, 0xC8	; 200
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	9e a7       	std	Y+46, r25	; 0x2e
    2406:	8d a7       	std	Y+45, r24	; 0x2d
    2408:	8d a5       	ldd	r24, Y+45	; 0x2d
    240a:	9e a5       	ldd	r25, Y+46	; 0x2e
    240c:	01 97       	sbiw	r24, 0x01	; 1
    240e:	f1 f7       	brne	.-4      	; 0x240c <CHECK_Password+0x580>
    2410:	9e a7       	std	Y+46, r25	; 0x2e
    2412:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2414:	8f a5       	ldd	r24, Y+47	; 0x2f
    2416:	98 a9       	ldd	r25, Y+48	; 0x30
    2418:	01 97       	sbiw	r24, 0x01	; 1
    241a:	98 ab       	std	Y+48, r25	; 0x30
    241c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    241e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2420:	98 a9       	ldd	r25, Y+48	; 0x30
    2422:	00 97       	sbiw	r24, 0x00	; 0
    2424:	69 f7       	brne	.-38     	; 0x2400 <CHECK_Password+0x574>
    2426:	14 c0       	rjmp	.+40     	; 0x2450 <CHECK_Password+0x5c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2428:	69 a9       	ldd	r22, Y+49	; 0x31
    242a:	7a a9       	ldd	r23, Y+50	; 0x32
    242c:	8b a9       	ldd	r24, Y+51	; 0x33
    242e:	9c a9       	ldd	r25, Y+52	; 0x34
    2430:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2434:	dc 01       	movw	r26, r24
    2436:	cb 01       	movw	r24, r22
    2438:	98 ab       	std	Y+48, r25	; 0x30
    243a:	8f a7       	std	Y+47, r24	; 0x2f
    243c:	8f a5       	ldd	r24, Y+47	; 0x2f
    243e:	98 a9       	ldd	r25, Y+48	; 0x30
    2440:	9c a7       	std	Y+44, r25	; 0x2c
    2442:	8b a7       	std	Y+43, r24	; 0x2b
    2444:	8b a5       	ldd	r24, Y+43	; 0x2b
    2446:	9c a5       	ldd	r25, Y+44	; 0x2c
    2448:	01 97       	sbiw	r24, 0x01	; 1
    244a:	f1 f7       	brne	.-4      	; 0x2448 <CHECK_Password+0x5bc>
    244c:	9c a7       	std	Y+44, r25	; 0x2c
    244e:	8b a7       	std	Y+43, r24	; 0x2b
    }
    LCD_clearScreen();
    LCD_displayStringRowColumn(0, 0, "Press = to ");
    LCD_displayStringRowColumn(1, 0, "enter password");

    while (KEYPAD_getPressedKey() != '=') {
    2450:	0e 94 30 1a 	call	0x3460	; 0x3460 <KEYPAD_getPressedKey>
    2454:	8d 33       	cpi	r24, 0x3D	; 61
    2456:	09 f0       	breq	.+2      	; 0x245a <CHECK_Password+0x5ce>
    2458:	83 cf       	rjmp	.-250    	; 0x2360 <CHECK_Password+0x4d4>
        key = KEYPAD_getPressedKey();
        _delay_ms(500);
    }
    LCD_clearScreen();
    245a:	0e 94 dc 20 	call	0x41b8	; 0x41b8 <LCD_clearScreen>
    /*
     * send pass to ELU to compare it with
     * password in EEROM
     */
    UART_sendByte(CHECK_PASSWORD);
    245e:	83 ea       	ldi	r24, 0xA3	; 163
    2460:	0e 94 f9 22 	call	0x45f2	; 0x45f2 <UART_sendByte>
    2464:	80 e0       	ldi	r24, 0x00	; 0
    2466:	90 e0       	ldi	r25, 0x00	; 0
    2468:	a0 e2       	ldi	r26, 0x20	; 32
    246a:	b1 e4       	ldi	r27, 0x41	; 65
    246c:	8f a3       	std	Y+39, r24	; 0x27
    246e:	98 a7       	std	Y+40, r25	; 0x28
    2470:	a9 a7       	std	Y+41, r26	; 0x29
    2472:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2474:	6f a1       	ldd	r22, Y+39	; 0x27
    2476:	78 a5       	ldd	r23, Y+40	; 0x28
    2478:	89 a5       	ldd	r24, Y+41	; 0x29
    247a:	9a a5       	ldd	r25, Y+42	; 0x2a
    247c:	20 e0       	ldi	r18, 0x00	; 0
    247e:	30 e0       	ldi	r19, 0x00	; 0
    2480:	4a ef       	ldi	r20, 0xFA	; 250
    2482:	54 e4       	ldi	r21, 0x44	; 68
    2484:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2488:	dc 01       	movw	r26, r24
    248a:	cb 01       	movw	r24, r22
    248c:	8b a3       	std	Y+35, r24	; 0x23
    248e:	9c a3       	std	Y+36, r25	; 0x24
    2490:	ad a3       	std	Y+37, r26	; 0x25
    2492:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2494:	6b a1       	ldd	r22, Y+35	; 0x23
    2496:	7c a1       	ldd	r23, Y+36	; 0x24
    2498:	8d a1       	ldd	r24, Y+37	; 0x25
    249a:	9e a1       	ldd	r25, Y+38	; 0x26
    249c:	20 e0       	ldi	r18, 0x00	; 0
    249e:	30 e0       	ldi	r19, 0x00	; 0
    24a0:	40 e8       	ldi	r20, 0x80	; 128
    24a2:	5f e3       	ldi	r21, 0x3F	; 63
    24a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24a8:	88 23       	and	r24, r24
    24aa:	2c f4       	brge	.+10     	; 0x24b6 <CHECK_Password+0x62a>
		__ticks = 1;
    24ac:	81 e0       	ldi	r24, 0x01	; 1
    24ae:	90 e0       	ldi	r25, 0x00	; 0
    24b0:	9a a3       	std	Y+34, r25	; 0x22
    24b2:	89 a3       	std	Y+33, r24	; 0x21
    24b4:	3f c0       	rjmp	.+126    	; 0x2534 <CHECK_Password+0x6a8>
	else if (__tmp > 65535)
    24b6:	6b a1       	ldd	r22, Y+35	; 0x23
    24b8:	7c a1       	ldd	r23, Y+36	; 0x24
    24ba:	8d a1       	ldd	r24, Y+37	; 0x25
    24bc:	9e a1       	ldd	r25, Y+38	; 0x26
    24be:	20 e0       	ldi	r18, 0x00	; 0
    24c0:	3f ef       	ldi	r19, 0xFF	; 255
    24c2:	4f e7       	ldi	r20, 0x7F	; 127
    24c4:	57 e4       	ldi	r21, 0x47	; 71
    24c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24ca:	18 16       	cp	r1, r24
    24cc:	4c f5       	brge	.+82     	; 0x2520 <CHECK_Password+0x694>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24ce:	6f a1       	ldd	r22, Y+39	; 0x27
    24d0:	78 a5       	ldd	r23, Y+40	; 0x28
    24d2:	89 a5       	ldd	r24, Y+41	; 0x29
    24d4:	9a a5       	ldd	r25, Y+42	; 0x2a
    24d6:	20 e0       	ldi	r18, 0x00	; 0
    24d8:	30 e0       	ldi	r19, 0x00	; 0
    24da:	40 e2       	ldi	r20, 0x20	; 32
    24dc:	51 e4       	ldi	r21, 0x41	; 65
    24de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e2:	dc 01       	movw	r26, r24
    24e4:	cb 01       	movw	r24, r22
    24e6:	bc 01       	movw	r22, r24
    24e8:	cd 01       	movw	r24, r26
    24ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ee:	dc 01       	movw	r26, r24
    24f0:	cb 01       	movw	r24, r22
    24f2:	9a a3       	std	Y+34, r25	; 0x22
    24f4:	89 a3       	std	Y+33, r24	; 0x21
    24f6:	0f c0       	rjmp	.+30     	; 0x2516 <CHECK_Password+0x68a>
    24f8:	88 ec       	ldi	r24, 0xC8	; 200
    24fa:	90 e0       	ldi	r25, 0x00	; 0
    24fc:	98 a3       	std	Y+32, r25	; 0x20
    24fe:	8f 8f       	std	Y+31, r24	; 0x1f
    2500:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2502:	98 a1       	ldd	r25, Y+32	; 0x20
    2504:	01 97       	sbiw	r24, 0x01	; 1
    2506:	f1 f7       	brne	.-4      	; 0x2504 <CHECK_Password+0x678>
    2508:	98 a3       	std	Y+32, r25	; 0x20
    250a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    250c:	89 a1       	ldd	r24, Y+33	; 0x21
    250e:	9a a1       	ldd	r25, Y+34	; 0x22
    2510:	01 97       	sbiw	r24, 0x01	; 1
    2512:	9a a3       	std	Y+34, r25	; 0x22
    2514:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2516:	89 a1       	ldd	r24, Y+33	; 0x21
    2518:	9a a1       	ldd	r25, Y+34	; 0x22
    251a:	00 97       	sbiw	r24, 0x00	; 0
    251c:	69 f7       	brne	.-38     	; 0x24f8 <CHECK_Password+0x66c>
    251e:	14 c0       	rjmp	.+40     	; 0x2548 <CHECK_Password+0x6bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2520:	6b a1       	ldd	r22, Y+35	; 0x23
    2522:	7c a1       	ldd	r23, Y+36	; 0x24
    2524:	8d a1       	ldd	r24, Y+37	; 0x25
    2526:	9e a1       	ldd	r25, Y+38	; 0x26
    2528:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    252c:	dc 01       	movw	r26, r24
    252e:	cb 01       	movw	r24, r22
    2530:	9a a3       	std	Y+34, r25	; 0x22
    2532:	89 a3       	std	Y+33, r24	; 0x21
    2534:	89 a1       	ldd	r24, Y+33	; 0x21
    2536:	9a a1       	ldd	r25, Y+34	; 0x22
    2538:	9e 8f       	std	Y+30, r25	; 0x1e
    253a:	8d 8f       	std	Y+29, r24	; 0x1d
    253c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    253e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2540:	01 97       	sbiw	r24, 0x01	; 1
    2542:	f1 f7       	brne	.-4      	; 0x2540 <CHECK_Password+0x6b4>
    2544:	9e 8f       	std	Y+30, r25	; 0x1e
    2546:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(10);

    for (pass_Counter = 0; pass_Counter < 5; pass_Counter++) {
    2548:	fe 01       	movw	r30, r28
    254a:	ea 59       	subi	r30, 0x9A	; 154
    254c:	ff 4f       	sbci	r31, 0xFF	; 255
    254e:	10 82       	st	Z, r1
    2550:	31 c0       	rjmp	.+98     	; 0x25b4 <CHECK_Password+0x728>
        /*
         *  Wait until MC2 is ready to receive the password
         */
        while (UART_recieveByte() != MC2_READY) {
    2552:	0e 94 10 23 	call	0x4620	; 0x4620 <UART_recieveByte>
    2556:	80 32       	cpi	r24, 0x20	; 32
    2558:	e1 f7       	brne	.-8      	; 0x2552 <CHECK_Password+0x6c6>
        }
        UART_sendByte(password[pass_Counter]);
    255a:	fe 01       	movw	r30, r28
    255c:	ea 59       	subi	r30, 0x9A	; 154
    255e:	ff 4f       	sbci	r31, 0xFF	; 255
    2560:	80 81       	ld	r24, Z
    2562:	28 2f       	mov	r18, r24
    2564:	30 e0       	ldi	r19, 0x00	; 0
    2566:	ce 01       	movw	r24, r28
    2568:	89 59       	subi	r24, 0x99	; 153
    256a:	9f 4f       	sbci	r25, 0xFF	; 255
    256c:	fc 01       	movw	r30, r24
    256e:	e2 0f       	add	r30, r18
    2570:	f3 1f       	adc	r31, r19
    2572:	80 81       	ld	r24, Z
    2574:	0e 94 f9 22 	call	0x45f2	; 0x45f2 <UART_sendByte>
        response = UART_recieveByte();
    2578:	0e 94 10 23 	call	0x4620	; 0x4620 <UART_recieveByte>
    257c:	fe 01       	movw	r30, r28
    257e:	ed 59       	subi	r30, 0x9D	; 157
    2580:	ff 4f       	sbci	r31, 0xFF	; 255
    2582:	80 83       	st	Z, r24
        if (response == PASSWORD_DOESNT_MATCH) {
    2584:	fe 01       	movw	r30, r28
    2586:	ed 59       	subi	r30, 0x9D	; 157
    2588:	ff 4f       	sbci	r31, 0xFF	; 255
    258a:	80 81       	ld	r24, Z
    258c:	88 3a       	cpi	r24, 0xA8	; 168
    258e:	49 f4       	brne	.+18     	; 0x25a2 <CHECK_Password+0x716>
            error++;
    2590:	de 01       	movw	r26, r28
    2592:	ac 59       	subi	r26, 0x9C	; 156
    2594:	bf 4f       	sbci	r27, 0xFF	; 255
    2596:	fe 01       	movw	r30, r28
    2598:	ec 59       	subi	r30, 0x9C	; 156
    259a:	ff 4f       	sbci	r31, 0xFF	; 255
    259c:	80 81       	ld	r24, Z
    259e:	8f 5f       	subi	r24, 0xFF	; 255
    25a0:	8c 93       	st	X, r24
     * password in EEROM
     */
    UART_sendByte(CHECK_PASSWORD);
    _delay_ms(10);

    for (pass_Counter = 0; pass_Counter < 5; pass_Counter++) {
    25a2:	de 01       	movw	r26, r28
    25a4:	aa 59       	subi	r26, 0x9A	; 154
    25a6:	bf 4f       	sbci	r27, 0xFF	; 255
    25a8:	fe 01       	movw	r30, r28
    25aa:	ea 59       	subi	r30, 0x9A	; 154
    25ac:	ff 4f       	sbci	r31, 0xFF	; 255
    25ae:	80 81       	ld	r24, Z
    25b0:	8f 5f       	subi	r24, 0xFF	; 255
    25b2:	8c 93       	st	X, r24
    25b4:	fe 01       	movw	r30, r28
    25b6:	ea 59       	subi	r30, 0x9A	; 154
    25b8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ba:	80 81       	ld	r24, Z
    25bc:	85 30       	cpi	r24, 0x05	; 5
    25be:	48 f2       	brcs	.-110    	; 0x2552 <CHECK_Password+0x6c6>
        if (response == PASSWORD_DOESNT_MATCH) {
            error++;
        }
    }

    if (error != 0) {
    25c0:	fe 01       	movw	r30, r28
    25c2:	ec 59       	subi	r30, 0x9C	; 156
    25c4:	ff 4f       	sbci	r31, 0xFF	; 255
    25c6:	80 81       	ld	r24, Z
    25c8:	88 23       	and	r24, r24
    25ca:	09 f4       	brne	.+2      	; 0x25ce <CHECK_Password+0x742>
    25cc:	73 c0       	rjmp	.+230    	; 0x26b4 <CHECK_Password+0x828>
    25ce:	80 e0       	ldi	r24, 0x00	; 0
    25d0:	90 e0       	ldi	r25, 0x00	; 0
    25d2:	aa ef       	ldi	r26, 0xFA	; 250
    25d4:	b3 e4       	ldi	r27, 0x43	; 67
    25d6:	89 8f       	std	Y+25, r24	; 0x19
    25d8:	9a 8f       	std	Y+26, r25	; 0x1a
    25da:	ab 8f       	std	Y+27, r26	; 0x1b
    25dc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25de:	69 8d       	ldd	r22, Y+25	; 0x19
    25e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25e6:	20 e0       	ldi	r18, 0x00	; 0
    25e8:	30 e0       	ldi	r19, 0x00	; 0
    25ea:	4a ef       	ldi	r20, 0xFA	; 250
    25ec:	54 e4       	ldi	r21, 0x44	; 68
    25ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25f2:	dc 01       	movw	r26, r24
    25f4:	cb 01       	movw	r24, r22
    25f6:	8d 8b       	std	Y+21, r24	; 0x15
    25f8:	9e 8b       	std	Y+22, r25	; 0x16
    25fa:	af 8b       	std	Y+23, r26	; 0x17
    25fc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    25fe:	6d 89       	ldd	r22, Y+21	; 0x15
    2600:	7e 89       	ldd	r23, Y+22	; 0x16
    2602:	8f 89       	ldd	r24, Y+23	; 0x17
    2604:	98 8d       	ldd	r25, Y+24	; 0x18
    2606:	20 e0       	ldi	r18, 0x00	; 0
    2608:	30 e0       	ldi	r19, 0x00	; 0
    260a:	40 e8       	ldi	r20, 0x80	; 128
    260c:	5f e3       	ldi	r21, 0x3F	; 63
    260e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2612:	88 23       	and	r24, r24
    2614:	2c f4       	brge	.+10     	; 0x2620 <CHECK_Password+0x794>
		__ticks = 1;
    2616:	81 e0       	ldi	r24, 0x01	; 1
    2618:	90 e0       	ldi	r25, 0x00	; 0
    261a:	9c 8b       	std	Y+20, r25	; 0x14
    261c:	8b 8b       	std	Y+19, r24	; 0x13
    261e:	3f c0       	rjmp	.+126    	; 0x269e <CHECK_Password+0x812>
	else if (__tmp > 65535)
    2620:	6d 89       	ldd	r22, Y+21	; 0x15
    2622:	7e 89       	ldd	r23, Y+22	; 0x16
    2624:	8f 89       	ldd	r24, Y+23	; 0x17
    2626:	98 8d       	ldd	r25, Y+24	; 0x18
    2628:	20 e0       	ldi	r18, 0x00	; 0
    262a:	3f ef       	ldi	r19, 0xFF	; 255
    262c:	4f e7       	ldi	r20, 0x7F	; 127
    262e:	57 e4       	ldi	r21, 0x47	; 71
    2630:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2634:	18 16       	cp	r1, r24
    2636:	4c f5       	brge	.+82     	; 0x268a <CHECK_Password+0x7fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2638:	69 8d       	ldd	r22, Y+25	; 0x19
    263a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    263c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    263e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2640:	20 e0       	ldi	r18, 0x00	; 0
    2642:	30 e0       	ldi	r19, 0x00	; 0
    2644:	40 e2       	ldi	r20, 0x20	; 32
    2646:	51 e4       	ldi	r21, 0x41	; 65
    2648:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    264c:	dc 01       	movw	r26, r24
    264e:	cb 01       	movw	r24, r22
    2650:	bc 01       	movw	r22, r24
    2652:	cd 01       	movw	r24, r26
    2654:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2658:	dc 01       	movw	r26, r24
    265a:	cb 01       	movw	r24, r22
    265c:	9c 8b       	std	Y+20, r25	; 0x14
    265e:	8b 8b       	std	Y+19, r24	; 0x13
    2660:	0f c0       	rjmp	.+30     	; 0x2680 <CHECK_Password+0x7f4>
    2662:	88 ec       	ldi	r24, 0xC8	; 200
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	9a 8b       	std	Y+18, r25	; 0x12
    2668:	89 8b       	std	Y+17, r24	; 0x11
    266a:	89 89       	ldd	r24, Y+17	; 0x11
    266c:	9a 89       	ldd	r25, Y+18	; 0x12
    266e:	01 97       	sbiw	r24, 0x01	; 1
    2670:	f1 f7       	brne	.-4      	; 0x266e <CHECK_Password+0x7e2>
    2672:	9a 8b       	std	Y+18, r25	; 0x12
    2674:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2676:	8b 89       	ldd	r24, Y+19	; 0x13
    2678:	9c 89       	ldd	r25, Y+20	; 0x14
    267a:	01 97       	sbiw	r24, 0x01	; 1
    267c:	9c 8b       	std	Y+20, r25	; 0x14
    267e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2680:	8b 89       	ldd	r24, Y+19	; 0x13
    2682:	9c 89       	ldd	r25, Y+20	; 0x14
    2684:	00 97       	sbiw	r24, 0x00	; 0
    2686:	69 f7       	brne	.-38     	; 0x2662 <CHECK_Password+0x7d6>
    2688:	90 c0       	rjmp	.+288    	; 0x27aa <CHECK_Password+0x91e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    268a:	6d 89       	ldd	r22, Y+21	; 0x15
    268c:	7e 89       	ldd	r23, Y+22	; 0x16
    268e:	8f 89       	ldd	r24, Y+23	; 0x17
    2690:	98 8d       	ldd	r25, Y+24	; 0x18
    2692:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2696:	dc 01       	movw	r26, r24
    2698:	cb 01       	movw	r24, r22
    269a:	9c 8b       	std	Y+20, r25	; 0x14
    269c:	8b 8b       	std	Y+19, r24	; 0x13
    269e:	8b 89       	ldd	r24, Y+19	; 0x13
    26a0:	9c 89       	ldd	r25, Y+20	; 0x14
    26a2:	98 8b       	std	Y+16, r25	; 0x10
    26a4:	8f 87       	std	Y+15, r24	; 0x0f
    26a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    26a8:	98 89       	ldd	r25, Y+16	; 0x10
    26aa:	01 97       	sbiw	r24, 0x01	; 1
    26ac:	f1 f7       	brne	.-4      	; 0x26aa <CHECK_Password+0x81e>
    26ae:	98 8b       	std	Y+16, r25	; 0x10
    26b0:	8f 87       	std	Y+15, r24	; 0x0f
    26b2:	7b c0       	rjmp	.+246    	; 0x27aa <CHECK_Password+0x91e>
    	_delay_ms(500);
    }
     else {
        LCD_clearScreen();
    26b4:	0e 94 dc 20 	call	0x41b8	; 0x41b8 <LCD_clearScreen>
        LCD_displayStringRowColumn(0, 0, "Password correct");
    26b8:	29 e0       	ldi	r18, 0x09	; 9
    26ba:	31 e0       	ldi	r19, 0x01	; 1
    26bc:	80 e0       	ldi	r24, 0x00	; 0
    26be:	60 e0       	ldi	r22, 0x00	; 0
    26c0:	a9 01       	movw	r20, r18
    26c2:	0e 94 a0 20 	call	0x4140	; 0x4140 <LCD_displayStringRowColumn>
    26c6:	80 e0       	ldi	r24, 0x00	; 0
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	aa e7       	ldi	r26, 0x7A	; 122
    26cc:	b4 e4       	ldi	r27, 0x44	; 68
    26ce:	8b 87       	std	Y+11, r24	; 0x0b
    26d0:	9c 87       	std	Y+12, r25	; 0x0c
    26d2:	ad 87       	std	Y+13, r26	; 0x0d
    26d4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    26d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    26da:	8d 85       	ldd	r24, Y+13	; 0x0d
    26dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    26de:	20 e0       	ldi	r18, 0x00	; 0
    26e0:	30 e0       	ldi	r19, 0x00	; 0
    26e2:	4a ef       	ldi	r20, 0xFA	; 250
    26e4:	54 e4       	ldi	r21, 0x44	; 68
    26e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ea:	dc 01       	movw	r26, r24
    26ec:	cb 01       	movw	r24, r22
    26ee:	8f 83       	std	Y+7, r24	; 0x07
    26f0:	98 87       	std	Y+8, r25	; 0x08
    26f2:	a9 87       	std	Y+9, r26	; 0x09
    26f4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26f6:	6f 81       	ldd	r22, Y+7	; 0x07
    26f8:	78 85       	ldd	r23, Y+8	; 0x08
    26fa:	89 85       	ldd	r24, Y+9	; 0x09
    26fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    26fe:	20 e0       	ldi	r18, 0x00	; 0
    2700:	30 e0       	ldi	r19, 0x00	; 0
    2702:	40 e8       	ldi	r20, 0x80	; 128
    2704:	5f e3       	ldi	r21, 0x3F	; 63
    2706:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    270a:	88 23       	and	r24, r24
    270c:	2c f4       	brge	.+10     	; 0x2718 <CHECK_Password+0x88c>
		__ticks = 1;
    270e:	81 e0       	ldi	r24, 0x01	; 1
    2710:	90 e0       	ldi	r25, 0x00	; 0
    2712:	9e 83       	std	Y+6, r25	; 0x06
    2714:	8d 83       	std	Y+5, r24	; 0x05
    2716:	3f c0       	rjmp	.+126    	; 0x2796 <CHECK_Password+0x90a>
	else if (__tmp > 65535)
    2718:	6f 81       	ldd	r22, Y+7	; 0x07
    271a:	78 85       	ldd	r23, Y+8	; 0x08
    271c:	89 85       	ldd	r24, Y+9	; 0x09
    271e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2720:	20 e0       	ldi	r18, 0x00	; 0
    2722:	3f ef       	ldi	r19, 0xFF	; 255
    2724:	4f e7       	ldi	r20, 0x7F	; 127
    2726:	57 e4       	ldi	r21, 0x47	; 71
    2728:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    272c:	18 16       	cp	r1, r24
    272e:	4c f5       	brge	.+82     	; 0x2782 <CHECK_Password+0x8f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2730:	6b 85       	ldd	r22, Y+11	; 0x0b
    2732:	7c 85       	ldd	r23, Y+12	; 0x0c
    2734:	8d 85       	ldd	r24, Y+13	; 0x0d
    2736:	9e 85       	ldd	r25, Y+14	; 0x0e
    2738:	20 e0       	ldi	r18, 0x00	; 0
    273a:	30 e0       	ldi	r19, 0x00	; 0
    273c:	40 e2       	ldi	r20, 0x20	; 32
    273e:	51 e4       	ldi	r21, 0x41	; 65
    2740:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2744:	dc 01       	movw	r26, r24
    2746:	cb 01       	movw	r24, r22
    2748:	bc 01       	movw	r22, r24
    274a:	cd 01       	movw	r24, r26
    274c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2750:	dc 01       	movw	r26, r24
    2752:	cb 01       	movw	r24, r22
    2754:	9e 83       	std	Y+6, r25	; 0x06
    2756:	8d 83       	std	Y+5, r24	; 0x05
    2758:	0f c0       	rjmp	.+30     	; 0x2778 <CHECK_Password+0x8ec>
    275a:	88 ec       	ldi	r24, 0xC8	; 200
    275c:	90 e0       	ldi	r25, 0x00	; 0
    275e:	9c 83       	std	Y+4, r25	; 0x04
    2760:	8b 83       	std	Y+3, r24	; 0x03
    2762:	8b 81       	ldd	r24, Y+3	; 0x03
    2764:	9c 81       	ldd	r25, Y+4	; 0x04
    2766:	01 97       	sbiw	r24, 0x01	; 1
    2768:	f1 f7       	brne	.-4      	; 0x2766 <CHECK_Password+0x8da>
    276a:	9c 83       	std	Y+4, r25	; 0x04
    276c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    276e:	8d 81       	ldd	r24, Y+5	; 0x05
    2770:	9e 81       	ldd	r25, Y+6	; 0x06
    2772:	01 97       	sbiw	r24, 0x01	; 1
    2774:	9e 83       	std	Y+6, r25	; 0x06
    2776:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2778:	8d 81       	ldd	r24, Y+5	; 0x05
    277a:	9e 81       	ldd	r25, Y+6	; 0x06
    277c:	00 97       	sbiw	r24, 0x00	; 0
    277e:	69 f7       	brne	.-38     	; 0x275a <CHECK_Password+0x8ce>
    2780:	14 c0       	rjmp	.+40     	; 0x27aa <CHECK_Password+0x91e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2782:	6f 81       	ldd	r22, Y+7	; 0x07
    2784:	78 85       	ldd	r23, Y+8	; 0x08
    2786:	89 85       	ldd	r24, Y+9	; 0x09
    2788:	9a 85       	ldd	r25, Y+10	; 0x0a
    278a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    278e:	dc 01       	movw	r26, r24
    2790:	cb 01       	movw	r24, r22
    2792:	9e 83       	std	Y+6, r25	; 0x06
    2794:	8d 83       	std	Y+5, r24	; 0x05
    2796:	8d 81       	ldd	r24, Y+5	; 0x05
    2798:	9e 81       	ldd	r25, Y+6	; 0x06
    279a:	9a 83       	std	Y+2, r25	; 0x02
    279c:	89 83       	std	Y+1, r24	; 0x01
    279e:	89 81       	ldd	r24, Y+1	; 0x01
    27a0:	9a 81       	ldd	r25, Y+2	; 0x02
    27a2:	01 97       	sbiw	r24, 0x01	; 1
    27a4:	f1 f7       	brne	.-4      	; 0x27a2 <CHECK_Password+0x916>
    27a6:	9a 83       	std	Y+2, r25	; 0x02
    27a8:	89 83       	std	Y+1, r24	; 0x01

    }
    /*
     * store response
     */
    g_passFLag=response;
    27aa:	fe 01       	movw	r30, r28
    27ac:	ed 59       	subi	r30, 0x9D	; 157
    27ae:	ff 4f       	sbci	r31, 0xFF	; 255
    27b0:	80 81       	ld	r24, Z
    27b2:	80 93 cd 01 	sts	0x01CD, r24
}
    27b6:	c5 59       	subi	r28, 0x95	; 149
    27b8:	df 4f       	sbci	r29, 0xFF	; 255
    27ba:	0f b6       	in	r0, 0x3f	; 63
    27bc:	f8 94       	cli
    27be:	de bf       	out	0x3e, r29	; 62
    27c0:	0f be       	out	0x3f, r0	; 63
    27c2:	cd bf       	out	0x3d, r28	; 61
    27c4:	cf 91       	pop	r28
    27c6:	df 91       	pop	r29
    27c8:	1f 91       	pop	r17
    27ca:	0f 91       	pop	r16
    27cc:	08 95       	ret

000027ce <DoorLCD>:

/*
 * Description:
 * Function to write door status on screen
 */
void DoorLCD(void){
    27ce:	df 93       	push	r29
    27d0:	cf 93       	push	r28
    27d2:	cd b7       	in	r28, 0x3d	; 61
    27d4:	de b7       	in	r29, 0x3e	; 62
    27d6:	2e 97       	sbiw	r28, 0x0e	; 14
    27d8:	0f b6       	in	r0, 0x3f	; 63
    27da:	f8 94       	cli
    27dc:	de bf       	out	0x3e, r29	; 62
    27de:	0f be       	out	0x3f, r0	; 63
    27e0:	cd bf       	out	0x3d, r28	; 61
	Timer1_init(&Timer1_Configuration);
    27e2:	8e eb       	ldi	r24, 0xBE	; 190
    27e4:	91 e0       	ldi	r25, 0x01	; 1
    27e6:	0e 94 7f 21 	call	0x42fe	; 0x42fe <Timer1_init>
	Timer1_setCallBack(Timer1_CallBackFun);
    27ea:	83 ea       	ldi	r24, 0xA3	; 163
    27ec:	95 e0       	ldi	r25, 0x05	; 5
    27ee:	0e 94 f5 21 	call	0x43ea	; 0x43ea <Timer1_setCallBack>
	LCD_clearScreen();
    27f2:	0e 94 dc 20 	call	0x41b8	; 0x41b8 <LCD_clearScreen>
	/*
	 * display a message to the user that the door in unlocking
	 */
	LCD_displayStringRowColumn(0, 0, "Door is");
    27f6:	2a e1       	ldi	r18, 0x1A	; 26
    27f8:	31 e0       	ldi	r19, 0x01	; 1
    27fa:	80 e0       	ldi	r24, 0x00	; 0
    27fc:	60 e0       	ldi	r22, 0x00	; 0
    27fe:	a9 01       	movw	r20, r18
    2800:	0e 94 a0 20 	call	0x4140	; 0x4140 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "Unlocking..");
    2804:	22 e2       	ldi	r18, 0x22	; 34
    2806:	31 e0       	ldi	r19, 0x01	; 1
    2808:	81 e0       	ldi	r24, 0x01	; 1
    280a:	60 e0       	ldi	r22, 0x00	; 0
    280c:	a9 01       	movw	r20, r18
    280e:	0e 94 a0 20 	call	0x4140	; 0x4140 <LCD_displayStringRowColumn>

	g_countSeconds = 0;
    2812:	10 92 cc 01 	sts	0x01CC, r1
	/*
	 * wait for 15 seconds
	 */
	while (g_countSeconds != 15) {
    2816:	80 91 cc 01 	lds	r24, 0x01CC
    281a:	8f 30       	cpi	r24, 0x0F	; 15
    281c:	e1 f7       	brne	.-8      	; 0x2816 <DoorLCD+0x48>
	}
	/*
	 * display a message to the user that the door is on hold
	 */
	LCD_clearScreen();
    281e:	0e 94 dc 20 	call	0x41b8	; 0x41b8 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "Door is");
    2822:	2a e1       	ldi	r18, 0x1A	; 26
    2824:	31 e0       	ldi	r19, 0x01	; 1
    2826:	80 e0       	ldi	r24, 0x00	; 0
    2828:	60 e0       	ldi	r22, 0x00	; 0
    282a:	a9 01       	movw	r20, r18
    282c:	0e 94 a0 20 	call	0x4140	; 0x4140 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "on hold");
    2830:	2e e2       	ldi	r18, 0x2E	; 46
    2832:	31 e0       	ldi	r19, 0x01	; 1
    2834:	81 e0       	ldi	r24, 0x01	; 1
    2836:	60 e0       	ldi	r22, 0x00	; 0
    2838:	a9 01       	movw	r20, r18
    283a:	0e 94 a0 20 	call	0x4140	; 0x4140 <LCD_displayStringRowColumn>
	g_countSeconds = 0;
    283e:	10 92 cc 01 	sts	0x01CC, r1
	while (g_countSeconds != 3) {
    2842:	80 91 cc 01 	lds	r24, 0x01CC
    2846:	83 30       	cpi	r24, 0x03	; 3
    2848:	e1 f7       	brne	.-8      	; 0x2842 <DoorLCD+0x74>
	}
	LCD_clearScreen();
    284a:	0e 94 dc 20 	call	0x41b8	; 0x41b8 <LCD_clearScreen>
	/*
	 * display a message to the user that the door in locking
	 */
	LCD_displayStringRowColumn(0, 0, "Door is");
    284e:	2a e1       	ldi	r18, 0x1A	; 26
    2850:	31 e0       	ldi	r19, 0x01	; 1
    2852:	80 e0       	ldi	r24, 0x00	; 0
    2854:	60 e0       	ldi	r22, 0x00	; 0
    2856:	a9 01       	movw	r20, r18
    2858:	0e 94 a0 20 	call	0x4140	; 0x4140 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "locking..");
    285c:	26 e3       	ldi	r18, 0x36	; 54
    285e:	31 e0       	ldi	r19, 0x01	; 1
    2860:	81 e0       	ldi	r24, 0x01	; 1
    2862:	60 e0       	ldi	r22, 0x00	; 0
    2864:	a9 01       	movw	r20, r18
    2866:	0e 94 a0 20 	call	0x4140	; 0x4140 <LCD_displayStringRowColumn>
	g_countSeconds = 0;
    286a:	10 92 cc 01 	sts	0x01CC, r1
	while (g_countSeconds != 15) {
    286e:	80 91 cc 01 	lds	r24, 0x01CC
    2872:	8f 30       	cpi	r24, 0x0F	; 15
    2874:	e1 f7       	brne	.-8      	; 0x286e <DoorLCD+0xa0>
	}
	/*
	 * turn off the timer
	 */
	Timer1_deInit();
    2876:	0e 94 d5 21 	call	0x43aa	; 0x43aa <Timer1_deInit>
	g_countSeconds = 0;
    287a:	10 92 cc 01 	sts	0x01CC, r1
	/*
	 * display a message to the user that the door is locked
	 */
	LCD_clearScreen();
    287e:	0e 94 dc 20 	call	0x41b8	; 0x41b8 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "Door is locked");
    2882:	20 e4       	ldi	r18, 0x40	; 64
    2884:	31 e0       	ldi	r19, 0x01	; 1
    2886:	80 e0       	ldi	r24, 0x00	; 0
    2888:	60 e0       	ldi	r22, 0x00	; 0
    288a:	a9 01       	movw	r20, r18
    288c:	0e 94 a0 20 	call	0x4140	; 0x4140 <LCD_displayStringRowColumn>
    2890:	80 e0       	ldi	r24, 0x00	; 0
    2892:	90 e0       	ldi	r25, 0x00	; 0
    2894:	aa ef       	ldi	r26, 0xFA	; 250
    2896:	b3 e4       	ldi	r27, 0x43	; 67
    2898:	8b 87       	std	Y+11, r24	; 0x0b
    289a:	9c 87       	std	Y+12, r25	; 0x0c
    289c:	ad 87       	std	Y+13, r26	; 0x0d
    289e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    28a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    28a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    28a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    28a8:	20 e0       	ldi	r18, 0x00	; 0
    28aa:	30 e0       	ldi	r19, 0x00	; 0
    28ac:	4a ef       	ldi	r20, 0xFA	; 250
    28ae:	54 e4       	ldi	r21, 0x44	; 68
    28b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28b4:	dc 01       	movw	r26, r24
    28b6:	cb 01       	movw	r24, r22
    28b8:	8f 83       	std	Y+7, r24	; 0x07
    28ba:	98 87       	std	Y+8, r25	; 0x08
    28bc:	a9 87       	std	Y+9, r26	; 0x09
    28be:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28c0:	6f 81       	ldd	r22, Y+7	; 0x07
    28c2:	78 85       	ldd	r23, Y+8	; 0x08
    28c4:	89 85       	ldd	r24, Y+9	; 0x09
    28c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    28c8:	20 e0       	ldi	r18, 0x00	; 0
    28ca:	30 e0       	ldi	r19, 0x00	; 0
    28cc:	40 e8       	ldi	r20, 0x80	; 128
    28ce:	5f e3       	ldi	r21, 0x3F	; 63
    28d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28d4:	88 23       	and	r24, r24
    28d6:	2c f4       	brge	.+10     	; 0x28e2 <DoorLCD+0x114>
		__ticks = 1;
    28d8:	81 e0       	ldi	r24, 0x01	; 1
    28da:	90 e0       	ldi	r25, 0x00	; 0
    28dc:	9e 83       	std	Y+6, r25	; 0x06
    28de:	8d 83       	std	Y+5, r24	; 0x05
    28e0:	3f c0       	rjmp	.+126    	; 0x2960 <DoorLCD+0x192>
	else if (__tmp > 65535)
    28e2:	6f 81       	ldd	r22, Y+7	; 0x07
    28e4:	78 85       	ldd	r23, Y+8	; 0x08
    28e6:	89 85       	ldd	r24, Y+9	; 0x09
    28e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    28ea:	20 e0       	ldi	r18, 0x00	; 0
    28ec:	3f ef       	ldi	r19, 0xFF	; 255
    28ee:	4f e7       	ldi	r20, 0x7F	; 127
    28f0:	57 e4       	ldi	r21, 0x47	; 71
    28f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28f6:	18 16       	cp	r1, r24
    28f8:	4c f5       	brge	.+82     	; 0x294c <DoorLCD+0x17e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    28fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    28fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2900:	9e 85       	ldd	r25, Y+14	; 0x0e
    2902:	20 e0       	ldi	r18, 0x00	; 0
    2904:	30 e0       	ldi	r19, 0x00	; 0
    2906:	40 e2       	ldi	r20, 0x20	; 32
    2908:	51 e4       	ldi	r21, 0x41	; 65
    290a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    290e:	dc 01       	movw	r26, r24
    2910:	cb 01       	movw	r24, r22
    2912:	bc 01       	movw	r22, r24
    2914:	cd 01       	movw	r24, r26
    2916:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    291a:	dc 01       	movw	r26, r24
    291c:	cb 01       	movw	r24, r22
    291e:	9e 83       	std	Y+6, r25	; 0x06
    2920:	8d 83       	std	Y+5, r24	; 0x05
    2922:	0f c0       	rjmp	.+30     	; 0x2942 <DoorLCD+0x174>
    2924:	88 ec       	ldi	r24, 0xC8	; 200
    2926:	90 e0       	ldi	r25, 0x00	; 0
    2928:	9c 83       	std	Y+4, r25	; 0x04
    292a:	8b 83       	std	Y+3, r24	; 0x03
    292c:	8b 81       	ldd	r24, Y+3	; 0x03
    292e:	9c 81       	ldd	r25, Y+4	; 0x04
    2930:	01 97       	sbiw	r24, 0x01	; 1
    2932:	f1 f7       	brne	.-4      	; 0x2930 <DoorLCD+0x162>
    2934:	9c 83       	std	Y+4, r25	; 0x04
    2936:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2938:	8d 81       	ldd	r24, Y+5	; 0x05
    293a:	9e 81       	ldd	r25, Y+6	; 0x06
    293c:	01 97       	sbiw	r24, 0x01	; 1
    293e:	9e 83       	std	Y+6, r25	; 0x06
    2940:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2942:	8d 81       	ldd	r24, Y+5	; 0x05
    2944:	9e 81       	ldd	r25, Y+6	; 0x06
    2946:	00 97       	sbiw	r24, 0x00	; 0
    2948:	69 f7       	brne	.-38     	; 0x2924 <DoorLCD+0x156>
    294a:	14 c0       	rjmp	.+40     	; 0x2974 <DoorLCD+0x1a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    294c:	6f 81       	ldd	r22, Y+7	; 0x07
    294e:	78 85       	ldd	r23, Y+8	; 0x08
    2950:	89 85       	ldd	r24, Y+9	; 0x09
    2952:	9a 85       	ldd	r25, Y+10	; 0x0a
    2954:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2958:	dc 01       	movw	r26, r24
    295a:	cb 01       	movw	r24, r22
    295c:	9e 83       	std	Y+6, r25	; 0x06
    295e:	8d 83       	std	Y+5, r24	; 0x05
    2960:	8d 81       	ldd	r24, Y+5	; 0x05
    2962:	9e 81       	ldd	r25, Y+6	; 0x06
    2964:	9a 83       	std	Y+2, r25	; 0x02
    2966:	89 83       	std	Y+1, r24	; 0x01
    2968:	89 81       	ldd	r24, Y+1	; 0x01
    296a:	9a 81       	ldd	r25, Y+2	; 0x02
    296c:	01 97       	sbiw	r24, 0x01	; 1
    296e:	f1 f7       	brne	.-4      	; 0x296c <DoorLCD+0x19e>
    2970:	9a 83       	std	Y+2, r25	; 0x02
    2972:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);

}
    2974:	2e 96       	adiw	r28, 0x0e	; 14
    2976:	0f b6       	in	r0, 0x3f	; 63
    2978:	f8 94       	cli
    297a:	de bf       	out	0x3e, r29	; 62
    297c:	0f be       	out	0x3f, r0	; 63
    297e:	cd bf       	out	0x3d, r28	; 61
    2980:	cf 91       	pop	r28
    2982:	df 91       	pop	r29
    2984:	08 95       	ret

00002986 <BuzzerLCD>:

/*
 * Description:
 * Function to write error message after password entered 3 times wrong
 */
void BuzzerLCD(void) {
    2986:	df 93       	push	r29
    2988:	cf 93       	push	r28
    298a:	cd b7       	in	r28, 0x3d	; 61
    298c:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    298e:	0e 94 dc 20 	call	0x41b8	; 0x41b8 <LCD_clearScreen>
	/*
	 * display error message
	 */
	LCD_displayStringRowColumn(0, 0, "Pass Entered");
    2992:	2f e4       	ldi	r18, 0x4F	; 79
    2994:	31 e0       	ldi	r19, 0x01	; 1
    2996:	80 e0       	ldi	r24, 0x00	; 0
    2998:	60 e0       	ldi	r22, 0x00	; 0
    299a:	a9 01       	movw	r20, r18
    299c:	0e 94 a0 20 	call	0x4140	; 0x4140 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "3 times wrong!");
    29a0:	2c e5       	ldi	r18, 0x5C	; 92
    29a2:	31 e0       	ldi	r19, 0x01	; 1
    29a4:	81 e0       	ldi	r24, 0x01	; 1
    29a6:	60 e0       	ldi	r22, 0x00	; 0
    29a8:	a9 01       	movw	r20, r18
    29aa:	0e 94 a0 20 	call	0x4140	; 0x4140 <LCD_displayStringRowColumn>
	/*
	 * start the timer and count 60 sec
	 */
	Timer1_init(&Timer1_Configuration);
    29ae:	8e eb       	ldi	r24, 0xBE	; 190
    29b0:	91 e0       	ldi	r25, 0x01	; 1
    29b2:	0e 94 7f 21 	call	0x42fe	; 0x42fe <Timer1_init>
	Timer1_setCallBack(Timer1_CallBackFun);
    29b6:	83 ea       	ldi	r24, 0xA3	; 163
    29b8:	95 e0       	ldi	r25, 0x05	; 5
    29ba:	0e 94 f5 21 	call	0x43ea	; 0x43ea <Timer1_setCallBack>
	g_countSeconds = 0;
    29be:	10 92 cc 01 	sts	0x01CC, r1
	/*
	 * display ERROR message for 60 sec
	 */
	while (g_countSeconds != 60) {
    29c2:	80 91 cc 01 	lds	r24, 0x01CC
    29c6:	8c 33       	cpi	r24, 0x3C	; 60
    29c8:	e1 f7       	brne	.-8      	; 0x29c2 <BuzzerLCD+0x3c>
	}
	g_countSeconds = 0;
    29ca:	10 92 cc 01 	sts	0x01CC, r1
	/*
	 * stop the timer
	 */
	Timer1_deInit();
    29ce:	0e 94 d5 21 	call	0x43aa	; 0x43aa <Timer1_deInit>
}
    29d2:	cf 91       	pop	r28
    29d4:	df 91       	pop	r29
    29d6:	08 95       	ret

000029d8 <main>:


int main(){
    29d8:	df 93       	push	r29
    29da:	cf 93       	push	r28
    29dc:	cd b7       	in	r28, 0x3d	; 61
    29de:	de b7       	in	r29, 0x3e	; 62
    29e0:	e9 97       	sbiw	r28, 0x39	; 57
    29e2:	0f b6       	in	r0, 0x3f	; 63
    29e4:	f8 94       	cli
    29e6:	de bf       	out	0x3e, r29	; 62
    29e8:	0f be       	out	0x3f, r0	; 63
    29ea:	cd bf       	out	0x3d, r28	; 61
	/*
	 * Enable interrupts register
	 */
	SREG |= (1 << 7);
    29ec:	af e5       	ldi	r26, 0x5F	; 95
    29ee:	b0 e0       	ldi	r27, 0x00	; 0
    29f0:	ef e5       	ldi	r30, 0x5F	; 95
    29f2:	f0 e0       	ldi	r31, 0x00	; 0
    29f4:	80 81       	ld	r24, Z
    29f6:	80 68       	ori	r24, 0x80	; 128
    29f8:	8c 93       	st	X, r24
	/*
	 * try to count number of tries user takes to enter password
	 */
	uint8 try;
	uint8 key=0;
    29fa:	1b a6       	std	Y+43, r1	; 0x2b
	 * 		disable parity checking
	 *		one bit for stop bit
	 *		baud rate = 9600,
	 *		peed double speed
	 */
	UART_ConfigType UART_Configuration= {UART_8_BIT_DATA,DISABLED,ONE_BIT,UART_BAUD_RATE_9600,DOUBLE_SPEED};
    29fc:	ce 01       	movw	r24, r28
    29fe:	8d 96       	adiw	r24, 0x2d	; 45
    2a00:	9e ab       	std	Y+54, r25	; 0x36
    2a02:	8d ab       	std	Y+53, r24	; 0x35
    2a04:	e4 ec       	ldi	r30, 0xC4	; 196
    2a06:	f1 e0       	ldi	r31, 0x01	; 1
    2a08:	f8 af       	std	Y+56, r31	; 0x38
    2a0a:	ef ab       	std	Y+55, r30	; 0x37
    2a0c:	f8 e0       	ldi	r31, 0x08	; 8
    2a0e:	f9 af       	std	Y+57, r31	; 0x39
    2a10:	ef a9       	ldd	r30, Y+55	; 0x37
    2a12:	f8 ad       	ldd	r31, Y+56	; 0x38
    2a14:	00 80       	ld	r0, Z
    2a16:	8f a9       	ldd	r24, Y+55	; 0x37
    2a18:	98 ad       	ldd	r25, Y+56	; 0x38
    2a1a:	01 96       	adiw	r24, 0x01	; 1
    2a1c:	98 af       	std	Y+56, r25	; 0x38
    2a1e:	8f ab       	std	Y+55, r24	; 0x37
    2a20:	ed a9       	ldd	r30, Y+53	; 0x35
    2a22:	fe a9       	ldd	r31, Y+54	; 0x36
    2a24:	00 82       	st	Z, r0
    2a26:	8d a9       	ldd	r24, Y+53	; 0x35
    2a28:	9e a9       	ldd	r25, Y+54	; 0x36
    2a2a:	01 96       	adiw	r24, 0x01	; 1
    2a2c:	9e ab       	std	Y+54, r25	; 0x36
    2a2e:	8d ab       	std	Y+53, r24	; 0x35
    2a30:	99 ad       	ldd	r25, Y+57	; 0x39
    2a32:	91 50       	subi	r25, 0x01	; 1
    2a34:	99 af       	std	Y+57, r25	; 0x39
    2a36:	e9 ad       	ldd	r30, Y+57	; 0x39
    2a38:	ee 23       	and	r30, r30
    2a3a:	51 f7       	brne	.-44     	; 0x2a10 <main+0x38>

	/*
	 * init lcd
	 */
	LCD_init();
    2a3c:	0e 94 bb 1b 	call	0x3776	; 0x3776 <LCD_init>
	/*
	 * init Uart
	 */
	UART_init(&UART_Configuration);
    2a40:	ce 01       	movw	r24, r28
    2a42:	8d 96       	adiw	r24, 0x2d	; 45
    2a44:	0e 94 07 22 	call	0x440e	; 0x440e <UART_init>
	/*
	 * Send byte to MC2 to inform him that MC1 is ready
	 */
	UART_sendByte(MC1_READY);
    2a48:	80 e1       	ldi	r24, 0x10	; 16
    2a4a:	0e 94 f9 22 	call	0x45f2	; 0x45f2 <UART_sendByte>
	/*
	 * init Timer1
	 */
	Timer1_init(&Timer1_Configuration);
    2a4e:	8e eb       	ldi	r24, 0xBE	; 190
    2a50:	91 e0       	ldi	r25, 0x01	; 1
    2a52:	0e 94 7f 21 	call	0x42fe	; 0x42fe <Timer1_init>
	/*
	 * set call back for timer 1
	 */
	Timer1_setCallBack(Timer1_CallBackFun);
    2a56:	83 ea       	ldi	r24, 0xA3	; 163
    2a58:	95 e0       	ldi	r25, 0x05	; 5
    2a5a:	0e 94 f5 21 	call	0x43ea	; 0x43ea <Timer1_setCallBack>


	LCD_displayStringRowColumn(0, 0, "Welcome to our");
    2a5e:	2b e6       	ldi	r18, 0x6B	; 107
    2a60:	31 e0       	ldi	r19, 0x01	; 1
    2a62:	80 e0       	ldi	r24, 0x00	; 0
    2a64:	60 e0       	ldi	r22, 0x00	; 0
    2a66:	a9 01       	movw	r20, r18
    2a68:	0e 94 a0 20 	call	0x4140	; 0x4140 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "door lock system");
    2a6c:	2a e7       	ldi	r18, 0x7A	; 122
    2a6e:	31 e0       	ldi	r19, 0x01	; 1
    2a70:	81 e0       	ldi	r24, 0x01	; 1
    2a72:	60 e0       	ldi	r22, 0x00	; 0
    2a74:	a9 01       	movw	r20, r18
    2a76:	0e 94 a0 20 	call	0x4140	; 0x4140 <LCD_displayStringRowColumn>
    2a7a:	80 e0       	ldi	r24, 0x00	; 0
    2a7c:	90 e0       	ldi	r25, 0x00	; 0
    2a7e:	aa e7       	ldi	r26, 0x7A	; 122
    2a80:	b4 e4       	ldi	r27, 0x44	; 68
    2a82:	8f a3       	std	Y+39, r24	; 0x27
    2a84:	98 a7       	std	Y+40, r25	; 0x28
    2a86:	a9 a7       	std	Y+41, r26	; 0x29
    2a88:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a8a:	6f a1       	ldd	r22, Y+39	; 0x27
    2a8c:	78 a5       	ldd	r23, Y+40	; 0x28
    2a8e:	89 a5       	ldd	r24, Y+41	; 0x29
    2a90:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a92:	20 e0       	ldi	r18, 0x00	; 0
    2a94:	30 e0       	ldi	r19, 0x00	; 0
    2a96:	4a ef       	ldi	r20, 0xFA	; 250
    2a98:	54 e4       	ldi	r21, 0x44	; 68
    2a9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a9e:	dc 01       	movw	r26, r24
    2aa0:	cb 01       	movw	r24, r22
    2aa2:	8b a3       	std	Y+35, r24	; 0x23
    2aa4:	9c a3       	std	Y+36, r25	; 0x24
    2aa6:	ad a3       	std	Y+37, r26	; 0x25
    2aa8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2aaa:	6b a1       	ldd	r22, Y+35	; 0x23
    2aac:	7c a1       	ldd	r23, Y+36	; 0x24
    2aae:	8d a1       	ldd	r24, Y+37	; 0x25
    2ab0:	9e a1       	ldd	r25, Y+38	; 0x26
    2ab2:	20 e0       	ldi	r18, 0x00	; 0
    2ab4:	30 e0       	ldi	r19, 0x00	; 0
    2ab6:	40 e8       	ldi	r20, 0x80	; 128
    2ab8:	5f e3       	ldi	r21, 0x3F	; 63
    2aba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2abe:	88 23       	and	r24, r24
    2ac0:	2c f4       	brge	.+10     	; 0x2acc <main+0xf4>
		__ticks = 1;
    2ac2:	81 e0       	ldi	r24, 0x01	; 1
    2ac4:	90 e0       	ldi	r25, 0x00	; 0
    2ac6:	9a a3       	std	Y+34, r25	; 0x22
    2ac8:	89 a3       	std	Y+33, r24	; 0x21
    2aca:	3f c0       	rjmp	.+126    	; 0x2b4a <main+0x172>
	else if (__tmp > 65535)
    2acc:	6b a1       	ldd	r22, Y+35	; 0x23
    2ace:	7c a1       	ldd	r23, Y+36	; 0x24
    2ad0:	8d a1       	ldd	r24, Y+37	; 0x25
    2ad2:	9e a1       	ldd	r25, Y+38	; 0x26
    2ad4:	20 e0       	ldi	r18, 0x00	; 0
    2ad6:	3f ef       	ldi	r19, 0xFF	; 255
    2ad8:	4f e7       	ldi	r20, 0x7F	; 127
    2ada:	57 e4       	ldi	r21, 0x47	; 71
    2adc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ae0:	18 16       	cp	r1, r24
    2ae2:	4c f5       	brge	.+82     	; 0x2b36 <main+0x15e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ae4:	6f a1       	ldd	r22, Y+39	; 0x27
    2ae6:	78 a5       	ldd	r23, Y+40	; 0x28
    2ae8:	89 a5       	ldd	r24, Y+41	; 0x29
    2aea:	9a a5       	ldd	r25, Y+42	; 0x2a
    2aec:	20 e0       	ldi	r18, 0x00	; 0
    2aee:	30 e0       	ldi	r19, 0x00	; 0
    2af0:	40 e2       	ldi	r20, 0x20	; 32
    2af2:	51 e4       	ldi	r21, 0x41	; 65
    2af4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2af8:	dc 01       	movw	r26, r24
    2afa:	cb 01       	movw	r24, r22
    2afc:	bc 01       	movw	r22, r24
    2afe:	cd 01       	movw	r24, r26
    2b00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b04:	dc 01       	movw	r26, r24
    2b06:	cb 01       	movw	r24, r22
    2b08:	9a a3       	std	Y+34, r25	; 0x22
    2b0a:	89 a3       	std	Y+33, r24	; 0x21
    2b0c:	0f c0       	rjmp	.+30     	; 0x2b2c <main+0x154>
    2b0e:	88 ec       	ldi	r24, 0xC8	; 200
    2b10:	90 e0       	ldi	r25, 0x00	; 0
    2b12:	98 a3       	std	Y+32, r25	; 0x20
    2b14:	8f 8f       	std	Y+31, r24	; 0x1f
    2b16:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b18:	98 a1       	ldd	r25, Y+32	; 0x20
    2b1a:	01 97       	sbiw	r24, 0x01	; 1
    2b1c:	f1 f7       	brne	.-4      	; 0x2b1a <main+0x142>
    2b1e:	98 a3       	std	Y+32, r25	; 0x20
    2b20:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b22:	89 a1       	ldd	r24, Y+33	; 0x21
    2b24:	9a a1       	ldd	r25, Y+34	; 0x22
    2b26:	01 97       	sbiw	r24, 0x01	; 1
    2b28:	9a a3       	std	Y+34, r25	; 0x22
    2b2a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b2c:	89 a1       	ldd	r24, Y+33	; 0x21
    2b2e:	9a a1       	ldd	r25, Y+34	; 0x22
    2b30:	00 97       	sbiw	r24, 0x00	; 0
    2b32:	69 f7       	brne	.-38     	; 0x2b0e <main+0x136>
    2b34:	14 c0       	rjmp	.+40     	; 0x2b5e <main+0x186>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b36:	6b a1       	ldd	r22, Y+35	; 0x23
    2b38:	7c a1       	ldd	r23, Y+36	; 0x24
    2b3a:	8d a1       	ldd	r24, Y+37	; 0x25
    2b3c:	9e a1       	ldd	r25, Y+38	; 0x26
    2b3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b42:	dc 01       	movw	r26, r24
    2b44:	cb 01       	movw	r24, r22
    2b46:	9a a3       	std	Y+34, r25	; 0x22
    2b48:	89 a3       	std	Y+33, r24	; 0x21
    2b4a:	89 a1       	ldd	r24, Y+33	; 0x21
    2b4c:	9a a1       	ldd	r25, Y+34	; 0x22
    2b4e:	9e 8f       	std	Y+30, r25	; 0x1e
    2b50:	8d 8f       	std	Y+29, r24	; 0x1d
    2b52:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b54:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b56:	01 97       	sbiw	r24, 0x01	; 1
    2b58:	f1 f7       	brne	.-4      	; 0x2b56 <main+0x17e>
    2b5a:	9e 8f       	std	Y+30, r25	; 0x1e
    2b5c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1000);

	/*
	 * create password for the door for first time
	 */
	New_Password();
    2b5e:	0e 94 af 05 	call	0xb5e	; 0xb5e <New_Password>


	while(1){
		LCD_clearScreen();
    2b62:	0e 94 dc 20 	call	0x41b8	; 0x41b8 <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 0, "+: Open Door");
    2b66:	2b e8       	ldi	r18, 0x8B	; 139
    2b68:	31 e0       	ldi	r19, 0x01	; 1
    2b6a:	80 e0       	ldi	r24, 0x00	; 0
    2b6c:	60 e0       	ldi	r22, 0x00	; 0
    2b6e:	a9 01       	movw	r20, r18
    2b70:	0e 94 a0 20 	call	0x4140	; 0x4140 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1, 0, "-: Change pass");
    2b74:	28 e9       	ldi	r18, 0x98	; 152
    2b76:	31 e0       	ldi	r19, 0x01	; 1
    2b78:	81 e0       	ldi	r24, 0x01	; 1
    2b7a:	60 e0       	ldi	r22, 0x00	; 0
    2b7c:	a9 01       	movw	r20, r18
    2b7e:	0e 94 a0 20 	call	0x4140	; 0x4140 <LCD_displayStringRowColumn>
    2b82:	80 e0       	ldi	r24, 0x00	; 0
    2b84:	90 e0       	ldi	r25, 0x00	; 0
    2b86:	aa ef       	ldi	r26, 0xFA	; 250
    2b88:	b3 e4       	ldi	r27, 0x43	; 67
    2b8a:	89 8f       	std	Y+25, r24	; 0x19
    2b8c:	9a 8f       	std	Y+26, r25	; 0x1a
    2b8e:	ab 8f       	std	Y+27, r26	; 0x1b
    2b90:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b92:	69 8d       	ldd	r22, Y+25	; 0x19
    2b94:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b96:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b98:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b9a:	20 e0       	ldi	r18, 0x00	; 0
    2b9c:	30 e0       	ldi	r19, 0x00	; 0
    2b9e:	4a ef       	ldi	r20, 0xFA	; 250
    2ba0:	54 e4       	ldi	r21, 0x44	; 68
    2ba2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ba6:	dc 01       	movw	r26, r24
    2ba8:	cb 01       	movw	r24, r22
    2baa:	8d 8b       	std	Y+21, r24	; 0x15
    2bac:	9e 8b       	std	Y+22, r25	; 0x16
    2bae:	af 8b       	std	Y+23, r26	; 0x17
    2bb0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2bb2:	6d 89       	ldd	r22, Y+21	; 0x15
    2bb4:	7e 89       	ldd	r23, Y+22	; 0x16
    2bb6:	8f 89       	ldd	r24, Y+23	; 0x17
    2bb8:	98 8d       	ldd	r25, Y+24	; 0x18
    2bba:	20 e0       	ldi	r18, 0x00	; 0
    2bbc:	30 e0       	ldi	r19, 0x00	; 0
    2bbe:	40 e8       	ldi	r20, 0x80	; 128
    2bc0:	5f e3       	ldi	r21, 0x3F	; 63
    2bc2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bc6:	88 23       	and	r24, r24
    2bc8:	2c f4       	brge	.+10     	; 0x2bd4 <main+0x1fc>
		__ticks = 1;
    2bca:	81 e0       	ldi	r24, 0x01	; 1
    2bcc:	90 e0       	ldi	r25, 0x00	; 0
    2bce:	9c 8b       	std	Y+20, r25	; 0x14
    2bd0:	8b 8b       	std	Y+19, r24	; 0x13
    2bd2:	3f c0       	rjmp	.+126    	; 0x2c52 <main+0x27a>
	else if (__tmp > 65535)
    2bd4:	6d 89       	ldd	r22, Y+21	; 0x15
    2bd6:	7e 89       	ldd	r23, Y+22	; 0x16
    2bd8:	8f 89       	ldd	r24, Y+23	; 0x17
    2bda:	98 8d       	ldd	r25, Y+24	; 0x18
    2bdc:	20 e0       	ldi	r18, 0x00	; 0
    2bde:	3f ef       	ldi	r19, 0xFF	; 255
    2be0:	4f e7       	ldi	r20, 0x7F	; 127
    2be2:	57 e4       	ldi	r21, 0x47	; 71
    2be4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2be8:	18 16       	cp	r1, r24
    2bea:	4c f5       	brge	.+82     	; 0x2c3e <main+0x266>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bec:	69 8d       	ldd	r22, Y+25	; 0x19
    2bee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2bf0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bf2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bf4:	20 e0       	ldi	r18, 0x00	; 0
    2bf6:	30 e0       	ldi	r19, 0x00	; 0
    2bf8:	40 e2       	ldi	r20, 0x20	; 32
    2bfa:	51 e4       	ldi	r21, 0x41	; 65
    2bfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c00:	dc 01       	movw	r26, r24
    2c02:	cb 01       	movw	r24, r22
    2c04:	bc 01       	movw	r22, r24
    2c06:	cd 01       	movw	r24, r26
    2c08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c0c:	dc 01       	movw	r26, r24
    2c0e:	cb 01       	movw	r24, r22
    2c10:	9c 8b       	std	Y+20, r25	; 0x14
    2c12:	8b 8b       	std	Y+19, r24	; 0x13
    2c14:	0f c0       	rjmp	.+30     	; 0x2c34 <main+0x25c>
    2c16:	88 ec       	ldi	r24, 0xC8	; 200
    2c18:	90 e0       	ldi	r25, 0x00	; 0
    2c1a:	9a 8b       	std	Y+18, r25	; 0x12
    2c1c:	89 8b       	std	Y+17, r24	; 0x11
    2c1e:	89 89       	ldd	r24, Y+17	; 0x11
    2c20:	9a 89       	ldd	r25, Y+18	; 0x12
    2c22:	01 97       	sbiw	r24, 0x01	; 1
    2c24:	f1 f7       	brne	.-4      	; 0x2c22 <main+0x24a>
    2c26:	9a 8b       	std	Y+18, r25	; 0x12
    2c28:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c2a:	8b 89       	ldd	r24, Y+19	; 0x13
    2c2c:	9c 89       	ldd	r25, Y+20	; 0x14
    2c2e:	01 97       	sbiw	r24, 0x01	; 1
    2c30:	9c 8b       	std	Y+20, r25	; 0x14
    2c32:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c34:	8b 89       	ldd	r24, Y+19	; 0x13
    2c36:	9c 89       	ldd	r25, Y+20	; 0x14
    2c38:	00 97       	sbiw	r24, 0x00	; 0
    2c3a:	69 f7       	brne	.-38     	; 0x2c16 <main+0x23e>
    2c3c:	14 c0       	rjmp	.+40     	; 0x2c66 <main+0x28e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c3e:	6d 89       	ldd	r22, Y+21	; 0x15
    2c40:	7e 89       	ldd	r23, Y+22	; 0x16
    2c42:	8f 89       	ldd	r24, Y+23	; 0x17
    2c44:	98 8d       	ldd	r25, Y+24	; 0x18
    2c46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c4a:	dc 01       	movw	r26, r24
    2c4c:	cb 01       	movw	r24, r22
    2c4e:	9c 8b       	std	Y+20, r25	; 0x14
    2c50:	8b 8b       	std	Y+19, r24	; 0x13
    2c52:	8b 89       	ldd	r24, Y+19	; 0x13
    2c54:	9c 89       	ldd	r25, Y+20	; 0x14
    2c56:	98 8b       	std	Y+16, r25	; 0x10
    2c58:	8f 87       	std	Y+15, r24	; 0x0f
    2c5a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c5c:	98 89       	ldd	r25, Y+16	; 0x10
    2c5e:	01 97       	sbiw	r24, 0x01	; 1
    2c60:	f1 f7       	brne	.-4      	; 0x2c5e <main+0x286>
    2c62:	98 8b       	std	Y+16, r25	; 0x10
    2c64:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(500);
		while (1) {
			key = KEYPAD_getPressedKey();
    2c66:	0e 94 30 1a 	call	0x3460	; 0x3460 <KEYPAD_getPressedKey>
    2c6a:	8b a7       	std	Y+43, r24	; 0x2b
			if (key == '+' || key == '-')
    2c6c:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c6e:	8b 32       	cpi	r24, 0x2B	; 43
    2c70:	19 f0       	breq	.+6      	; 0x2c78 <main+0x2a0>
    2c72:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c74:	8d 32       	cpi	r24, 0x2D	; 45
    2c76:	b9 f7       	brne	.-18     	; 0x2c66 <main+0x28e>
				break;
		}
		LCD_clearScreen();
    2c78:	0e 94 dc 20 	call	0x41b8	; 0x41b8 <LCD_clearScreen>

		for (try = 0; try < 3; try++) {
    2c7c:	1c a6       	std	Y+44, r1	; 0x2c
    2c7e:	8c c0       	rjmp	.+280    	; 0x2d98 <main+0x3c0>
			/*
			 * send to Control_ECU PASSWORD command to
			 * check if it match to the password in EEROM
			 * or not
			 */
			UART_sendByte(PASSWORD);
    2c80:	86 ea       	ldi	r24, 0xA6	; 166
    2c82:	0e 94 f9 22 	call	0x45f2	; 0x45f2 <UART_sendByte>
			LCD_moveCursor(1, 6);
    2c86:	81 e0       	ldi	r24, 0x01	; 1
    2c88:	66 e0       	ldi	r22, 0x06	; 6
    2c8a:	0e 94 5e 20 	call	0x40bc	; 0x40bc <LCD_moveCursor>
			CHECK_Password();
    2c8e:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <CHECK_Password>
			/*
			 * if the password is right break the loop
			 */
			if (g_passFLag == PASSWORD_MATCH) {
    2c92:	80 91 cd 01 	lds	r24, 0x01CD
    2c96:	87 3a       	cpi	r24, 0xA7	; 167
    2c98:	09 f4       	brne	.+2      	; 0x2c9c <main+0x2c4>
    2c9a:	82 c0       	rjmp	.+260    	; 0x2da0 <main+0x3c8>
				break;
			};
			LCD_clearScreen();
    2c9c:	0e 94 dc 20 	call	0x41b8	; 0x41b8 <LCD_clearScreen>
			LCD_displayStringRowColumn(0, 0, "WRONG PASSWORD");
    2ca0:	27 ea       	ldi	r18, 0xA7	; 167
    2ca2:	31 e0       	ldi	r19, 0x01	; 1
    2ca4:	80 e0       	ldi	r24, 0x00	; 0
    2ca6:	60 e0       	ldi	r22, 0x00	; 0
    2ca8:	a9 01       	movw	r20, r18
    2caa:	0e 94 a0 20 	call	0x4140	; 0x4140 <LCD_displayStringRowColumn>
    2cae:	80 e0       	ldi	r24, 0x00	; 0
    2cb0:	90 e0       	ldi	r25, 0x00	; 0
    2cb2:	aa e7       	ldi	r26, 0x7A	; 122
    2cb4:	b4 e4       	ldi	r27, 0x44	; 68
    2cb6:	8b 87       	std	Y+11, r24	; 0x0b
    2cb8:	9c 87       	std	Y+12, r25	; 0x0c
    2cba:	ad 87       	std	Y+13, r26	; 0x0d
    2cbc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cbe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cc0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cc2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cc4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cc6:	20 e0       	ldi	r18, 0x00	; 0
    2cc8:	30 e0       	ldi	r19, 0x00	; 0
    2cca:	4a ef       	ldi	r20, 0xFA	; 250
    2ccc:	54 e4       	ldi	r21, 0x44	; 68
    2cce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cd2:	dc 01       	movw	r26, r24
    2cd4:	cb 01       	movw	r24, r22
    2cd6:	8f 83       	std	Y+7, r24	; 0x07
    2cd8:	98 87       	std	Y+8, r25	; 0x08
    2cda:	a9 87       	std	Y+9, r26	; 0x09
    2cdc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2cde:	6f 81       	ldd	r22, Y+7	; 0x07
    2ce0:	78 85       	ldd	r23, Y+8	; 0x08
    2ce2:	89 85       	ldd	r24, Y+9	; 0x09
    2ce4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ce6:	20 e0       	ldi	r18, 0x00	; 0
    2ce8:	30 e0       	ldi	r19, 0x00	; 0
    2cea:	40 e8       	ldi	r20, 0x80	; 128
    2cec:	5f e3       	ldi	r21, 0x3F	; 63
    2cee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cf2:	88 23       	and	r24, r24
    2cf4:	2c f4       	brge	.+10     	; 0x2d00 <main+0x328>
		__ticks = 1;
    2cf6:	81 e0       	ldi	r24, 0x01	; 1
    2cf8:	90 e0       	ldi	r25, 0x00	; 0
    2cfa:	9e 83       	std	Y+6, r25	; 0x06
    2cfc:	8d 83       	std	Y+5, r24	; 0x05
    2cfe:	3f c0       	rjmp	.+126    	; 0x2d7e <main+0x3a6>
	else if (__tmp > 65535)
    2d00:	6f 81       	ldd	r22, Y+7	; 0x07
    2d02:	78 85       	ldd	r23, Y+8	; 0x08
    2d04:	89 85       	ldd	r24, Y+9	; 0x09
    2d06:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d08:	20 e0       	ldi	r18, 0x00	; 0
    2d0a:	3f ef       	ldi	r19, 0xFF	; 255
    2d0c:	4f e7       	ldi	r20, 0x7F	; 127
    2d0e:	57 e4       	ldi	r21, 0x47	; 71
    2d10:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d14:	18 16       	cp	r1, r24
    2d16:	4c f5       	brge	.+82     	; 0x2d6a <main+0x392>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d18:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d1a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d20:	20 e0       	ldi	r18, 0x00	; 0
    2d22:	30 e0       	ldi	r19, 0x00	; 0
    2d24:	40 e2       	ldi	r20, 0x20	; 32
    2d26:	51 e4       	ldi	r21, 0x41	; 65
    2d28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d2c:	dc 01       	movw	r26, r24
    2d2e:	cb 01       	movw	r24, r22
    2d30:	bc 01       	movw	r22, r24
    2d32:	cd 01       	movw	r24, r26
    2d34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d38:	dc 01       	movw	r26, r24
    2d3a:	cb 01       	movw	r24, r22
    2d3c:	9e 83       	std	Y+6, r25	; 0x06
    2d3e:	8d 83       	std	Y+5, r24	; 0x05
    2d40:	0f c0       	rjmp	.+30     	; 0x2d60 <main+0x388>
    2d42:	88 ec       	ldi	r24, 0xC8	; 200
    2d44:	90 e0       	ldi	r25, 0x00	; 0
    2d46:	9c 83       	std	Y+4, r25	; 0x04
    2d48:	8b 83       	std	Y+3, r24	; 0x03
    2d4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d4c:	9c 81       	ldd	r25, Y+4	; 0x04
    2d4e:	01 97       	sbiw	r24, 0x01	; 1
    2d50:	f1 f7       	brne	.-4      	; 0x2d4e <main+0x376>
    2d52:	9c 83       	std	Y+4, r25	; 0x04
    2d54:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d56:	8d 81       	ldd	r24, Y+5	; 0x05
    2d58:	9e 81       	ldd	r25, Y+6	; 0x06
    2d5a:	01 97       	sbiw	r24, 0x01	; 1
    2d5c:	9e 83       	std	Y+6, r25	; 0x06
    2d5e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d60:	8d 81       	ldd	r24, Y+5	; 0x05
    2d62:	9e 81       	ldd	r25, Y+6	; 0x06
    2d64:	00 97       	sbiw	r24, 0x00	; 0
    2d66:	69 f7       	brne	.-38     	; 0x2d42 <main+0x36a>
    2d68:	14 c0       	rjmp	.+40     	; 0x2d92 <main+0x3ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d6a:	6f 81       	ldd	r22, Y+7	; 0x07
    2d6c:	78 85       	ldd	r23, Y+8	; 0x08
    2d6e:	89 85       	ldd	r24, Y+9	; 0x09
    2d70:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d76:	dc 01       	movw	r26, r24
    2d78:	cb 01       	movw	r24, r22
    2d7a:	9e 83       	std	Y+6, r25	; 0x06
    2d7c:	8d 83       	std	Y+5, r24	; 0x05
    2d7e:	8d 81       	ldd	r24, Y+5	; 0x05
    2d80:	9e 81       	ldd	r25, Y+6	; 0x06
    2d82:	9a 83       	std	Y+2, r25	; 0x02
    2d84:	89 83       	std	Y+1, r24	; 0x01
    2d86:	89 81       	ldd	r24, Y+1	; 0x01
    2d88:	9a 81       	ldd	r25, Y+2	; 0x02
    2d8a:	01 97       	sbiw	r24, 0x01	; 1
    2d8c:	f1 f7       	brne	.-4      	; 0x2d8a <main+0x3b2>
    2d8e:	9a 83       	std	Y+2, r25	; 0x02
    2d90:	89 83       	std	Y+1, r24	; 0x01
			if (key == '+' || key == '-')
				break;
		}
		LCD_clearScreen();

		for (try = 0; try < 3; try++) {
    2d92:	8c a5       	ldd	r24, Y+44	; 0x2c
    2d94:	8f 5f       	subi	r24, 0xFF	; 255
    2d96:	8c a7       	std	Y+44, r24	; 0x2c
    2d98:	8c a5       	ldd	r24, Y+44	; 0x2c
    2d9a:	83 30       	cpi	r24, 0x03	; 3
    2d9c:	08 f4       	brcc	.+2      	; 0x2da0 <main+0x3c8>
    2d9e:	70 cf       	rjmp	.-288    	; 0x2c80 <main+0x2a8>
		}
		/*
		 * if the password doesn't match for 3 times
		 * send to mc2 OPEN_BUZZER byte to open buzzer
		*/
		if (g_passFLag == PASSWORD_DOESNT_MATCH) {
    2da0:	80 91 cd 01 	lds	r24, 0x01CD
    2da4:	88 3a       	cpi	r24, 0xA8	; 168
    2da6:	31 f4       	brne	.+12     	; 0x2db4 <main+0x3dc>
				UART_sendByte(OPEN_BUZZER);
    2da8:	85 ea       	ldi	r24, 0xA5	; 165
    2daa:	0e 94 f9 22 	call	0x45f2	; 0x45f2 <UART_sendByte>
				BuzzerLCD();
    2dae:	0e 94 c3 14 	call	0x2986	; 0x2986 <BuzzerLCD>
    2db2:	d7 ce       	rjmp	.-594    	; 0x2b62 <main+0x18a>
		}
		/*
		 * if the password match
		 * check for user choice
		*/
		else if(g_passFLag == PASSWORD_MATCH){
    2db4:	80 91 cd 01 	lds	r24, 0x01CD
    2db8:	87 3a       	cpi	r24, 0xA7	; 167
    2dba:	09 f0       	breq	.+2      	; 0x2dbe <main+0x3e6>
    2dbc:	d2 ce       	rjmp	.-604    	; 0x2b62 <main+0x18a>
			/*
			 * if the user choose + open door
			 * send to mc2 UNLOCK_DOOR byte to open door
			*/
			if(key=='+'){
    2dbe:	8b a5       	ldd	r24, Y+43	; 0x2b
    2dc0:	8b 32       	cpi	r24, 0x2B	; 43
    2dc2:	31 f4       	brne	.+12     	; 0x2dd0 <main+0x3f8>
				UART_sendByte(UNLOCK_DOOR);
    2dc4:	84 ea       	ldi	r24, 0xA4	; 164
    2dc6:	0e 94 f9 22 	call	0x45f2	; 0x45f2 <UART_sendByte>
				DoorLCD();
    2dca:	0e 94 e7 13 	call	0x27ce	; 0x27ce <DoorLCD>
    2dce:	c9 ce       	rjmp	.-622    	; 0x2b62 <main+0x18a>
			/*
			 * if the user choose + open door
			 * send to mc2 HANGE_PASSWORD byte to change password
			 * of the door
			*/
			else if(key=='-')
    2dd0:	8b a5       	ldd	r24, Y+43	; 0x2b
    2dd2:	8d 32       	cpi	r24, 0x2D	; 45
    2dd4:	09 f0       	breq	.+2      	; 0x2dd8 <main+0x400>
    2dd6:	c5 ce       	rjmp	.-630    	; 0x2b62 <main+0x18a>
			{
				UART_sendByte(CHANGE_PASSWORD);
    2dd8:	80 ea       	ldi	r24, 0xA0	; 160
    2dda:	0e 94 f9 22 	call	0x45f2	; 0x45f2 <UART_sendByte>
				New_Password();
    2dde:	0e 94 af 05 	call	0xb5e	; 0xb5e <New_Password>
    2de2:	bf ce       	rjmp	.-642    	; 0x2b62 <main+0x18a>

00002de4 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    2de4:	df 93       	push	r29
    2de6:	cf 93       	push	r28
    2de8:	00 d0       	rcall	.+0      	; 0x2dea <GPIO_setupPinDirection+0x6>
    2dea:	00 d0       	rcall	.+0      	; 0x2dec <GPIO_setupPinDirection+0x8>
    2dec:	0f 92       	push	r0
    2dee:	cd b7       	in	r28, 0x3d	; 61
    2df0:	de b7       	in	r29, 0x3e	; 62
    2df2:	89 83       	std	Y+1, r24	; 0x01
    2df4:	6a 83       	std	Y+2, r22	; 0x02
    2df6:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2df8:	8a 81       	ldd	r24, Y+2	; 0x02
    2dfa:	88 30       	cpi	r24, 0x08	; 8
    2dfc:	08 f0       	brcs	.+2      	; 0x2e00 <GPIO_setupPinDirection+0x1c>
    2dfe:	d5 c0       	rjmp	.+426    	; 0x2faa <GPIO_setupPinDirection+0x1c6>
    2e00:	89 81       	ldd	r24, Y+1	; 0x01
    2e02:	84 30       	cpi	r24, 0x04	; 4
    2e04:	08 f0       	brcs	.+2      	; 0x2e08 <GPIO_setupPinDirection+0x24>
    2e06:	d1 c0       	rjmp	.+418    	; 0x2faa <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    2e08:	89 81       	ldd	r24, Y+1	; 0x01
    2e0a:	28 2f       	mov	r18, r24
    2e0c:	30 e0       	ldi	r19, 0x00	; 0
    2e0e:	3d 83       	std	Y+5, r19	; 0x05
    2e10:	2c 83       	std	Y+4, r18	; 0x04
    2e12:	8c 81       	ldd	r24, Y+4	; 0x04
    2e14:	9d 81       	ldd	r25, Y+5	; 0x05
    2e16:	81 30       	cpi	r24, 0x01	; 1
    2e18:	91 05       	cpc	r25, r1
    2e1a:	09 f4       	brne	.+2      	; 0x2e1e <GPIO_setupPinDirection+0x3a>
    2e1c:	43 c0       	rjmp	.+134    	; 0x2ea4 <GPIO_setupPinDirection+0xc0>
    2e1e:	2c 81       	ldd	r18, Y+4	; 0x04
    2e20:	3d 81       	ldd	r19, Y+5	; 0x05
    2e22:	22 30       	cpi	r18, 0x02	; 2
    2e24:	31 05       	cpc	r19, r1
    2e26:	2c f4       	brge	.+10     	; 0x2e32 <GPIO_setupPinDirection+0x4e>
    2e28:	8c 81       	ldd	r24, Y+4	; 0x04
    2e2a:	9d 81       	ldd	r25, Y+5	; 0x05
    2e2c:	00 97       	sbiw	r24, 0x00	; 0
    2e2e:	71 f0       	breq	.+28     	; 0x2e4c <GPIO_setupPinDirection+0x68>
    2e30:	bc c0       	rjmp	.+376    	; 0x2faa <GPIO_setupPinDirection+0x1c6>
    2e32:	2c 81       	ldd	r18, Y+4	; 0x04
    2e34:	3d 81       	ldd	r19, Y+5	; 0x05
    2e36:	22 30       	cpi	r18, 0x02	; 2
    2e38:	31 05       	cpc	r19, r1
    2e3a:	09 f4       	brne	.+2      	; 0x2e3e <GPIO_setupPinDirection+0x5a>
    2e3c:	5f c0       	rjmp	.+190    	; 0x2efc <GPIO_setupPinDirection+0x118>
    2e3e:	8c 81       	ldd	r24, Y+4	; 0x04
    2e40:	9d 81       	ldd	r25, Y+5	; 0x05
    2e42:	83 30       	cpi	r24, 0x03	; 3
    2e44:	91 05       	cpc	r25, r1
    2e46:	09 f4       	brne	.+2      	; 0x2e4a <GPIO_setupPinDirection+0x66>
    2e48:	85 c0       	rjmp	.+266    	; 0x2f54 <GPIO_setupPinDirection+0x170>
    2e4a:	af c0       	rjmp	.+350    	; 0x2faa <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    2e4c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e4e:	81 30       	cpi	r24, 0x01	; 1
    2e50:	a1 f4       	brne	.+40     	; 0x2e7a <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    2e52:	aa e3       	ldi	r26, 0x3A	; 58
    2e54:	b0 e0       	ldi	r27, 0x00	; 0
    2e56:	ea e3       	ldi	r30, 0x3A	; 58
    2e58:	f0 e0       	ldi	r31, 0x00	; 0
    2e5a:	80 81       	ld	r24, Z
    2e5c:	48 2f       	mov	r20, r24
    2e5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e60:	28 2f       	mov	r18, r24
    2e62:	30 e0       	ldi	r19, 0x00	; 0
    2e64:	81 e0       	ldi	r24, 0x01	; 1
    2e66:	90 e0       	ldi	r25, 0x00	; 0
    2e68:	02 2e       	mov	r0, r18
    2e6a:	02 c0       	rjmp	.+4      	; 0x2e70 <GPIO_setupPinDirection+0x8c>
    2e6c:	88 0f       	add	r24, r24
    2e6e:	99 1f       	adc	r25, r25
    2e70:	0a 94       	dec	r0
    2e72:	e2 f7       	brpl	.-8      	; 0x2e6c <GPIO_setupPinDirection+0x88>
    2e74:	84 2b       	or	r24, r20
    2e76:	8c 93       	st	X, r24
    2e78:	98 c0       	rjmp	.+304    	; 0x2faa <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    2e7a:	aa e3       	ldi	r26, 0x3A	; 58
    2e7c:	b0 e0       	ldi	r27, 0x00	; 0
    2e7e:	ea e3       	ldi	r30, 0x3A	; 58
    2e80:	f0 e0       	ldi	r31, 0x00	; 0
    2e82:	80 81       	ld	r24, Z
    2e84:	48 2f       	mov	r20, r24
    2e86:	8a 81       	ldd	r24, Y+2	; 0x02
    2e88:	28 2f       	mov	r18, r24
    2e8a:	30 e0       	ldi	r19, 0x00	; 0
    2e8c:	81 e0       	ldi	r24, 0x01	; 1
    2e8e:	90 e0       	ldi	r25, 0x00	; 0
    2e90:	02 2e       	mov	r0, r18
    2e92:	02 c0       	rjmp	.+4      	; 0x2e98 <GPIO_setupPinDirection+0xb4>
    2e94:	88 0f       	add	r24, r24
    2e96:	99 1f       	adc	r25, r25
    2e98:	0a 94       	dec	r0
    2e9a:	e2 f7       	brpl	.-8      	; 0x2e94 <GPIO_setupPinDirection+0xb0>
    2e9c:	80 95       	com	r24
    2e9e:	84 23       	and	r24, r20
    2ea0:	8c 93       	st	X, r24
    2ea2:	83 c0       	rjmp	.+262    	; 0x2faa <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    2ea4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ea6:	81 30       	cpi	r24, 0x01	; 1
    2ea8:	a1 f4       	brne	.+40     	; 0x2ed2 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    2eaa:	a7 e3       	ldi	r26, 0x37	; 55
    2eac:	b0 e0       	ldi	r27, 0x00	; 0
    2eae:	e7 e3       	ldi	r30, 0x37	; 55
    2eb0:	f0 e0       	ldi	r31, 0x00	; 0
    2eb2:	80 81       	ld	r24, Z
    2eb4:	48 2f       	mov	r20, r24
    2eb6:	8a 81       	ldd	r24, Y+2	; 0x02
    2eb8:	28 2f       	mov	r18, r24
    2eba:	30 e0       	ldi	r19, 0x00	; 0
    2ebc:	81 e0       	ldi	r24, 0x01	; 1
    2ebe:	90 e0       	ldi	r25, 0x00	; 0
    2ec0:	02 2e       	mov	r0, r18
    2ec2:	02 c0       	rjmp	.+4      	; 0x2ec8 <GPIO_setupPinDirection+0xe4>
    2ec4:	88 0f       	add	r24, r24
    2ec6:	99 1f       	adc	r25, r25
    2ec8:	0a 94       	dec	r0
    2eca:	e2 f7       	brpl	.-8      	; 0x2ec4 <GPIO_setupPinDirection+0xe0>
    2ecc:	84 2b       	or	r24, r20
    2ece:	8c 93       	st	X, r24
    2ed0:	6c c0       	rjmp	.+216    	; 0x2faa <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    2ed2:	a7 e3       	ldi	r26, 0x37	; 55
    2ed4:	b0 e0       	ldi	r27, 0x00	; 0
    2ed6:	e7 e3       	ldi	r30, 0x37	; 55
    2ed8:	f0 e0       	ldi	r31, 0x00	; 0
    2eda:	80 81       	ld	r24, Z
    2edc:	48 2f       	mov	r20, r24
    2ede:	8a 81       	ldd	r24, Y+2	; 0x02
    2ee0:	28 2f       	mov	r18, r24
    2ee2:	30 e0       	ldi	r19, 0x00	; 0
    2ee4:	81 e0       	ldi	r24, 0x01	; 1
    2ee6:	90 e0       	ldi	r25, 0x00	; 0
    2ee8:	02 2e       	mov	r0, r18
    2eea:	02 c0       	rjmp	.+4      	; 0x2ef0 <GPIO_setupPinDirection+0x10c>
    2eec:	88 0f       	add	r24, r24
    2eee:	99 1f       	adc	r25, r25
    2ef0:	0a 94       	dec	r0
    2ef2:	e2 f7       	brpl	.-8      	; 0x2eec <GPIO_setupPinDirection+0x108>
    2ef4:	80 95       	com	r24
    2ef6:	84 23       	and	r24, r20
    2ef8:	8c 93       	st	X, r24
    2efa:	57 c0       	rjmp	.+174    	; 0x2faa <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    2efc:	8b 81       	ldd	r24, Y+3	; 0x03
    2efe:	81 30       	cpi	r24, 0x01	; 1
    2f00:	a1 f4       	brne	.+40     	; 0x2f2a <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    2f02:	a4 e3       	ldi	r26, 0x34	; 52
    2f04:	b0 e0       	ldi	r27, 0x00	; 0
    2f06:	e4 e3       	ldi	r30, 0x34	; 52
    2f08:	f0 e0       	ldi	r31, 0x00	; 0
    2f0a:	80 81       	ld	r24, Z
    2f0c:	48 2f       	mov	r20, r24
    2f0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f10:	28 2f       	mov	r18, r24
    2f12:	30 e0       	ldi	r19, 0x00	; 0
    2f14:	81 e0       	ldi	r24, 0x01	; 1
    2f16:	90 e0       	ldi	r25, 0x00	; 0
    2f18:	02 2e       	mov	r0, r18
    2f1a:	02 c0       	rjmp	.+4      	; 0x2f20 <GPIO_setupPinDirection+0x13c>
    2f1c:	88 0f       	add	r24, r24
    2f1e:	99 1f       	adc	r25, r25
    2f20:	0a 94       	dec	r0
    2f22:	e2 f7       	brpl	.-8      	; 0x2f1c <GPIO_setupPinDirection+0x138>
    2f24:	84 2b       	or	r24, r20
    2f26:	8c 93       	st	X, r24
    2f28:	40 c0       	rjmp	.+128    	; 0x2faa <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    2f2a:	a4 e3       	ldi	r26, 0x34	; 52
    2f2c:	b0 e0       	ldi	r27, 0x00	; 0
    2f2e:	e4 e3       	ldi	r30, 0x34	; 52
    2f30:	f0 e0       	ldi	r31, 0x00	; 0
    2f32:	80 81       	ld	r24, Z
    2f34:	48 2f       	mov	r20, r24
    2f36:	8a 81       	ldd	r24, Y+2	; 0x02
    2f38:	28 2f       	mov	r18, r24
    2f3a:	30 e0       	ldi	r19, 0x00	; 0
    2f3c:	81 e0       	ldi	r24, 0x01	; 1
    2f3e:	90 e0       	ldi	r25, 0x00	; 0
    2f40:	02 2e       	mov	r0, r18
    2f42:	02 c0       	rjmp	.+4      	; 0x2f48 <GPIO_setupPinDirection+0x164>
    2f44:	88 0f       	add	r24, r24
    2f46:	99 1f       	adc	r25, r25
    2f48:	0a 94       	dec	r0
    2f4a:	e2 f7       	brpl	.-8      	; 0x2f44 <GPIO_setupPinDirection+0x160>
    2f4c:	80 95       	com	r24
    2f4e:	84 23       	and	r24, r20
    2f50:	8c 93       	st	X, r24
    2f52:	2b c0       	rjmp	.+86     	; 0x2faa <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    2f54:	8b 81       	ldd	r24, Y+3	; 0x03
    2f56:	81 30       	cpi	r24, 0x01	; 1
    2f58:	a1 f4       	brne	.+40     	; 0x2f82 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    2f5a:	a1 e3       	ldi	r26, 0x31	; 49
    2f5c:	b0 e0       	ldi	r27, 0x00	; 0
    2f5e:	e1 e3       	ldi	r30, 0x31	; 49
    2f60:	f0 e0       	ldi	r31, 0x00	; 0
    2f62:	80 81       	ld	r24, Z
    2f64:	48 2f       	mov	r20, r24
    2f66:	8a 81       	ldd	r24, Y+2	; 0x02
    2f68:	28 2f       	mov	r18, r24
    2f6a:	30 e0       	ldi	r19, 0x00	; 0
    2f6c:	81 e0       	ldi	r24, 0x01	; 1
    2f6e:	90 e0       	ldi	r25, 0x00	; 0
    2f70:	02 2e       	mov	r0, r18
    2f72:	02 c0       	rjmp	.+4      	; 0x2f78 <GPIO_setupPinDirection+0x194>
    2f74:	88 0f       	add	r24, r24
    2f76:	99 1f       	adc	r25, r25
    2f78:	0a 94       	dec	r0
    2f7a:	e2 f7       	brpl	.-8      	; 0x2f74 <GPIO_setupPinDirection+0x190>
    2f7c:	84 2b       	or	r24, r20
    2f7e:	8c 93       	st	X, r24
    2f80:	14 c0       	rjmp	.+40     	; 0x2faa <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    2f82:	a1 e3       	ldi	r26, 0x31	; 49
    2f84:	b0 e0       	ldi	r27, 0x00	; 0
    2f86:	e1 e3       	ldi	r30, 0x31	; 49
    2f88:	f0 e0       	ldi	r31, 0x00	; 0
    2f8a:	80 81       	ld	r24, Z
    2f8c:	48 2f       	mov	r20, r24
    2f8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f90:	28 2f       	mov	r18, r24
    2f92:	30 e0       	ldi	r19, 0x00	; 0
    2f94:	81 e0       	ldi	r24, 0x01	; 1
    2f96:	90 e0       	ldi	r25, 0x00	; 0
    2f98:	02 2e       	mov	r0, r18
    2f9a:	02 c0       	rjmp	.+4      	; 0x2fa0 <GPIO_setupPinDirection+0x1bc>
    2f9c:	88 0f       	add	r24, r24
    2f9e:	99 1f       	adc	r25, r25
    2fa0:	0a 94       	dec	r0
    2fa2:	e2 f7       	brpl	.-8      	; 0x2f9c <GPIO_setupPinDirection+0x1b8>
    2fa4:	80 95       	com	r24
    2fa6:	84 23       	and	r24, r20
    2fa8:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2faa:	0f 90       	pop	r0
    2fac:	0f 90       	pop	r0
    2fae:	0f 90       	pop	r0
    2fb0:	0f 90       	pop	r0
    2fb2:	0f 90       	pop	r0
    2fb4:	cf 91       	pop	r28
    2fb6:	df 91       	pop	r29
    2fb8:	08 95       	ret

00002fba <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    2fba:	df 93       	push	r29
    2fbc:	cf 93       	push	r28
    2fbe:	00 d0       	rcall	.+0      	; 0x2fc0 <GPIO_writePin+0x6>
    2fc0:	00 d0       	rcall	.+0      	; 0x2fc2 <GPIO_writePin+0x8>
    2fc2:	0f 92       	push	r0
    2fc4:	cd b7       	in	r28, 0x3d	; 61
    2fc6:	de b7       	in	r29, 0x3e	; 62
    2fc8:	89 83       	std	Y+1, r24	; 0x01
    2fca:	6a 83       	std	Y+2, r22	; 0x02
    2fcc:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2fce:	8a 81       	ldd	r24, Y+2	; 0x02
    2fd0:	88 30       	cpi	r24, 0x08	; 8
    2fd2:	08 f0       	brcs	.+2      	; 0x2fd6 <GPIO_writePin+0x1c>
    2fd4:	d5 c0       	rjmp	.+426    	; 0x3180 <GPIO_writePin+0x1c6>
    2fd6:	89 81       	ldd	r24, Y+1	; 0x01
    2fd8:	84 30       	cpi	r24, 0x04	; 4
    2fda:	08 f0       	brcs	.+2      	; 0x2fde <GPIO_writePin+0x24>
    2fdc:	d1 c0       	rjmp	.+418    	; 0x3180 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    2fde:	89 81       	ldd	r24, Y+1	; 0x01
    2fe0:	28 2f       	mov	r18, r24
    2fe2:	30 e0       	ldi	r19, 0x00	; 0
    2fe4:	3d 83       	std	Y+5, r19	; 0x05
    2fe6:	2c 83       	std	Y+4, r18	; 0x04
    2fe8:	8c 81       	ldd	r24, Y+4	; 0x04
    2fea:	9d 81       	ldd	r25, Y+5	; 0x05
    2fec:	81 30       	cpi	r24, 0x01	; 1
    2fee:	91 05       	cpc	r25, r1
    2ff0:	09 f4       	brne	.+2      	; 0x2ff4 <GPIO_writePin+0x3a>
    2ff2:	43 c0       	rjmp	.+134    	; 0x307a <GPIO_writePin+0xc0>
    2ff4:	2c 81       	ldd	r18, Y+4	; 0x04
    2ff6:	3d 81       	ldd	r19, Y+5	; 0x05
    2ff8:	22 30       	cpi	r18, 0x02	; 2
    2ffa:	31 05       	cpc	r19, r1
    2ffc:	2c f4       	brge	.+10     	; 0x3008 <GPIO_writePin+0x4e>
    2ffe:	8c 81       	ldd	r24, Y+4	; 0x04
    3000:	9d 81       	ldd	r25, Y+5	; 0x05
    3002:	00 97       	sbiw	r24, 0x00	; 0
    3004:	71 f0       	breq	.+28     	; 0x3022 <GPIO_writePin+0x68>
    3006:	bc c0       	rjmp	.+376    	; 0x3180 <GPIO_writePin+0x1c6>
    3008:	2c 81       	ldd	r18, Y+4	; 0x04
    300a:	3d 81       	ldd	r19, Y+5	; 0x05
    300c:	22 30       	cpi	r18, 0x02	; 2
    300e:	31 05       	cpc	r19, r1
    3010:	09 f4       	brne	.+2      	; 0x3014 <GPIO_writePin+0x5a>
    3012:	5f c0       	rjmp	.+190    	; 0x30d2 <GPIO_writePin+0x118>
    3014:	8c 81       	ldd	r24, Y+4	; 0x04
    3016:	9d 81       	ldd	r25, Y+5	; 0x05
    3018:	83 30       	cpi	r24, 0x03	; 3
    301a:	91 05       	cpc	r25, r1
    301c:	09 f4       	brne	.+2      	; 0x3020 <GPIO_writePin+0x66>
    301e:	85 c0       	rjmp	.+266    	; 0x312a <GPIO_writePin+0x170>
    3020:	af c0       	rjmp	.+350    	; 0x3180 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    3022:	8b 81       	ldd	r24, Y+3	; 0x03
    3024:	81 30       	cpi	r24, 0x01	; 1
    3026:	a1 f4       	brne	.+40     	; 0x3050 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    3028:	ab e3       	ldi	r26, 0x3B	; 59
    302a:	b0 e0       	ldi	r27, 0x00	; 0
    302c:	eb e3       	ldi	r30, 0x3B	; 59
    302e:	f0 e0       	ldi	r31, 0x00	; 0
    3030:	80 81       	ld	r24, Z
    3032:	48 2f       	mov	r20, r24
    3034:	8a 81       	ldd	r24, Y+2	; 0x02
    3036:	28 2f       	mov	r18, r24
    3038:	30 e0       	ldi	r19, 0x00	; 0
    303a:	81 e0       	ldi	r24, 0x01	; 1
    303c:	90 e0       	ldi	r25, 0x00	; 0
    303e:	02 2e       	mov	r0, r18
    3040:	02 c0       	rjmp	.+4      	; 0x3046 <GPIO_writePin+0x8c>
    3042:	88 0f       	add	r24, r24
    3044:	99 1f       	adc	r25, r25
    3046:	0a 94       	dec	r0
    3048:	e2 f7       	brpl	.-8      	; 0x3042 <GPIO_writePin+0x88>
    304a:	84 2b       	or	r24, r20
    304c:	8c 93       	st	X, r24
    304e:	98 c0       	rjmp	.+304    	; 0x3180 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    3050:	ab e3       	ldi	r26, 0x3B	; 59
    3052:	b0 e0       	ldi	r27, 0x00	; 0
    3054:	eb e3       	ldi	r30, 0x3B	; 59
    3056:	f0 e0       	ldi	r31, 0x00	; 0
    3058:	80 81       	ld	r24, Z
    305a:	48 2f       	mov	r20, r24
    305c:	8a 81       	ldd	r24, Y+2	; 0x02
    305e:	28 2f       	mov	r18, r24
    3060:	30 e0       	ldi	r19, 0x00	; 0
    3062:	81 e0       	ldi	r24, 0x01	; 1
    3064:	90 e0       	ldi	r25, 0x00	; 0
    3066:	02 2e       	mov	r0, r18
    3068:	02 c0       	rjmp	.+4      	; 0x306e <GPIO_writePin+0xb4>
    306a:	88 0f       	add	r24, r24
    306c:	99 1f       	adc	r25, r25
    306e:	0a 94       	dec	r0
    3070:	e2 f7       	brpl	.-8      	; 0x306a <GPIO_writePin+0xb0>
    3072:	80 95       	com	r24
    3074:	84 23       	and	r24, r20
    3076:	8c 93       	st	X, r24
    3078:	83 c0       	rjmp	.+262    	; 0x3180 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    307a:	8b 81       	ldd	r24, Y+3	; 0x03
    307c:	81 30       	cpi	r24, 0x01	; 1
    307e:	a1 f4       	brne	.+40     	; 0x30a8 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    3080:	a8 e3       	ldi	r26, 0x38	; 56
    3082:	b0 e0       	ldi	r27, 0x00	; 0
    3084:	e8 e3       	ldi	r30, 0x38	; 56
    3086:	f0 e0       	ldi	r31, 0x00	; 0
    3088:	80 81       	ld	r24, Z
    308a:	48 2f       	mov	r20, r24
    308c:	8a 81       	ldd	r24, Y+2	; 0x02
    308e:	28 2f       	mov	r18, r24
    3090:	30 e0       	ldi	r19, 0x00	; 0
    3092:	81 e0       	ldi	r24, 0x01	; 1
    3094:	90 e0       	ldi	r25, 0x00	; 0
    3096:	02 2e       	mov	r0, r18
    3098:	02 c0       	rjmp	.+4      	; 0x309e <GPIO_writePin+0xe4>
    309a:	88 0f       	add	r24, r24
    309c:	99 1f       	adc	r25, r25
    309e:	0a 94       	dec	r0
    30a0:	e2 f7       	brpl	.-8      	; 0x309a <GPIO_writePin+0xe0>
    30a2:	84 2b       	or	r24, r20
    30a4:	8c 93       	st	X, r24
    30a6:	6c c0       	rjmp	.+216    	; 0x3180 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    30a8:	a8 e3       	ldi	r26, 0x38	; 56
    30aa:	b0 e0       	ldi	r27, 0x00	; 0
    30ac:	e8 e3       	ldi	r30, 0x38	; 56
    30ae:	f0 e0       	ldi	r31, 0x00	; 0
    30b0:	80 81       	ld	r24, Z
    30b2:	48 2f       	mov	r20, r24
    30b4:	8a 81       	ldd	r24, Y+2	; 0x02
    30b6:	28 2f       	mov	r18, r24
    30b8:	30 e0       	ldi	r19, 0x00	; 0
    30ba:	81 e0       	ldi	r24, 0x01	; 1
    30bc:	90 e0       	ldi	r25, 0x00	; 0
    30be:	02 2e       	mov	r0, r18
    30c0:	02 c0       	rjmp	.+4      	; 0x30c6 <GPIO_writePin+0x10c>
    30c2:	88 0f       	add	r24, r24
    30c4:	99 1f       	adc	r25, r25
    30c6:	0a 94       	dec	r0
    30c8:	e2 f7       	brpl	.-8      	; 0x30c2 <GPIO_writePin+0x108>
    30ca:	80 95       	com	r24
    30cc:	84 23       	and	r24, r20
    30ce:	8c 93       	st	X, r24
    30d0:	57 c0       	rjmp	.+174    	; 0x3180 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    30d2:	8b 81       	ldd	r24, Y+3	; 0x03
    30d4:	81 30       	cpi	r24, 0x01	; 1
    30d6:	a1 f4       	brne	.+40     	; 0x3100 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    30d8:	a5 e3       	ldi	r26, 0x35	; 53
    30da:	b0 e0       	ldi	r27, 0x00	; 0
    30dc:	e5 e3       	ldi	r30, 0x35	; 53
    30de:	f0 e0       	ldi	r31, 0x00	; 0
    30e0:	80 81       	ld	r24, Z
    30e2:	48 2f       	mov	r20, r24
    30e4:	8a 81       	ldd	r24, Y+2	; 0x02
    30e6:	28 2f       	mov	r18, r24
    30e8:	30 e0       	ldi	r19, 0x00	; 0
    30ea:	81 e0       	ldi	r24, 0x01	; 1
    30ec:	90 e0       	ldi	r25, 0x00	; 0
    30ee:	02 2e       	mov	r0, r18
    30f0:	02 c0       	rjmp	.+4      	; 0x30f6 <GPIO_writePin+0x13c>
    30f2:	88 0f       	add	r24, r24
    30f4:	99 1f       	adc	r25, r25
    30f6:	0a 94       	dec	r0
    30f8:	e2 f7       	brpl	.-8      	; 0x30f2 <GPIO_writePin+0x138>
    30fa:	84 2b       	or	r24, r20
    30fc:	8c 93       	st	X, r24
    30fe:	40 c0       	rjmp	.+128    	; 0x3180 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    3100:	a5 e3       	ldi	r26, 0x35	; 53
    3102:	b0 e0       	ldi	r27, 0x00	; 0
    3104:	e5 e3       	ldi	r30, 0x35	; 53
    3106:	f0 e0       	ldi	r31, 0x00	; 0
    3108:	80 81       	ld	r24, Z
    310a:	48 2f       	mov	r20, r24
    310c:	8a 81       	ldd	r24, Y+2	; 0x02
    310e:	28 2f       	mov	r18, r24
    3110:	30 e0       	ldi	r19, 0x00	; 0
    3112:	81 e0       	ldi	r24, 0x01	; 1
    3114:	90 e0       	ldi	r25, 0x00	; 0
    3116:	02 2e       	mov	r0, r18
    3118:	02 c0       	rjmp	.+4      	; 0x311e <GPIO_writePin+0x164>
    311a:	88 0f       	add	r24, r24
    311c:	99 1f       	adc	r25, r25
    311e:	0a 94       	dec	r0
    3120:	e2 f7       	brpl	.-8      	; 0x311a <GPIO_writePin+0x160>
    3122:	80 95       	com	r24
    3124:	84 23       	and	r24, r20
    3126:	8c 93       	st	X, r24
    3128:	2b c0       	rjmp	.+86     	; 0x3180 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    312a:	8b 81       	ldd	r24, Y+3	; 0x03
    312c:	81 30       	cpi	r24, 0x01	; 1
    312e:	a1 f4       	brne	.+40     	; 0x3158 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    3130:	a2 e3       	ldi	r26, 0x32	; 50
    3132:	b0 e0       	ldi	r27, 0x00	; 0
    3134:	e2 e3       	ldi	r30, 0x32	; 50
    3136:	f0 e0       	ldi	r31, 0x00	; 0
    3138:	80 81       	ld	r24, Z
    313a:	48 2f       	mov	r20, r24
    313c:	8a 81       	ldd	r24, Y+2	; 0x02
    313e:	28 2f       	mov	r18, r24
    3140:	30 e0       	ldi	r19, 0x00	; 0
    3142:	81 e0       	ldi	r24, 0x01	; 1
    3144:	90 e0       	ldi	r25, 0x00	; 0
    3146:	02 2e       	mov	r0, r18
    3148:	02 c0       	rjmp	.+4      	; 0x314e <GPIO_writePin+0x194>
    314a:	88 0f       	add	r24, r24
    314c:	99 1f       	adc	r25, r25
    314e:	0a 94       	dec	r0
    3150:	e2 f7       	brpl	.-8      	; 0x314a <GPIO_writePin+0x190>
    3152:	84 2b       	or	r24, r20
    3154:	8c 93       	st	X, r24
    3156:	14 c0       	rjmp	.+40     	; 0x3180 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    3158:	a2 e3       	ldi	r26, 0x32	; 50
    315a:	b0 e0       	ldi	r27, 0x00	; 0
    315c:	e2 e3       	ldi	r30, 0x32	; 50
    315e:	f0 e0       	ldi	r31, 0x00	; 0
    3160:	80 81       	ld	r24, Z
    3162:	48 2f       	mov	r20, r24
    3164:	8a 81       	ldd	r24, Y+2	; 0x02
    3166:	28 2f       	mov	r18, r24
    3168:	30 e0       	ldi	r19, 0x00	; 0
    316a:	81 e0       	ldi	r24, 0x01	; 1
    316c:	90 e0       	ldi	r25, 0x00	; 0
    316e:	02 2e       	mov	r0, r18
    3170:	02 c0       	rjmp	.+4      	; 0x3176 <GPIO_writePin+0x1bc>
    3172:	88 0f       	add	r24, r24
    3174:	99 1f       	adc	r25, r25
    3176:	0a 94       	dec	r0
    3178:	e2 f7       	brpl	.-8      	; 0x3172 <GPIO_writePin+0x1b8>
    317a:	80 95       	com	r24
    317c:	84 23       	and	r24, r20
    317e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    3180:	0f 90       	pop	r0
    3182:	0f 90       	pop	r0
    3184:	0f 90       	pop	r0
    3186:	0f 90       	pop	r0
    3188:	0f 90       	pop	r0
    318a:	cf 91       	pop	r28
    318c:	df 91       	pop	r29
    318e:	08 95       	ret

00003190 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    3190:	df 93       	push	r29
    3192:	cf 93       	push	r28
    3194:	00 d0       	rcall	.+0      	; 0x3196 <GPIO_readPin+0x6>
    3196:	00 d0       	rcall	.+0      	; 0x3198 <GPIO_readPin+0x8>
    3198:	0f 92       	push	r0
    319a:	cd b7       	in	r28, 0x3d	; 61
    319c:	de b7       	in	r29, 0x3e	; 62
    319e:	8a 83       	std	Y+2, r24	; 0x02
    31a0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    31a2:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    31a4:	8b 81       	ldd	r24, Y+3	; 0x03
    31a6:	88 30       	cpi	r24, 0x08	; 8
    31a8:	08 f0       	brcs	.+2      	; 0x31ac <GPIO_readPin+0x1c>
    31aa:	84 c0       	rjmp	.+264    	; 0x32b4 <GPIO_readPin+0x124>
    31ac:	8a 81       	ldd	r24, Y+2	; 0x02
    31ae:	84 30       	cpi	r24, 0x04	; 4
    31b0:	08 f0       	brcs	.+2      	; 0x31b4 <GPIO_readPin+0x24>
    31b2:	80 c0       	rjmp	.+256    	; 0x32b4 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    31b4:	8a 81       	ldd	r24, Y+2	; 0x02
    31b6:	28 2f       	mov	r18, r24
    31b8:	30 e0       	ldi	r19, 0x00	; 0
    31ba:	3d 83       	std	Y+5, r19	; 0x05
    31bc:	2c 83       	std	Y+4, r18	; 0x04
    31be:	4c 81       	ldd	r20, Y+4	; 0x04
    31c0:	5d 81       	ldd	r21, Y+5	; 0x05
    31c2:	41 30       	cpi	r20, 0x01	; 1
    31c4:	51 05       	cpc	r21, r1
    31c6:	79 f1       	breq	.+94     	; 0x3226 <GPIO_readPin+0x96>
    31c8:	8c 81       	ldd	r24, Y+4	; 0x04
    31ca:	9d 81       	ldd	r25, Y+5	; 0x05
    31cc:	82 30       	cpi	r24, 0x02	; 2
    31ce:	91 05       	cpc	r25, r1
    31d0:	34 f4       	brge	.+12     	; 0x31de <GPIO_readPin+0x4e>
    31d2:	2c 81       	ldd	r18, Y+4	; 0x04
    31d4:	3d 81       	ldd	r19, Y+5	; 0x05
    31d6:	21 15       	cp	r18, r1
    31d8:	31 05       	cpc	r19, r1
    31da:	69 f0       	breq	.+26     	; 0x31f6 <GPIO_readPin+0x66>
    31dc:	6b c0       	rjmp	.+214    	; 0x32b4 <GPIO_readPin+0x124>
    31de:	4c 81       	ldd	r20, Y+4	; 0x04
    31e0:	5d 81       	ldd	r21, Y+5	; 0x05
    31e2:	42 30       	cpi	r20, 0x02	; 2
    31e4:	51 05       	cpc	r21, r1
    31e6:	b9 f1       	breq	.+110    	; 0x3256 <GPIO_readPin+0xc6>
    31e8:	8c 81       	ldd	r24, Y+4	; 0x04
    31ea:	9d 81       	ldd	r25, Y+5	; 0x05
    31ec:	83 30       	cpi	r24, 0x03	; 3
    31ee:	91 05       	cpc	r25, r1
    31f0:	09 f4       	brne	.+2      	; 0x31f4 <GPIO_readPin+0x64>
    31f2:	49 c0       	rjmp	.+146    	; 0x3286 <GPIO_readPin+0xf6>
    31f4:	5f c0       	rjmp	.+190    	; 0x32b4 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    31f6:	e9 e3       	ldi	r30, 0x39	; 57
    31f8:	f0 e0       	ldi	r31, 0x00	; 0
    31fa:	80 81       	ld	r24, Z
    31fc:	28 2f       	mov	r18, r24
    31fe:	30 e0       	ldi	r19, 0x00	; 0
    3200:	8b 81       	ldd	r24, Y+3	; 0x03
    3202:	88 2f       	mov	r24, r24
    3204:	90 e0       	ldi	r25, 0x00	; 0
    3206:	a9 01       	movw	r20, r18
    3208:	02 c0       	rjmp	.+4      	; 0x320e <GPIO_readPin+0x7e>
    320a:	55 95       	asr	r21
    320c:	47 95       	ror	r20
    320e:	8a 95       	dec	r24
    3210:	e2 f7       	brpl	.-8      	; 0x320a <GPIO_readPin+0x7a>
    3212:	ca 01       	movw	r24, r20
    3214:	81 70       	andi	r24, 0x01	; 1
    3216:	90 70       	andi	r25, 0x00	; 0
    3218:	88 23       	and	r24, r24
    321a:	19 f0       	breq	.+6      	; 0x3222 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    321c:	81 e0       	ldi	r24, 0x01	; 1
    321e:	89 83       	std	Y+1, r24	; 0x01
    3220:	49 c0       	rjmp	.+146    	; 0x32b4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    3222:	19 82       	std	Y+1, r1	; 0x01
    3224:	47 c0       	rjmp	.+142    	; 0x32b4 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    3226:	e6 e3       	ldi	r30, 0x36	; 54
    3228:	f0 e0       	ldi	r31, 0x00	; 0
    322a:	80 81       	ld	r24, Z
    322c:	28 2f       	mov	r18, r24
    322e:	30 e0       	ldi	r19, 0x00	; 0
    3230:	8b 81       	ldd	r24, Y+3	; 0x03
    3232:	88 2f       	mov	r24, r24
    3234:	90 e0       	ldi	r25, 0x00	; 0
    3236:	a9 01       	movw	r20, r18
    3238:	02 c0       	rjmp	.+4      	; 0x323e <GPIO_readPin+0xae>
    323a:	55 95       	asr	r21
    323c:	47 95       	ror	r20
    323e:	8a 95       	dec	r24
    3240:	e2 f7       	brpl	.-8      	; 0x323a <GPIO_readPin+0xaa>
    3242:	ca 01       	movw	r24, r20
    3244:	81 70       	andi	r24, 0x01	; 1
    3246:	90 70       	andi	r25, 0x00	; 0
    3248:	88 23       	and	r24, r24
    324a:	19 f0       	breq	.+6      	; 0x3252 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    324c:	81 e0       	ldi	r24, 0x01	; 1
    324e:	89 83       	std	Y+1, r24	; 0x01
    3250:	31 c0       	rjmp	.+98     	; 0x32b4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    3252:	19 82       	std	Y+1, r1	; 0x01
    3254:	2f c0       	rjmp	.+94     	; 0x32b4 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    3256:	e3 e3       	ldi	r30, 0x33	; 51
    3258:	f0 e0       	ldi	r31, 0x00	; 0
    325a:	80 81       	ld	r24, Z
    325c:	28 2f       	mov	r18, r24
    325e:	30 e0       	ldi	r19, 0x00	; 0
    3260:	8b 81       	ldd	r24, Y+3	; 0x03
    3262:	88 2f       	mov	r24, r24
    3264:	90 e0       	ldi	r25, 0x00	; 0
    3266:	a9 01       	movw	r20, r18
    3268:	02 c0       	rjmp	.+4      	; 0x326e <GPIO_readPin+0xde>
    326a:	55 95       	asr	r21
    326c:	47 95       	ror	r20
    326e:	8a 95       	dec	r24
    3270:	e2 f7       	brpl	.-8      	; 0x326a <GPIO_readPin+0xda>
    3272:	ca 01       	movw	r24, r20
    3274:	81 70       	andi	r24, 0x01	; 1
    3276:	90 70       	andi	r25, 0x00	; 0
    3278:	88 23       	and	r24, r24
    327a:	19 f0       	breq	.+6      	; 0x3282 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    327c:	81 e0       	ldi	r24, 0x01	; 1
    327e:	89 83       	std	Y+1, r24	; 0x01
    3280:	19 c0       	rjmp	.+50     	; 0x32b4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    3282:	19 82       	std	Y+1, r1	; 0x01
    3284:	17 c0       	rjmp	.+46     	; 0x32b4 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    3286:	e0 e3       	ldi	r30, 0x30	; 48
    3288:	f0 e0       	ldi	r31, 0x00	; 0
    328a:	80 81       	ld	r24, Z
    328c:	28 2f       	mov	r18, r24
    328e:	30 e0       	ldi	r19, 0x00	; 0
    3290:	8b 81       	ldd	r24, Y+3	; 0x03
    3292:	88 2f       	mov	r24, r24
    3294:	90 e0       	ldi	r25, 0x00	; 0
    3296:	a9 01       	movw	r20, r18
    3298:	02 c0       	rjmp	.+4      	; 0x329e <GPIO_readPin+0x10e>
    329a:	55 95       	asr	r21
    329c:	47 95       	ror	r20
    329e:	8a 95       	dec	r24
    32a0:	e2 f7       	brpl	.-8      	; 0x329a <GPIO_readPin+0x10a>
    32a2:	ca 01       	movw	r24, r20
    32a4:	81 70       	andi	r24, 0x01	; 1
    32a6:	90 70       	andi	r25, 0x00	; 0
    32a8:	88 23       	and	r24, r24
    32aa:	19 f0       	breq	.+6      	; 0x32b2 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    32ac:	81 e0       	ldi	r24, 0x01	; 1
    32ae:	89 83       	std	Y+1, r24	; 0x01
    32b0:	01 c0       	rjmp	.+2      	; 0x32b4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    32b2:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    32b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    32b6:	0f 90       	pop	r0
    32b8:	0f 90       	pop	r0
    32ba:	0f 90       	pop	r0
    32bc:	0f 90       	pop	r0
    32be:	0f 90       	pop	r0
    32c0:	cf 91       	pop	r28
    32c2:	df 91       	pop	r29
    32c4:	08 95       	ret

000032c6 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    32c6:	df 93       	push	r29
    32c8:	cf 93       	push	r28
    32ca:	00 d0       	rcall	.+0      	; 0x32cc <GPIO_setupPortDirection+0x6>
    32cc:	00 d0       	rcall	.+0      	; 0x32ce <GPIO_setupPortDirection+0x8>
    32ce:	cd b7       	in	r28, 0x3d	; 61
    32d0:	de b7       	in	r29, 0x3e	; 62
    32d2:	89 83       	std	Y+1, r24	; 0x01
    32d4:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    32d6:	89 81       	ldd	r24, Y+1	; 0x01
    32d8:	84 30       	cpi	r24, 0x04	; 4
    32da:	90 f5       	brcc	.+100    	; 0x3340 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    32dc:	89 81       	ldd	r24, Y+1	; 0x01
    32de:	28 2f       	mov	r18, r24
    32e0:	30 e0       	ldi	r19, 0x00	; 0
    32e2:	3c 83       	std	Y+4, r19	; 0x04
    32e4:	2b 83       	std	Y+3, r18	; 0x03
    32e6:	8b 81       	ldd	r24, Y+3	; 0x03
    32e8:	9c 81       	ldd	r25, Y+4	; 0x04
    32ea:	81 30       	cpi	r24, 0x01	; 1
    32ec:	91 05       	cpc	r25, r1
    32ee:	d1 f0       	breq	.+52     	; 0x3324 <GPIO_setupPortDirection+0x5e>
    32f0:	2b 81       	ldd	r18, Y+3	; 0x03
    32f2:	3c 81       	ldd	r19, Y+4	; 0x04
    32f4:	22 30       	cpi	r18, 0x02	; 2
    32f6:	31 05       	cpc	r19, r1
    32f8:	2c f4       	brge	.+10     	; 0x3304 <GPIO_setupPortDirection+0x3e>
    32fa:	8b 81       	ldd	r24, Y+3	; 0x03
    32fc:	9c 81       	ldd	r25, Y+4	; 0x04
    32fe:	00 97       	sbiw	r24, 0x00	; 0
    3300:	61 f0       	breq	.+24     	; 0x331a <GPIO_setupPortDirection+0x54>
    3302:	1e c0       	rjmp	.+60     	; 0x3340 <GPIO_setupPortDirection+0x7a>
    3304:	2b 81       	ldd	r18, Y+3	; 0x03
    3306:	3c 81       	ldd	r19, Y+4	; 0x04
    3308:	22 30       	cpi	r18, 0x02	; 2
    330a:	31 05       	cpc	r19, r1
    330c:	81 f0       	breq	.+32     	; 0x332e <GPIO_setupPortDirection+0x68>
    330e:	8b 81       	ldd	r24, Y+3	; 0x03
    3310:	9c 81       	ldd	r25, Y+4	; 0x04
    3312:	83 30       	cpi	r24, 0x03	; 3
    3314:	91 05       	cpc	r25, r1
    3316:	81 f0       	breq	.+32     	; 0x3338 <GPIO_setupPortDirection+0x72>
    3318:	13 c0       	rjmp	.+38     	; 0x3340 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    331a:	ea e3       	ldi	r30, 0x3A	; 58
    331c:	f0 e0       	ldi	r31, 0x00	; 0
    331e:	8a 81       	ldd	r24, Y+2	; 0x02
    3320:	80 83       	st	Z, r24
    3322:	0e c0       	rjmp	.+28     	; 0x3340 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    3324:	e7 e3       	ldi	r30, 0x37	; 55
    3326:	f0 e0       	ldi	r31, 0x00	; 0
    3328:	8a 81       	ldd	r24, Y+2	; 0x02
    332a:	80 83       	st	Z, r24
    332c:	09 c0       	rjmp	.+18     	; 0x3340 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    332e:	e4 e3       	ldi	r30, 0x34	; 52
    3330:	f0 e0       	ldi	r31, 0x00	; 0
    3332:	8a 81       	ldd	r24, Y+2	; 0x02
    3334:	80 83       	st	Z, r24
    3336:	04 c0       	rjmp	.+8      	; 0x3340 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    3338:	e1 e3       	ldi	r30, 0x31	; 49
    333a:	f0 e0       	ldi	r31, 0x00	; 0
    333c:	8a 81       	ldd	r24, Y+2	; 0x02
    333e:	80 83       	st	Z, r24
			break;
		}
	}
}
    3340:	0f 90       	pop	r0
    3342:	0f 90       	pop	r0
    3344:	0f 90       	pop	r0
    3346:	0f 90       	pop	r0
    3348:	cf 91       	pop	r28
    334a:	df 91       	pop	r29
    334c:	08 95       	ret

0000334e <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    334e:	df 93       	push	r29
    3350:	cf 93       	push	r28
    3352:	00 d0       	rcall	.+0      	; 0x3354 <GPIO_writePort+0x6>
    3354:	00 d0       	rcall	.+0      	; 0x3356 <GPIO_writePort+0x8>
    3356:	cd b7       	in	r28, 0x3d	; 61
    3358:	de b7       	in	r29, 0x3e	; 62
    335a:	89 83       	std	Y+1, r24	; 0x01
    335c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    335e:	89 81       	ldd	r24, Y+1	; 0x01
    3360:	84 30       	cpi	r24, 0x04	; 4
    3362:	90 f5       	brcc	.+100    	; 0x33c8 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    3364:	89 81       	ldd	r24, Y+1	; 0x01
    3366:	28 2f       	mov	r18, r24
    3368:	30 e0       	ldi	r19, 0x00	; 0
    336a:	3c 83       	std	Y+4, r19	; 0x04
    336c:	2b 83       	std	Y+3, r18	; 0x03
    336e:	8b 81       	ldd	r24, Y+3	; 0x03
    3370:	9c 81       	ldd	r25, Y+4	; 0x04
    3372:	81 30       	cpi	r24, 0x01	; 1
    3374:	91 05       	cpc	r25, r1
    3376:	d1 f0       	breq	.+52     	; 0x33ac <GPIO_writePort+0x5e>
    3378:	2b 81       	ldd	r18, Y+3	; 0x03
    337a:	3c 81       	ldd	r19, Y+4	; 0x04
    337c:	22 30       	cpi	r18, 0x02	; 2
    337e:	31 05       	cpc	r19, r1
    3380:	2c f4       	brge	.+10     	; 0x338c <GPIO_writePort+0x3e>
    3382:	8b 81       	ldd	r24, Y+3	; 0x03
    3384:	9c 81       	ldd	r25, Y+4	; 0x04
    3386:	00 97       	sbiw	r24, 0x00	; 0
    3388:	61 f0       	breq	.+24     	; 0x33a2 <GPIO_writePort+0x54>
    338a:	1e c0       	rjmp	.+60     	; 0x33c8 <GPIO_writePort+0x7a>
    338c:	2b 81       	ldd	r18, Y+3	; 0x03
    338e:	3c 81       	ldd	r19, Y+4	; 0x04
    3390:	22 30       	cpi	r18, 0x02	; 2
    3392:	31 05       	cpc	r19, r1
    3394:	81 f0       	breq	.+32     	; 0x33b6 <GPIO_writePort+0x68>
    3396:	8b 81       	ldd	r24, Y+3	; 0x03
    3398:	9c 81       	ldd	r25, Y+4	; 0x04
    339a:	83 30       	cpi	r24, 0x03	; 3
    339c:	91 05       	cpc	r25, r1
    339e:	81 f0       	breq	.+32     	; 0x33c0 <GPIO_writePort+0x72>
    33a0:	13 c0       	rjmp	.+38     	; 0x33c8 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    33a2:	eb e3       	ldi	r30, 0x3B	; 59
    33a4:	f0 e0       	ldi	r31, 0x00	; 0
    33a6:	8a 81       	ldd	r24, Y+2	; 0x02
    33a8:	80 83       	st	Z, r24
    33aa:	0e c0       	rjmp	.+28     	; 0x33c8 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    33ac:	e8 e3       	ldi	r30, 0x38	; 56
    33ae:	f0 e0       	ldi	r31, 0x00	; 0
    33b0:	8a 81       	ldd	r24, Y+2	; 0x02
    33b2:	80 83       	st	Z, r24
    33b4:	09 c0       	rjmp	.+18     	; 0x33c8 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    33b6:	e5 e3       	ldi	r30, 0x35	; 53
    33b8:	f0 e0       	ldi	r31, 0x00	; 0
    33ba:	8a 81       	ldd	r24, Y+2	; 0x02
    33bc:	80 83       	st	Z, r24
    33be:	04 c0       	rjmp	.+8      	; 0x33c8 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    33c0:	e2 e3       	ldi	r30, 0x32	; 50
    33c2:	f0 e0       	ldi	r31, 0x00	; 0
    33c4:	8a 81       	ldd	r24, Y+2	; 0x02
    33c6:	80 83       	st	Z, r24
			break;
		}
	}
}
    33c8:	0f 90       	pop	r0
    33ca:	0f 90       	pop	r0
    33cc:	0f 90       	pop	r0
    33ce:	0f 90       	pop	r0
    33d0:	cf 91       	pop	r28
    33d2:	df 91       	pop	r29
    33d4:	08 95       	ret

000033d6 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    33d6:	df 93       	push	r29
    33d8:	cf 93       	push	r28
    33da:	00 d0       	rcall	.+0      	; 0x33dc <GPIO_readPort+0x6>
    33dc:	00 d0       	rcall	.+0      	; 0x33de <GPIO_readPort+0x8>
    33de:	cd b7       	in	r28, 0x3d	; 61
    33e0:	de b7       	in	r29, 0x3e	; 62
    33e2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    33e4:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    33e6:	8a 81       	ldd	r24, Y+2	; 0x02
    33e8:	84 30       	cpi	r24, 0x04	; 4
    33ea:	90 f5       	brcc	.+100    	; 0x3450 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    33ec:	8a 81       	ldd	r24, Y+2	; 0x02
    33ee:	28 2f       	mov	r18, r24
    33f0:	30 e0       	ldi	r19, 0x00	; 0
    33f2:	3c 83       	std	Y+4, r19	; 0x04
    33f4:	2b 83       	std	Y+3, r18	; 0x03
    33f6:	8b 81       	ldd	r24, Y+3	; 0x03
    33f8:	9c 81       	ldd	r25, Y+4	; 0x04
    33fa:	81 30       	cpi	r24, 0x01	; 1
    33fc:	91 05       	cpc	r25, r1
    33fe:	d1 f0       	breq	.+52     	; 0x3434 <GPIO_readPort+0x5e>
    3400:	2b 81       	ldd	r18, Y+3	; 0x03
    3402:	3c 81       	ldd	r19, Y+4	; 0x04
    3404:	22 30       	cpi	r18, 0x02	; 2
    3406:	31 05       	cpc	r19, r1
    3408:	2c f4       	brge	.+10     	; 0x3414 <GPIO_readPort+0x3e>
    340a:	8b 81       	ldd	r24, Y+3	; 0x03
    340c:	9c 81       	ldd	r25, Y+4	; 0x04
    340e:	00 97       	sbiw	r24, 0x00	; 0
    3410:	61 f0       	breq	.+24     	; 0x342a <GPIO_readPort+0x54>
    3412:	1e c0       	rjmp	.+60     	; 0x3450 <GPIO_readPort+0x7a>
    3414:	2b 81       	ldd	r18, Y+3	; 0x03
    3416:	3c 81       	ldd	r19, Y+4	; 0x04
    3418:	22 30       	cpi	r18, 0x02	; 2
    341a:	31 05       	cpc	r19, r1
    341c:	81 f0       	breq	.+32     	; 0x343e <GPIO_readPort+0x68>
    341e:	8b 81       	ldd	r24, Y+3	; 0x03
    3420:	9c 81       	ldd	r25, Y+4	; 0x04
    3422:	83 30       	cpi	r24, 0x03	; 3
    3424:	91 05       	cpc	r25, r1
    3426:	81 f0       	breq	.+32     	; 0x3448 <GPIO_readPort+0x72>
    3428:	13 c0       	rjmp	.+38     	; 0x3450 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    342a:	e9 e3       	ldi	r30, 0x39	; 57
    342c:	f0 e0       	ldi	r31, 0x00	; 0
    342e:	80 81       	ld	r24, Z
    3430:	89 83       	std	Y+1, r24	; 0x01
    3432:	0e c0       	rjmp	.+28     	; 0x3450 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    3434:	e6 e3       	ldi	r30, 0x36	; 54
    3436:	f0 e0       	ldi	r31, 0x00	; 0
    3438:	80 81       	ld	r24, Z
    343a:	89 83       	std	Y+1, r24	; 0x01
    343c:	09 c0       	rjmp	.+18     	; 0x3450 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    343e:	e3 e3       	ldi	r30, 0x33	; 51
    3440:	f0 e0       	ldi	r31, 0x00	; 0
    3442:	80 81       	ld	r24, Z
    3444:	89 83       	std	Y+1, r24	; 0x01
    3446:	04 c0       	rjmp	.+8      	; 0x3450 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    3448:	e0 e3       	ldi	r30, 0x30	; 48
    344a:	f0 e0       	ldi	r31, 0x00	; 0
    344c:	80 81       	ld	r24, Z
    344e:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    3450:	89 81       	ldd	r24, Y+1	; 0x01
}
    3452:	0f 90       	pop	r0
    3454:	0f 90       	pop	r0
    3456:	0f 90       	pop	r0
    3458:	0f 90       	pop	r0
    345a:	cf 91       	pop	r28
    345c:	df 91       	pop	r29
    345e:	08 95       	ret

00003460 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    3460:	df 93       	push	r29
    3462:	cf 93       	push	r28
    3464:	cd b7       	in	r28, 0x3d	; 61
    3466:	de b7       	in	r29, 0x3e	; 62
    3468:	60 97       	sbiw	r28, 0x10	; 16
    346a:	0f b6       	in	r0, 0x3f	; 63
    346c:	f8 94       	cli
    346e:	de bf       	out	0x3e, r29	; 62
    3470:	0f be       	out	0x3f, r0	; 63
    3472:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    3474:	80 e0       	ldi	r24, 0x00	; 0
    3476:	60 e0       	ldi	r22, 0x00	; 0
    3478:	40 e0       	ldi	r20, 0x00	; 0
    347a:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    347e:	80 e0       	ldi	r24, 0x00	; 0
    3480:	61 e0       	ldi	r22, 0x01	; 1
    3482:	40 e0       	ldi	r20, 0x00	; 0
    3484:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    3488:	80 e0       	ldi	r24, 0x00	; 0
    348a:	62 e0       	ldi	r22, 0x02	; 2
    348c:	40 e0       	ldi	r20, 0x00	; 0
    348e:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    3492:	80 e0       	ldi	r24, 0x00	; 0
    3494:	63 e0       	ldi	r22, 0x03	; 3
    3496:	40 e0       	ldi	r20, 0x00	; 0
    3498:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    349c:	80 e0       	ldi	r24, 0x00	; 0
    349e:	64 e0       	ldi	r22, 0x04	; 4
    34a0:	40 e0       	ldi	r20, 0x00	; 0
    34a2:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    34a6:	80 e0       	ldi	r24, 0x00	; 0
    34a8:	65 e0       	ldi	r22, 0x05	; 5
    34aa:	40 e0       	ldi	r20, 0x00	; 0
    34ac:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    34b0:	80 e0       	ldi	r24, 0x00	; 0
    34b2:	66 e0       	ldi	r22, 0x06	; 6
    34b4:	40 e0       	ldi	r20, 0x00	; 0
    34b6:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    34ba:	80 e0       	ldi	r24, 0x00	; 0
    34bc:	67 e0       	ldi	r22, 0x07	; 7
    34be:	40 e0       	ldi	r20, 0x00	; 0
    34c0:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    34c4:	1f 86       	std	Y+15, r1	; 0x0f
    34c6:	ab c0       	rjmp	.+342    	; 0x361e <KEYPAD_getPressedKey+0x1be>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    34c8:	80 e0       	ldi	r24, 0x00	; 0
    34ca:	6f 85       	ldd	r22, Y+15	; 0x0f
    34cc:	41 e0       	ldi	r20, 0x01	; 1
    34ce:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    34d2:	80 e0       	ldi	r24, 0x00	; 0
    34d4:	6f 85       	ldd	r22, Y+15	; 0x0f
    34d6:	40 e0       	ldi	r20, 0x00	; 0
    34d8:	0e 94 dd 17 	call	0x2fba	; 0x2fba <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    34dc:	18 8a       	std	Y+16, r1	; 0x10
    34de:	22 c0       	rjmp	.+68     	; 0x3524 <KEYPAD_getPressedKey+0xc4>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    34e0:	88 89       	ldd	r24, Y+16	; 0x10
    34e2:	98 2f       	mov	r25, r24
    34e4:	9c 5f       	subi	r25, 0xFC	; 252
    34e6:	80 e0       	ldi	r24, 0x00	; 0
    34e8:	69 2f       	mov	r22, r25
    34ea:	0e 94 c8 18 	call	0x3190	; 0x3190 <GPIO_readPin>
    34ee:	88 23       	and	r24, r24
    34f0:	b1 f4       	brne	.+44     	; 0x351e <KEYPAD_getPressedKey+0xbe>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    34f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    34f4:	88 2f       	mov	r24, r24
    34f6:	90 e0       	ldi	r25, 0x00	; 0
    34f8:	88 0f       	add	r24, r24
    34fa:	99 1f       	adc	r25, r25
    34fc:	88 0f       	add	r24, r24
    34fe:	99 1f       	adc	r25, r25
    3500:	98 2f       	mov	r25, r24
    3502:	88 89       	ldd	r24, Y+16	; 0x10
    3504:	89 0f       	add	r24, r25
    3506:	8f 5f       	subi	r24, 0xFF	; 255
    3508:	0e 94 14 1b 	call	0x3628	; 0x3628 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    350c:	60 96       	adiw	r28, 0x10	; 16
    350e:	0f b6       	in	r0, 0x3f	; 63
    3510:	f8 94       	cli
    3512:	de bf       	out	0x3e, r29	; 62
    3514:	0f be       	out	0x3f, r0	; 63
    3516:	cd bf       	out	0x3d, r28	; 61
    3518:	cf 91       	pop	r28
    351a:	df 91       	pop	r29
    351c:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    351e:	88 89       	ldd	r24, Y+16	; 0x10
    3520:	8f 5f       	subi	r24, 0xFF	; 255
    3522:	88 8b       	std	Y+16, r24	; 0x10
    3524:	88 89       	ldd	r24, Y+16	; 0x10
    3526:	84 30       	cpi	r24, 0x04	; 4
    3528:	d8 f2       	brcs	.-74     	; 0x34e0 <KEYPAD_getPressedKey+0x80>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    352a:	80 e0       	ldi	r24, 0x00	; 0
    352c:	6f 85       	ldd	r22, Y+15	; 0x0f
    352e:	40 e0       	ldi	r20, 0x00	; 0
    3530:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <GPIO_setupPinDirection>
    3534:	80 e0       	ldi	r24, 0x00	; 0
    3536:	90 e0       	ldi	r25, 0x00	; 0
    3538:	a0 ea       	ldi	r26, 0xA0	; 160
    353a:	b0 e4       	ldi	r27, 0x40	; 64
    353c:	8b 87       	std	Y+11, r24	; 0x0b
    353e:	9c 87       	std	Y+12, r25	; 0x0c
    3540:	ad 87       	std	Y+13, r26	; 0x0d
    3542:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3544:	6b 85       	ldd	r22, Y+11	; 0x0b
    3546:	7c 85       	ldd	r23, Y+12	; 0x0c
    3548:	8d 85       	ldd	r24, Y+13	; 0x0d
    354a:	9e 85       	ldd	r25, Y+14	; 0x0e
    354c:	20 e0       	ldi	r18, 0x00	; 0
    354e:	30 e0       	ldi	r19, 0x00	; 0
    3550:	4a ef       	ldi	r20, 0xFA	; 250
    3552:	54 e4       	ldi	r21, 0x44	; 68
    3554:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3558:	dc 01       	movw	r26, r24
    355a:	cb 01       	movw	r24, r22
    355c:	8f 83       	std	Y+7, r24	; 0x07
    355e:	98 87       	std	Y+8, r25	; 0x08
    3560:	a9 87       	std	Y+9, r26	; 0x09
    3562:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3564:	6f 81       	ldd	r22, Y+7	; 0x07
    3566:	78 85       	ldd	r23, Y+8	; 0x08
    3568:	89 85       	ldd	r24, Y+9	; 0x09
    356a:	9a 85       	ldd	r25, Y+10	; 0x0a
    356c:	20 e0       	ldi	r18, 0x00	; 0
    356e:	30 e0       	ldi	r19, 0x00	; 0
    3570:	40 e8       	ldi	r20, 0x80	; 128
    3572:	5f e3       	ldi	r21, 0x3F	; 63
    3574:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3578:	88 23       	and	r24, r24
    357a:	2c f4       	brge	.+10     	; 0x3586 <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
    357c:	81 e0       	ldi	r24, 0x01	; 1
    357e:	90 e0       	ldi	r25, 0x00	; 0
    3580:	9e 83       	std	Y+6, r25	; 0x06
    3582:	8d 83       	std	Y+5, r24	; 0x05
    3584:	3f c0       	rjmp	.+126    	; 0x3604 <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
    3586:	6f 81       	ldd	r22, Y+7	; 0x07
    3588:	78 85       	ldd	r23, Y+8	; 0x08
    358a:	89 85       	ldd	r24, Y+9	; 0x09
    358c:	9a 85       	ldd	r25, Y+10	; 0x0a
    358e:	20 e0       	ldi	r18, 0x00	; 0
    3590:	3f ef       	ldi	r19, 0xFF	; 255
    3592:	4f e7       	ldi	r20, 0x7F	; 127
    3594:	57 e4       	ldi	r21, 0x47	; 71
    3596:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    359a:	18 16       	cp	r1, r24
    359c:	4c f5       	brge	.+82     	; 0x35f0 <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    359e:	6b 85       	ldd	r22, Y+11	; 0x0b
    35a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    35a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    35a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    35a6:	20 e0       	ldi	r18, 0x00	; 0
    35a8:	30 e0       	ldi	r19, 0x00	; 0
    35aa:	40 e2       	ldi	r20, 0x20	; 32
    35ac:	51 e4       	ldi	r21, 0x41	; 65
    35ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35b2:	dc 01       	movw	r26, r24
    35b4:	cb 01       	movw	r24, r22
    35b6:	bc 01       	movw	r22, r24
    35b8:	cd 01       	movw	r24, r26
    35ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35be:	dc 01       	movw	r26, r24
    35c0:	cb 01       	movw	r24, r22
    35c2:	9e 83       	std	Y+6, r25	; 0x06
    35c4:	8d 83       	std	Y+5, r24	; 0x05
    35c6:	0f c0       	rjmp	.+30     	; 0x35e6 <KEYPAD_getPressedKey+0x186>
    35c8:	88 ec       	ldi	r24, 0xC8	; 200
    35ca:	90 e0       	ldi	r25, 0x00	; 0
    35cc:	9c 83       	std	Y+4, r25	; 0x04
    35ce:	8b 83       	std	Y+3, r24	; 0x03
    35d0:	8b 81       	ldd	r24, Y+3	; 0x03
    35d2:	9c 81       	ldd	r25, Y+4	; 0x04
    35d4:	01 97       	sbiw	r24, 0x01	; 1
    35d6:	f1 f7       	brne	.-4      	; 0x35d4 <KEYPAD_getPressedKey+0x174>
    35d8:	9c 83       	std	Y+4, r25	; 0x04
    35da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35dc:	8d 81       	ldd	r24, Y+5	; 0x05
    35de:	9e 81       	ldd	r25, Y+6	; 0x06
    35e0:	01 97       	sbiw	r24, 0x01	; 1
    35e2:	9e 83       	std	Y+6, r25	; 0x06
    35e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35e6:	8d 81       	ldd	r24, Y+5	; 0x05
    35e8:	9e 81       	ldd	r25, Y+6	; 0x06
    35ea:	00 97       	sbiw	r24, 0x00	; 0
    35ec:	69 f7       	brne	.-38     	; 0x35c8 <KEYPAD_getPressedKey+0x168>
    35ee:	14 c0       	rjmp	.+40     	; 0x3618 <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35f0:	6f 81       	ldd	r22, Y+7	; 0x07
    35f2:	78 85       	ldd	r23, Y+8	; 0x08
    35f4:	89 85       	ldd	r24, Y+9	; 0x09
    35f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    35f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35fc:	dc 01       	movw	r26, r24
    35fe:	cb 01       	movw	r24, r22
    3600:	9e 83       	std	Y+6, r25	; 0x06
    3602:	8d 83       	std	Y+5, r24	; 0x05
    3604:	8d 81       	ldd	r24, Y+5	; 0x05
    3606:	9e 81       	ldd	r25, Y+6	; 0x06
    3608:	9a 83       	std	Y+2, r25	; 0x02
    360a:	89 83       	std	Y+1, r24	; 0x01
    360c:	89 81       	ldd	r24, Y+1	; 0x01
    360e:	9a 81       	ldd	r25, Y+2	; 0x02
    3610:	01 97       	sbiw	r24, 0x01	; 1
    3612:	f1 f7       	brne	.-4      	; 0x3610 <KEYPAD_getPressedKey+0x1b0>
    3614:	9a 83       	std	Y+2, r25	; 0x02
    3616:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    3618:	8f 85       	ldd	r24, Y+15	; 0x0f
    361a:	8f 5f       	subi	r24, 0xFF	; 255
    361c:	8f 87       	std	Y+15, r24	; 0x0f
    361e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3620:	84 30       	cpi	r24, 0x04	; 4
    3622:	08 f4       	brcc	.+2      	; 0x3626 <KEYPAD_getPressedKey+0x1c6>
    3624:	51 cf       	rjmp	.-350    	; 0x34c8 <KEYPAD_getPressedKey+0x68>
    3626:	4e cf       	rjmp	.-356    	; 0x34c4 <KEYPAD_getPressedKey+0x64>

00003628 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    3628:	df 93       	push	r29
    362a:	cf 93       	push	r28
    362c:	00 d0       	rcall	.+0      	; 0x362e <KEYPAD_4x4_adjustKeyNumber+0x6>
    362e:	00 d0       	rcall	.+0      	; 0x3630 <KEYPAD_4x4_adjustKeyNumber+0x8>
    3630:	cd b7       	in	r28, 0x3d	; 61
    3632:	de b7       	in	r29, 0x3e	; 62
    3634:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    3636:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    3638:	8a 81       	ldd	r24, Y+2	; 0x02
    363a:	28 2f       	mov	r18, r24
    363c:	30 e0       	ldi	r19, 0x00	; 0
    363e:	3c 83       	std	Y+4, r19	; 0x04
    3640:	2b 83       	std	Y+3, r18	; 0x03
    3642:	8b 81       	ldd	r24, Y+3	; 0x03
    3644:	9c 81       	ldd	r25, Y+4	; 0x04
    3646:	88 30       	cpi	r24, 0x08	; 8
    3648:	91 05       	cpc	r25, r1
    364a:	09 f4       	brne	.+2      	; 0x364e <KEYPAD_4x4_adjustKeyNumber+0x26>
    364c:	70 c0       	rjmp	.+224    	; 0x372e <KEYPAD_4x4_adjustKeyNumber+0x106>
    364e:	2b 81       	ldd	r18, Y+3	; 0x03
    3650:	3c 81       	ldd	r19, Y+4	; 0x04
    3652:	29 30       	cpi	r18, 0x09	; 9
    3654:	31 05       	cpc	r19, r1
    3656:	5c f5       	brge	.+86     	; 0x36ae <KEYPAD_4x4_adjustKeyNumber+0x86>
    3658:	8b 81       	ldd	r24, Y+3	; 0x03
    365a:	9c 81       	ldd	r25, Y+4	; 0x04
    365c:	84 30       	cpi	r24, 0x04	; 4
    365e:	91 05       	cpc	r25, r1
    3660:	09 f4       	brne	.+2      	; 0x3664 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    3662:	59 c0       	rjmp	.+178    	; 0x3716 <KEYPAD_4x4_adjustKeyNumber+0xee>
    3664:	2b 81       	ldd	r18, Y+3	; 0x03
    3666:	3c 81       	ldd	r19, Y+4	; 0x04
    3668:	25 30       	cpi	r18, 0x05	; 5
    366a:	31 05       	cpc	r19, r1
    366c:	9c f4       	brge	.+38     	; 0x3694 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    366e:	8b 81       	ldd	r24, Y+3	; 0x03
    3670:	9c 81       	ldd	r25, Y+4	; 0x04
    3672:	82 30       	cpi	r24, 0x02	; 2
    3674:	91 05       	cpc	r25, r1
    3676:	09 f4       	brne	.+2      	; 0x367a <KEYPAD_4x4_adjustKeyNumber+0x52>
    3678:	48 c0       	rjmp	.+144    	; 0x370a <KEYPAD_4x4_adjustKeyNumber+0xe2>
    367a:	2b 81       	ldd	r18, Y+3	; 0x03
    367c:	3c 81       	ldd	r19, Y+4	; 0x04
    367e:	23 30       	cpi	r18, 0x03	; 3
    3680:	31 05       	cpc	r19, r1
    3682:	0c f0       	brlt	.+2      	; 0x3686 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    3684:	45 c0       	rjmp	.+138    	; 0x3710 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    3686:	8b 81       	ldd	r24, Y+3	; 0x03
    3688:	9c 81       	ldd	r25, Y+4	; 0x04
    368a:	81 30       	cpi	r24, 0x01	; 1
    368c:	91 05       	cpc	r25, r1
    368e:	09 f4       	brne	.+2      	; 0x3692 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    3690:	39 c0       	rjmp	.+114    	; 0x3704 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    3692:	67 c0       	rjmp	.+206    	; 0x3762 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    3694:	2b 81       	ldd	r18, Y+3	; 0x03
    3696:	3c 81       	ldd	r19, Y+4	; 0x04
    3698:	26 30       	cpi	r18, 0x06	; 6
    369a:	31 05       	cpc	r19, r1
    369c:	09 f4       	brne	.+2      	; 0x36a0 <KEYPAD_4x4_adjustKeyNumber+0x78>
    369e:	41 c0       	rjmp	.+130    	; 0x3722 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    36a0:	8b 81       	ldd	r24, Y+3	; 0x03
    36a2:	9c 81       	ldd	r25, Y+4	; 0x04
    36a4:	87 30       	cpi	r24, 0x07	; 7
    36a6:	91 05       	cpc	r25, r1
    36a8:	0c f0       	brlt	.+2      	; 0x36ac <KEYPAD_4x4_adjustKeyNumber+0x84>
    36aa:	3e c0       	rjmp	.+124    	; 0x3728 <KEYPAD_4x4_adjustKeyNumber+0x100>
    36ac:	37 c0       	rjmp	.+110    	; 0x371c <KEYPAD_4x4_adjustKeyNumber+0xf4>
    36ae:	2b 81       	ldd	r18, Y+3	; 0x03
    36b0:	3c 81       	ldd	r19, Y+4	; 0x04
    36b2:	2c 30       	cpi	r18, 0x0C	; 12
    36b4:	31 05       	cpc	r19, r1
    36b6:	09 f4       	brne	.+2      	; 0x36ba <KEYPAD_4x4_adjustKeyNumber+0x92>
    36b8:	46 c0       	rjmp	.+140    	; 0x3746 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    36ba:	8b 81       	ldd	r24, Y+3	; 0x03
    36bc:	9c 81       	ldd	r25, Y+4	; 0x04
    36be:	8d 30       	cpi	r24, 0x0D	; 13
    36c0:	91 05       	cpc	r25, r1
    36c2:	5c f4       	brge	.+22     	; 0x36da <KEYPAD_4x4_adjustKeyNumber+0xb2>
    36c4:	2b 81       	ldd	r18, Y+3	; 0x03
    36c6:	3c 81       	ldd	r19, Y+4	; 0x04
    36c8:	2a 30       	cpi	r18, 0x0A	; 10
    36ca:	31 05       	cpc	r19, r1
    36cc:	b1 f1       	breq	.+108    	; 0x373a <KEYPAD_4x4_adjustKeyNumber+0x112>
    36ce:	8b 81       	ldd	r24, Y+3	; 0x03
    36d0:	9c 81       	ldd	r25, Y+4	; 0x04
    36d2:	8b 30       	cpi	r24, 0x0B	; 11
    36d4:	91 05       	cpc	r25, r1
    36d6:	a4 f5       	brge	.+104    	; 0x3740 <KEYPAD_4x4_adjustKeyNumber+0x118>
    36d8:	2d c0       	rjmp	.+90     	; 0x3734 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    36da:	2b 81       	ldd	r18, Y+3	; 0x03
    36dc:	3c 81       	ldd	r19, Y+4	; 0x04
    36de:	2e 30       	cpi	r18, 0x0E	; 14
    36e0:	31 05       	cpc	r19, r1
    36e2:	b9 f1       	breq	.+110    	; 0x3752 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    36e4:	8b 81       	ldd	r24, Y+3	; 0x03
    36e6:	9c 81       	ldd	r25, Y+4	; 0x04
    36e8:	8e 30       	cpi	r24, 0x0E	; 14
    36ea:	91 05       	cpc	r25, r1
    36ec:	7c f1       	brlt	.+94     	; 0x374c <KEYPAD_4x4_adjustKeyNumber+0x124>
    36ee:	2b 81       	ldd	r18, Y+3	; 0x03
    36f0:	3c 81       	ldd	r19, Y+4	; 0x04
    36f2:	2f 30       	cpi	r18, 0x0F	; 15
    36f4:	31 05       	cpc	r19, r1
    36f6:	79 f1       	breq	.+94     	; 0x3756 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    36f8:	8b 81       	ldd	r24, Y+3	; 0x03
    36fa:	9c 81       	ldd	r25, Y+4	; 0x04
    36fc:	80 31       	cpi	r24, 0x10	; 16
    36fe:	91 05       	cpc	r25, r1
    3700:	69 f1       	breq	.+90     	; 0x375c <KEYPAD_4x4_adjustKeyNumber+0x134>
    3702:	2f c0       	rjmp	.+94     	; 0x3762 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    3704:	87 e0       	ldi	r24, 0x07	; 7
    3706:	89 83       	std	Y+1, r24	; 0x01
    3708:	2e c0       	rjmp	.+92     	; 0x3766 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    370a:	88 e0       	ldi	r24, 0x08	; 8
    370c:	89 83       	std	Y+1, r24	; 0x01
    370e:	2b c0       	rjmp	.+86     	; 0x3766 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    3710:	89 e0       	ldi	r24, 0x09	; 9
    3712:	89 83       	std	Y+1, r24	; 0x01
    3714:	28 c0       	rjmp	.+80     	; 0x3766 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    3716:	85 e2       	ldi	r24, 0x25	; 37
    3718:	89 83       	std	Y+1, r24	; 0x01
    371a:	25 c0       	rjmp	.+74     	; 0x3766 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    371c:	84 e0       	ldi	r24, 0x04	; 4
    371e:	89 83       	std	Y+1, r24	; 0x01
    3720:	22 c0       	rjmp	.+68     	; 0x3766 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    3722:	85 e0       	ldi	r24, 0x05	; 5
    3724:	89 83       	std	Y+1, r24	; 0x01
    3726:	1f c0       	rjmp	.+62     	; 0x3766 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    3728:	86 e0       	ldi	r24, 0x06	; 6
    372a:	89 83       	std	Y+1, r24	; 0x01
    372c:	1c c0       	rjmp	.+56     	; 0x3766 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    372e:	8a e2       	ldi	r24, 0x2A	; 42
    3730:	89 83       	std	Y+1, r24	; 0x01
    3732:	19 c0       	rjmp	.+50     	; 0x3766 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    3734:	81 e0       	ldi	r24, 0x01	; 1
    3736:	89 83       	std	Y+1, r24	; 0x01
    3738:	16 c0       	rjmp	.+44     	; 0x3766 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    373a:	82 e0       	ldi	r24, 0x02	; 2
    373c:	89 83       	std	Y+1, r24	; 0x01
    373e:	13 c0       	rjmp	.+38     	; 0x3766 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    3740:	83 e0       	ldi	r24, 0x03	; 3
    3742:	89 83       	std	Y+1, r24	; 0x01
    3744:	10 c0       	rjmp	.+32     	; 0x3766 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    3746:	8d e2       	ldi	r24, 0x2D	; 45
    3748:	89 83       	std	Y+1, r24	; 0x01
    374a:	0d c0       	rjmp	.+26     	; 0x3766 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    374c:	8d e0       	ldi	r24, 0x0D	; 13
    374e:	89 83       	std	Y+1, r24	; 0x01
    3750:	0a c0       	rjmp	.+20     	; 0x3766 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    3752:	19 82       	std	Y+1, r1	; 0x01
    3754:	08 c0       	rjmp	.+16     	; 0x3766 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    3756:	8d e3       	ldi	r24, 0x3D	; 61
    3758:	89 83       	std	Y+1, r24	; 0x01
    375a:	05 c0       	rjmp	.+10     	; 0x3766 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    375c:	8b e2       	ldi	r24, 0x2B	; 43
    375e:	89 83       	std	Y+1, r24	; 0x01
    3760:	02 c0       	rjmp	.+4      	; 0x3766 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    3762:	8a 81       	ldd	r24, Y+2	; 0x02
    3764:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    3766:	89 81       	ldd	r24, Y+1	; 0x01
} 
    3768:	0f 90       	pop	r0
    376a:	0f 90       	pop	r0
    376c:	0f 90       	pop	r0
    376e:	0f 90       	pop	r0
    3770:	cf 91       	pop	r28
    3772:	df 91       	pop	r29
    3774:	08 95       	ret

00003776 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 8-bits.
 */
void LCD_init(void)
{
    3776:	df 93       	push	r29
    3778:	cf 93       	push	r28
    377a:	cd b7       	in	r28, 0x3d	; 61
    377c:	de b7       	in	r29, 0x3e	; 62
    377e:	2e 97       	sbiw	r28, 0x0e	; 14
    3780:	0f b6       	in	r0, 0x3f	; 63
    3782:	f8 94       	cli
    3784:	de bf       	out	0x3e, r29	; 62
    3786:	0f be       	out	0x3f, r0	; 63
    3788:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    378a:	83 e0       	ldi	r24, 0x03	; 3
    378c:	64 e0       	ldi	r22, 0x04	; 4
    378e:	41 e0       	ldi	r20, 0x01	; 1
    3790:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    3794:	83 e0       	ldi	r24, 0x03	; 3
    3796:	65 e0       	ldi	r22, 0x05	; 5
    3798:	41 e0       	ldi	r20, 0x01	; 1
    379a:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    379e:	82 e0       	ldi	r24, 0x02	; 2
    37a0:	6f ef       	ldi	r22, 0xFF	; 255
    37a2:	0e 94 63 19 	call	0x32c6	; 0x32c6 <GPIO_setupPortDirection>
    37a6:	80 e0       	ldi	r24, 0x00	; 0
    37a8:	90 e0       	ldi	r25, 0x00	; 0
    37aa:	a0 ea       	ldi	r26, 0xA0	; 160
    37ac:	b1 e4       	ldi	r27, 0x41	; 65
    37ae:	8b 87       	std	Y+11, r24	; 0x0b
    37b0:	9c 87       	std	Y+12, r25	; 0x0c
    37b2:	ad 87       	std	Y+13, r26	; 0x0d
    37b4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    37b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    37ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    37bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    37be:	20 e0       	ldi	r18, 0x00	; 0
    37c0:	30 e0       	ldi	r19, 0x00	; 0
    37c2:	4a ef       	ldi	r20, 0xFA	; 250
    37c4:	54 e4       	ldi	r21, 0x44	; 68
    37c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37ca:	dc 01       	movw	r26, r24
    37cc:	cb 01       	movw	r24, r22
    37ce:	8f 83       	std	Y+7, r24	; 0x07
    37d0:	98 87       	std	Y+8, r25	; 0x08
    37d2:	a9 87       	std	Y+9, r26	; 0x09
    37d4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    37d6:	6f 81       	ldd	r22, Y+7	; 0x07
    37d8:	78 85       	ldd	r23, Y+8	; 0x08
    37da:	89 85       	ldd	r24, Y+9	; 0x09
    37dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    37de:	20 e0       	ldi	r18, 0x00	; 0
    37e0:	30 e0       	ldi	r19, 0x00	; 0
    37e2:	40 e8       	ldi	r20, 0x80	; 128
    37e4:	5f e3       	ldi	r21, 0x3F	; 63
    37e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    37ea:	88 23       	and	r24, r24
    37ec:	2c f4       	brge	.+10     	; 0x37f8 <LCD_init+0x82>
		__ticks = 1;
    37ee:	81 e0       	ldi	r24, 0x01	; 1
    37f0:	90 e0       	ldi	r25, 0x00	; 0
    37f2:	9e 83       	std	Y+6, r25	; 0x06
    37f4:	8d 83       	std	Y+5, r24	; 0x05
    37f6:	3f c0       	rjmp	.+126    	; 0x3876 <LCD_init+0x100>
	else if (__tmp > 65535)
    37f8:	6f 81       	ldd	r22, Y+7	; 0x07
    37fa:	78 85       	ldd	r23, Y+8	; 0x08
    37fc:	89 85       	ldd	r24, Y+9	; 0x09
    37fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3800:	20 e0       	ldi	r18, 0x00	; 0
    3802:	3f ef       	ldi	r19, 0xFF	; 255
    3804:	4f e7       	ldi	r20, 0x7F	; 127
    3806:	57 e4       	ldi	r21, 0x47	; 71
    3808:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    380c:	18 16       	cp	r1, r24
    380e:	4c f5       	brge	.+82     	; 0x3862 <LCD_init+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3810:	6b 85       	ldd	r22, Y+11	; 0x0b
    3812:	7c 85       	ldd	r23, Y+12	; 0x0c
    3814:	8d 85       	ldd	r24, Y+13	; 0x0d
    3816:	9e 85       	ldd	r25, Y+14	; 0x0e
    3818:	20 e0       	ldi	r18, 0x00	; 0
    381a:	30 e0       	ldi	r19, 0x00	; 0
    381c:	40 e2       	ldi	r20, 0x20	; 32
    381e:	51 e4       	ldi	r21, 0x41	; 65
    3820:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3824:	dc 01       	movw	r26, r24
    3826:	cb 01       	movw	r24, r22
    3828:	bc 01       	movw	r22, r24
    382a:	cd 01       	movw	r24, r26
    382c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3830:	dc 01       	movw	r26, r24
    3832:	cb 01       	movw	r24, r22
    3834:	9e 83       	std	Y+6, r25	; 0x06
    3836:	8d 83       	std	Y+5, r24	; 0x05
    3838:	0f c0       	rjmp	.+30     	; 0x3858 <LCD_init+0xe2>
    383a:	88 ec       	ldi	r24, 0xC8	; 200
    383c:	90 e0       	ldi	r25, 0x00	; 0
    383e:	9c 83       	std	Y+4, r25	; 0x04
    3840:	8b 83       	std	Y+3, r24	; 0x03
    3842:	8b 81       	ldd	r24, Y+3	; 0x03
    3844:	9c 81       	ldd	r25, Y+4	; 0x04
    3846:	01 97       	sbiw	r24, 0x01	; 1
    3848:	f1 f7       	brne	.-4      	; 0x3846 <LCD_init+0xd0>
    384a:	9c 83       	std	Y+4, r25	; 0x04
    384c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    384e:	8d 81       	ldd	r24, Y+5	; 0x05
    3850:	9e 81       	ldd	r25, Y+6	; 0x06
    3852:	01 97       	sbiw	r24, 0x01	; 1
    3854:	9e 83       	std	Y+6, r25	; 0x06
    3856:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3858:	8d 81       	ldd	r24, Y+5	; 0x05
    385a:	9e 81       	ldd	r25, Y+6	; 0x06
    385c:	00 97       	sbiw	r24, 0x00	; 0
    385e:	69 f7       	brne	.-38     	; 0x383a <LCD_init+0xc4>
    3860:	14 c0       	rjmp	.+40     	; 0x388a <LCD_init+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3862:	6f 81       	ldd	r22, Y+7	; 0x07
    3864:	78 85       	ldd	r23, Y+8	; 0x08
    3866:	89 85       	ldd	r24, Y+9	; 0x09
    3868:	9a 85       	ldd	r25, Y+10	; 0x0a
    386a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    386e:	dc 01       	movw	r26, r24
    3870:	cb 01       	movw	r24, r22
    3872:	9e 83       	std	Y+6, r25	; 0x06
    3874:	8d 83       	std	Y+5, r24	; 0x05
    3876:	8d 81       	ldd	r24, Y+5	; 0x05
    3878:	9e 81       	ldd	r25, Y+6	; 0x06
    387a:	9a 83       	std	Y+2, r25	; 0x02
    387c:	89 83       	std	Y+1, r24	; 0x01
    387e:	89 81       	ldd	r24, Y+1	; 0x01
    3880:	9a 81       	ldd	r25, Y+2	; 0x02
    3882:	01 97       	sbiw	r24, 0x01	; 1
    3884:	f1 f7       	brne	.-4      	; 0x3882 <LCD_init+0x10c>
    3886:	9a 83       	std	Y+2, r25	; 0x02
    3888:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    388a:	88 e3       	ldi	r24, 0x38	; 56
    388c:	0e 94 57 1c 	call	0x38ae	; 0x38ae <LCD_sendCommand>
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    3890:	8c e0       	ldi	r24, 0x0C	; 12
    3892:	0e 94 57 1c 	call	0x38ae	; 0x38ae <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    3896:	81 e0       	ldi	r24, 0x01	; 1
    3898:	0e 94 57 1c 	call	0x38ae	; 0x38ae <LCD_sendCommand>
}
    389c:	2e 96       	adiw	r28, 0x0e	; 14
    389e:	0f b6       	in	r0, 0x3f	; 63
    38a0:	f8 94       	cli
    38a2:	de bf       	out	0x3e, r29	; 62
    38a4:	0f be       	out	0x3f, r0	; 63
    38a6:	cd bf       	out	0x3d, r28	; 61
    38a8:	cf 91       	pop	r28
    38aa:	df 91       	pop	r29
    38ac:	08 95       	ret

000038ae <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    38ae:	df 93       	push	r29
    38b0:	cf 93       	push	r28
    38b2:	cd b7       	in	r28, 0x3d	; 61
    38b4:	de b7       	in	r29, 0x3e	; 62
    38b6:	e9 97       	sbiw	r28, 0x39	; 57
    38b8:	0f b6       	in	r0, 0x3f	; 63
    38ba:	f8 94       	cli
    38bc:	de bf       	out	0x3e, r29	; 62
    38be:	0f be       	out	0x3f, r0	; 63
    38c0:	cd bf       	out	0x3d, r28	; 61
    38c2:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    38c4:	83 e0       	ldi	r24, 0x03	; 3
    38c6:	64 e0       	ldi	r22, 0x04	; 4
    38c8:	40 e0       	ldi	r20, 0x00	; 0
    38ca:	0e 94 dd 17 	call	0x2fba	; 0x2fba <GPIO_writePin>
    38ce:	80 e0       	ldi	r24, 0x00	; 0
    38d0:	90 e0       	ldi	r25, 0x00	; 0
    38d2:	a0 e8       	ldi	r26, 0x80	; 128
    38d4:	bf e3       	ldi	r27, 0x3F	; 63
    38d6:	8d ab       	std	Y+53, r24	; 0x35
    38d8:	9e ab       	std	Y+54, r25	; 0x36
    38da:	af ab       	std	Y+55, r26	; 0x37
    38dc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38de:	6d a9       	ldd	r22, Y+53	; 0x35
    38e0:	7e a9       	ldd	r23, Y+54	; 0x36
    38e2:	8f a9       	ldd	r24, Y+55	; 0x37
    38e4:	98 ad       	ldd	r25, Y+56	; 0x38
    38e6:	20 e0       	ldi	r18, 0x00	; 0
    38e8:	30 e0       	ldi	r19, 0x00	; 0
    38ea:	4a ef       	ldi	r20, 0xFA	; 250
    38ec:	54 e4       	ldi	r21, 0x44	; 68
    38ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38f2:	dc 01       	movw	r26, r24
    38f4:	cb 01       	movw	r24, r22
    38f6:	89 ab       	std	Y+49, r24	; 0x31
    38f8:	9a ab       	std	Y+50, r25	; 0x32
    38fa:	ab ab       	std	Y+51, r26	; 0x33
    38fc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    38fe:	69 a9       	ldd	r22, Y+49	; 0x31
    3900:	7a a9       	ldd	r23, Y+50	; 0x32
    3902:	8b a9       	ldd	r24, Y+51	; 0x33
    3904:	9c a9       	ldd	r25, Y+52	; 0x34
    3906:	20 e0       	ldi	r18, 0x00	; 0
    3908:	30 e0       	ldi	r19, 0x00	; 0
    390a:	40 e8       	ldi	r20, 0x80	; 128
    390c:	5f e3       	ldi	r21, 0x3F	; 63
    390e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3912:	88 23       	and	r24, r24
    3914:	2c f4       	brge	.+10     	; 0x3920 <LCD_sendCommand+0x72>
		__ticks = 1;
    3916:	81 e0       	ldi	r24, 0x01	; 1
    3918:	90 e0       	ldi	r25, 0x00	; 0
    391a:	98 ab       	std	Y+48, r25	; 0x30
    391c:	8f a7       	std	Y+47, r24	; 0x2f
    391e:	3f c0       	rjmp	.+126    	; 0x399e <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    3920:	69 a9       	ldd	r22, Y+49	; 0x31
    3922:	7a a9       	ldd	r23, Y+50	; 0x32
    3924:	8b a9       	ldd	r24, Y+51	; 0x33
    3926:	9c a9       	ldd	r25, Y+52	; 0x34
    3928:	20 e0       	ldi	r18, 0x00	; 0
    392a:	3f ef       	ldi	r19, 0xFF	; 255
    392c:	4f e7       	ldi	r20, 0x7F	; 127
    392e:	57 e4       	ldi	r21, 0x47	; 71
    3930:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3934:	18 16       	cp	r1, r24
    3936:	4c f5       	brge	.+82     	; 0x398a <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3938:	6d a9       	ldd	r22, Y+53	; 0x35
    393a:	7e a9       	ldd	r23, Y+54	; 0x36
    393c:	8f a9       	ldd	r24, Y+55	; 0x37
    393e:	98 ad       	ldd	r25, Y+56	; 0x38
    3940:	20 e0       	ldi	r18, 0x00	; 0
    3942:	30 e0       	ldi	r19, 0x00	; 0
    3944:	40 e2       	ldi	r20, 0x20	; 32
    3946:	51 e4       	ldi	r21, 0x41	; 65
    3948:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    394c:	dc 01       	movw	r26, r24
    394e:	cb 01       	movw	r24, r22
    3950:	bc 01       	movw	r22, r24
    3952:	cd 01       	movw	r24, r26
    3954:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3958:	dc 01       	movw	r26, r24
    395a:	cb 01       	movw	r24, r22
    395c:	98 ab       	std	Y+48, r25	; 0x30
    395e:	8f a7       	std	Y+47, r24	; 0x2f
    3960:	0f c0       	rjmp	.+30     	; 0x3980 <LCD_sendCommand+0xd2>
    3962:	88 ec       	ldi	r24, 0xC8	; 200
    3964:	90 e0       	ldi	r25, 0x00	; 0
    3966:	9e a7       	std	Y+46, r25	; 0x2e
    3968:	8d a7       	std	Y+45, r24	; 0x2d
    396a:	8d a5       	ldd	r24, Y+45	; 0x2d
    396c:	9e a5       	ldd	r25, Y+46	; 0x2e
    396e:	01 97       	sbiw	r24, 0x01	; 1
    3970:	f1 f7       	brne	.-4      	; 0x396e <LCD_sendCommand+0xc0>
    3972:	9e a7       	std	Y+46, r25	; 0x2e
    3974:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3976:	8f a5       	ldd	r24, Y+47	; 0x2f
    3978:	98 a9       	ldd	r25, Y+48	; 0x30
    397a:	01 97       	sbiw	r24, 0x01	; 1
    397c:	98 ab       	std	Y+48, r25	; 0x30
    397e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3980:	8f a5       	ldd	r24, Y+47	; 0x2f
    3982:	98 a9       	ldd	r25, Y+48	; 0x30
    3984:	00 97       	sbiw	r24, 0x00	; 0
    3986:	69 f7       	brne	.-38     	; 0x3962 <LCD_sendCommand+0xb4>
    3988:	14 c0       	rjmp	.+40     	; 0x39b2 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    398a:	69 a9       	ldd	r22, Y+49	; 0x31
    398c:	7a a9       	ldd	r23, Y+50	; 0x32
    398e:	8b a9       	ldd	r24, Y+51	; 0x33
    3990:	9c a9       	ldd	r25, Y+52	; 0x34
    3992:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3996:	dc 01       	movw	r26, r24
    3998:	cb 01       	movw	r24, r22
    399a:	98 ab       	std	Y+48, r25	; 0x30
    399c:	8f a7       	std	Y+47, r24	; 0x2f
    399e:	8f a5       	ldd	r24, Y+47	; 0x2f
    39a0:	98 a9       	ldd	r25, Y+48	; 0x30
    39a2:	9c a7       	std	Y+44, r25	; 0x2c
    39a4:	8b a7       	std	Y+43, r24	; 0x2b
    39a6:	8b a5       	ldd	r24, Y+43	; 0x2b
    39a8:	9c a5       	ldd	r25, Y+44	; 0x2c
    39aa:	01 97       	sbiw	r24, 0x01	; 1
    39ac:	f1 f7       	brne	.-4      	; 0x39aa <LCD_sendCommand+0xfc>
    39ae:	9c a7       	std	Y+44, r25	; 0x2c
    39b0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    39b2:	83 e0       	ldi	r24, 0x03	; 3
    39b4:	65 e0       	ldi	r22, 0x05	; 5
    39b6:	41 e0       	ldi	r20, 0x01	; 1
    39b8:	0e 94 dd 17 	call	0x2fba	; 0x2fba <GPIO_writePin>
    39bc:	80 e0       	ldi	r24, 0x00	; 0
    39be:	90 e0       	ldi	r25, 0x00	; 0
    39c0:	a0 e8       	ldi	r26, 0x80	; 128
    39c2:	bf e3       	ldi	r27, 0x3F	; 63
    39c4:	8f a3       	std	Y+39, r24	; 0x27
    39c6:	98 a7       	std	Y+40, r25	; 0x28
    39c8:	a9 a7       	std	Y+41, r26	; 0x29
    39ca:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39cc:	6f a1       	ldd	r22, Y+39	; 0x27
    39ce:	78 a5       	ldd	r23, Y+40	; 0x28
    39d0:	89 a5       	ldd	r24, Y+41	; 0x29
    39d2:	9a a5       	ldd	r25, Y+42	; 0x2a
    39d4:	20 e0       	ldi	r18, 0x00	; 0
    39d6:	30 e0       	ldi	r19, 0x00	; 0
    39d8:	4a ef       	ldi	r20, 0xFA	; 250
    39da:	54 e4       	ldi	r21, 0x44	; 68
    39dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39e0:	dc 01       	movw	r26, r24
    39e2:	cb 01       	movw	r24, r22
    39e4:	8b a3       	std	Y+35, r24	; 0x23
    39e6:	9c a3       	std	Y+36, r25	; 0x24
    39e8:	ad a3       	std	Y+37, r26	; 0x25
    39ea:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    39ec:	6b a1       	ldd	r22, Y+35	; 0x23
    39ee:	7c a1       	ldd	r23, Y+36	; 0x24
    39f0:	8d a1       	ldd	r24, Y+37	; 0x25
    39f2:	9e a1       	ldd	r25, Y+38	; 0x26
    39f4:	20 e0       	ldi	r18, 0x00	; 0
    39f6:	30 e0       	ldi	r19, 0x00	; 0
    39f8:	40 e8       	ldi	r20, 0x80	; 128
    39fa:	5f e3       	ldi	r21, 0x3F	; 63
    39fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a00:	88 23       	and	r24, r24
    3a02:	2c f4       	brge	.+10     	; 0x3a0e <LCD_sendCommand+0x160>
		__ticks = 1;
    3a04:	81 e0       	ldi	r24, 0x01	; 1
    3a06:	90 e0       	ldi	r25, 0x00	; 0
    3a08:	9a a3       	std	Y+34, r25	; 0x22
    3a0a:	89 a3       	std	Y+33, r24	; 0x21
    3a0c:	3f c0       	rjmp	.+126    	; 0x3a8c <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    3a0e:	6b a1       	ldd	r22, Y+35	; 0x23
    3a10:	7c a1       	ldd	r23, Y+36	; 0x24
    3a12:	8d a1       	ldd	r24, Y+37	; 0x25
    3a14:	9e a1       	ldd	r25, Y+38	; 0x26
    3a16:	20 e0       	ldi	r18, 0x00	; 0
    3a18:	3f ef       	ldi	r19, 0xFF	; 255
    3a1a:	4f e7       	ldi	r20, 0x7F	; 127
    3a1c:	57 e4       	ldi	r21, 0x47	; 71
    3a1e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a22:	18 16       	cp	r1, r24
    3a24:	4c f5       	brge	.+82     	; 0x3a78 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a26:	6f a1       	ldd	r22, Y+39	; 0x27
    3a28:	78 a5       	ldd	r23, Y+40	; 0x28
    3a2a:	89 a5       	ldd	r24, Y+41	; 0x29
    3a2c:	9a a5       	ldd	r25, Y+42	; 0x2a
    3a2e:	20 e0       	ldi	r18, 0x00	; 0
    3a30:	30 e0       	ldi	r19, 0x00	; 0
    3a32:	40 e2       	ldi	r20, 0x20	; 32
    3a34:	51 e4       	ldi	r21, 0x41	; 65
    3a36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a3a:	dc 01       	movw	r26, r24
    3a3c:	cb 01       	movw	r24, r22
    3a3e:	bc 01       	movw	r22, r24
    3a40:	cd 01       	movw	r24, r26
    3a42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a46:	dc 01       	movw	r26, r24
    3a48:	cb 01       	movw	r24, r22
    3a4a:	9a a3       	std	Y+34, r25	; 0x22
    3a4c:	89 a3       	std	Y+33, r24	; 0x21
    3a4e:	0f c0       	rjmp	.+30     	; 0x3a6e <LCD_sendCommand+0x1c0>
    3a50:	88 ec       	ldi	r24, 0xC8	; 200
    3a52:	90 e0       	ldi	r25, 0x00	; 0
    3a54:	98 a3       	std	Y+32, r25	; 0x20
    3a56:	8f 8f       	std	Y+31, r24	; 0x1f
    3a58:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3a5a:	98 a1       	ldd	r25, Y+32	; 0x20
    3a5c:	01 97       	sbiw	r24, 0x01	; 1
    3a5e:	f1 f7       	brne	.-4      	; 0x3a5c <LCD_sendCommand+0x1ae>
    3a60:	98 a3       	std	Y+32, r25	; 0x20
    3a62:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a64:	89 a1       	ldd	r24, Y+33	; 0x21
    3a66:	9a a1       	ldd	r25, Y+34	; 0x22
    3a68:	01 97       	sbiw	r24, 0x01	; 1
    3a6a:	9a a3       	std	Y+34, r25	; 0x22
    3a6c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a6e:	89 a1       	ldd	r24, Y+33	; 0x21
    3a70:	9a a1       	ldd	r25, Y+34	; 0x22
    3a72:	00 97       	sbiw	r24, 0x00	; 0
    3a74:	69 f7       	brne	.-38     	; 0x3a50 <LCD_sendCommand+0x1a2>
    3a76:	14 c0       	rjmp	.+40     	; 0x3aa0 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a78:	6b a1       	ldd	r22, Y+35	; 0x23
    3a7a:	7c a1       	ldd	r23, Y+36	; 0x24
    3a7c:	8d a1       	ldd	r24, Y+37	; 0x25
    3a7e:	9e a1       	ldd	r25, Y+38	; 0x26
    3a80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a84:	dc 01       	movw	r26, r24
    3a86:	cb 01       	movw	r24, r22
    3a88:	9a a3       	std	Y+34, r25	; 0x22
    3a8a:	89 a3       	std	Y+33, r24	; 0x21
    3a8c:	89 a1       	ldd	r24, Y+33	; 0x21
    3a8e:	9a a1       	ldd	r25, Y+34	; 0x22
    3a90:	9e 8f       	std	Y+30, r25	; 0x1e
    3a92:	8d 8f       	std	Y+29, r24	; 0x1d
    3a94:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a96:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3a98:	01 97       	sbiw	r24, 0x01	; 1
    3a9a:	f1 f7       	brne	.-4      	; 0x3a98 <LCD_sendCommand+0x1ea>
    3a9c:	9e 8f       	std	Y+30, r25	; 0x1e
    3a9e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    3aa0:	82 e0       	ldi	r24, 0x02	; 2
    3aa2:	69 ad       	ldd	r22, Y+57	; 0x39
    3aa4:	0e 94 a7 19 	call	0x334e	; 0x334e <GPIO_writePort>
    3aa8:	80 e0       	ldi	r24, 0x00	; 0
    3aaa:	90 e0       	ldi	r25, 0x00	; 0
    3aac:	a0 e8       	ldi	r26, 0x80	; 128
    3aae:	bf e3       	ldi	r27, 0x3F	; 63
    3ab0:	89 8f       	std	Y+25, r24	; 0x19
    3ab2:	9a 8f       	std	Y+26, r25	; 0x1a
    3ab4:	ab 8f       	std	Y+27, r26	; 0x1b
    3ab6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ab8:	69 8d       	ldd	r22, Y+25	; 0x19
    3aba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3abc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3abe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ac0:	20 e0       	ldi	r18, 0x00	; 0
    3ac2:	30 e0       	ldi	r19, 0x00	; 0
    3ac4:	4a ef       	ldi	r20, 0xFA	; 250
    3ac6:	54 e4       	ldi	r21, 0x44	; 68
    3ac8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3acc:	dc 01       	movw	r26, r24
    3ace:	cb 01       	movw	r24, r22
    3ad0:	8d 8b       	std	Y+21, r24	; 0x15
    3ad2:	9e 8b       	std	Y+22, r25	; 0x16
    3ad4:	af 8b       	std	Y+23, r26	; 0x17
    3ad6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3ad8:	6d 89       	ldd	r22, Y+21	; 0x15
    3ada:	7e 89       	ldd	r23, Y+22	; 0x16
    3adc:	8f 89       	ldd	r24, Y+23	; 0x17
    3ade:	98 8d       	ldd	r25, Y+24	; 0x18
    3ae0:	20 e0       	ldi	r18, 0x00	; 0
    3ae2:	30 e0       	ldi	r19, 0x00	; 0
    3ae4:	40 e8       	ldi	r20, 0x80	; 128
    3ae6:	5f e3       	ldi	r21, 0x3F	; 63
    3ae8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3aec:	88 23       	and	r24, r24
    3aee:	2c f4       	brge	.+10     	; 0x3afa <LCD_sendCommand+0x24c>
		__ticks = 1;
    3af0:	81 e0       	ldi	r24, 0x01	; 1
    3af2:	90 e0       	ldi	r25, 0x00	; 0
    3af4:	9c 8b       	std	Y+20, r25	; 0x14
    3af6:	8b 8b       	std	Y+19, r24	; 0x13
    3af8:	3f c0       	rjmp	.+126    	; 0x3b78 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    3afa:	6d 89       	ldd	r22, Y+21	; 0x15
    3afc:	7e 89       	ldd	r23, Y+22	; 0x16
    3afe:	8f 89       	ldd	r24, Y+23	; 0x17
    3b00:	98 8d       	ldd	r25, Y+24	; 0x18
    3b02:	20 e0       	ldi	r18, 0x00	; 0
    3b04:	3f ef       	ldi	r19, 0xFF	; 255
    3b06:	4f e7       	ldi	r20, 0x7F	; 127
    3b08:	57 e4       	ldi	r21, 0x47	; 71
    3b0a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3b0e:	18 16       	cp	r1, r24
    3b10:	4c f5       	brge	.+82     	; 0x3b64 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b12:	69 8d       	ldd	r22, Y+25	; 0x19
    3b14:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b16:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b18:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b1a:	20 e0       	ldi	r18, 0x00	; 0
    3b1c:	30 e0       	ldi	r19, 0x00	; 0
    3b1e:	40 e2       	ldi	r20, 0x20	; 32
    3b20:	51 e4       	ldi	r21, 0x41	; 65
    3b22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b26:	dc 01       	movw	r26, r24
    3b28:	cb 01       	movw	r24, r22
    3b2a:	bc 01       	movw	r22, r24
    3b2c:	cd 01       	movw	r24, r26
    3b2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b32:	dc 01       	movw	r26, r24
    3b34:	cb 01       	movw	r24, r22
    3b36:	9c 8b       	std	Y+20, r25	; 0x14
    3b38:	8b 8b       	std	Y+19, r24	; 0x13
    3b3a:	0f c0       	rjmp	.+30     	; 0x3b5a <LCD_sendCommand+0x2ac>
    3b3c:	88 ec       	ldi	r24, 0xC8	; 200
    3b3e:	90 e0       	ldi	r25, 0x00	; 0
    3b40:	9a 8b       	std	Y+18, r25	; 0x12
    3b42:	89 8b       	std	Y+17, r24	; 0x11
    3b44:	89 89       	ldd	r24, Y+17	; 0x11
    3b46:	9a 89       	ldd	r25, Y+18	; 0x12
    3b48:	01 97       	sbiw	r24, 0x01	; 1
    3b4a:	f1 f7       	brne	.-4      	; 0x3b48 <LCD_sendCommand+0x29a>
    3b4c:	9a 8b       	std	Y+18, r25	; 0x12
    3b4e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b50:	8b 89       	ldd	r24, Y+19	; 0x13
    3b52:	9c 89       	ldd	r25, Y+20	; 0x14
    3b54:	01 97       	sbiw	r24, 0x01	; 1
    3b56:	9c 8b       	std	Y+20, r25	; 0x14
    3b58:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b5a:	8b 89       	ldd	r24, Y+19	; 0x13
    3b5c:	9c 89       	ldd	r25, Y+20	; 0x14
    3b5e:	00 97       	sbiw	r24, 0x00	; 0
    3b60:	69 f7       	brne	.-38     	; 0x3b3c <LCD_sendCommand+0x28e>
    3b62:	14 c0       	rjmp	.+40     	; 0x3b8c <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b64:	6d 89       	ldd	r22, Y+21	; 0x15
    3b66:	7e 89       	ldd	r23, Y+22	; 0x16
    3b68:	8f 89       	ldd	r24, Y+23	; 0x17
    3b6a:	98 8d       	ldd	r25, Y+24	; 0x18
    3b6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b70:	dc 01       	movw	r26, r24
    3b72:	cb 01       	movw	r24, r22
    3b74:	9c 8b       	std	Y+20, r25	; 0x14
    3b76:	8b 8b       	std	Y+19, r24	; 0x13
    3b78:	8b 89       	ldd	r24, Y+19	; 0x13
    3b7a:	9c 89       	ldd	r25, Y+20	; 0x14
    3b7c:	98 8b       	std	Y+16, r25	; 0x10
    3b7e:	8f 87       	std	Y+15, r24	; 0x0f
    3b80:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b82:	98 89       	ldd	r25, Y+16	; 0x10
    3b84:	01 97       	sbiw	r24, 0x01	; 1
    3b86:	f1 f7       	brne	.-4      	; 0x3b84 <LCD_sendCommand+0x2d6>
    3b88:	98 8b       	std	Y+16, r25	; 0x10
    3b8a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    3b8c:	83 e0       	ldi	r24, 0x03	; 3
    3b8e:	65 e0       	ldi	r22, 0x05	; 5
    3b90:	40 e0       	ldi	r20, 0x00	; 0
    3b92:	0e 94 dd 17 	call	0x2fba	; 0x2fba <GPIO_writePin>
    3b96:	80 e0       	ldi	r24, 0x00	; 0
    3b98:	90 e0       	ldi	r25, 0x00	; 0
    3b9a:	a0 e8       	ldi	r26, 0x80	; 128
    3b9c:	bf e3       	ldi	r27, 0x3F	; 63
    3b9e:	8b 87       	std	Y+11, r24	; 0x0b
    3ba0:	9c 87       	std	Y+12, r25	; 0x0c
    3ba2:	ad 87       	std	Y+13, r26	; 0x0d
    3ba4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ba6:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ba8:	7c 85       	ldd	r23, Y+12	; 0x0c
    3baa:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bac:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bae:	20 e0       	ldi	r18, 0x00	; 0
    3bb0:	30 e0       	ldi	r19, 0x00	; 0
    3bb2:	4a ef       	ldi	r20, 0xFA	; 250
    3bb4:	54 e4       	ldi	r21, 0x44	; 68
    3bb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bba:	dc 01       	movw	r26, r24
    3bbc:	cb 01       	movw	r24, r22
    3bbe:	8f 83       	std	Y+7, r24	; 0x07
    3bc0:	98 87       	std	Y+8, r25	; 0x08
    3bc2:	a9 87       	std	Y+9, r26	; 0x09
    3bc4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3bc6:	6f 81       	ldd	r22, Y+7	; 0x07
    3bc8:	78 85       	ldd	r23, Y+8	; 0x08
    3bca:	89 85       	ldd	r24, Y+9	; 0x09
    3bcc:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bce:	20 e0       	ldi	r18, 0x00	; 0
    3bd0:	30 e0       	ldi	r19, 0x00	; 0
    3bd2:	40 e8       	ldi	r20, 0x80	; 128
    3bd4:	5f e3       	ldi	r21, 0x3F	; 63
    3bd6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3bda:	88 23       	and	r24, r24
    3bdc:	2c f4       	brge	.+10     	; 0x3be8 <LCD_sendCommand+0x33a>
		__ticks = 1;
    3bde:	81 e0       	ldi	r24, 0x01	; 1
    3be0:	90 e0       	ldi	r25, 0x00	; 0
    3be2:	9e 83       	std	Y+6, r25	; 0x06
    3be4:	8d 83       	std	Y+5, r24	; 0x05
    3be6:	3f c0       	rjmp	.+126    	; 0x3c66 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    3be8:	6f 81       	ldd	r22, Y+7	; 0x07
    3bea:	78 85       	ldd	r23, Y+8	; 0x08
    3bec:	89 85       	ldd	r24, Y+9	; 0x09
    3bee:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bf0:	20 e0       	ldi	r18, 0x00	; 0
    3bf2:	3f ef       	ldi	r19, 0xFF	; 255
    3bf4:	4f e7       	ldi	r20, 0x7F	; 127
    3bf6:	57 e4       	ldi	r21, 0x47	; 71
    3bf8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3bfc:	18 16       	cp	r1, r24
    3bfe:	4c f5       	brge	.+82     	; 0x3c52 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c00:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c02:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c04:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c06:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c08:	20 e0       	ldi	r18, 0x00	; 0
    3c0a:	30 e0       	ldi	r19, 0x00	; 0
    3c0c:	40 e2       	ldi	r20, 0x20	; 32
    3c0e:	51 e4       	ldi	r21, 0x41	; 65
    3c10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c14:	dc 01       	movw	r26, r24
    3c16:	cb 01       	movw	r24, r22
    3c18:	bc 01       	movw	r22, r24
    3c1a:	cd 01       	movw	r24, r26
    3c1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c20:	dc 01       	movw	r26, r24
    3c22:	cb 01       	movw	r24, r22
    3c24:	9e 83       	std	Y+6, r25	; 0x06
    3c26:	8d 83       	std	Y+5, r24	; 0x05
    3c28:	0f c0       	rjmp	.+30     	; 0x3c48 <LCD_sendCommand+0x39a>
    3c2a:	88 ec       	ldi	r24, 0xC8	; 200
    3c2c:	90 e0       	ldi	r25, 0x00	; 0
    3c2e:	9c 83       	std	Y+4, r25	; 0x04
    3c30:	8b 83       	std	Y+3, r24	; 0x03
    3c32:	8b 81       	ldd	r24, Y+3	; 0x03
    3c34:	9c 81       	ldd	r25, Y+4	; 0x04
    3c36:	01 97       	sbiw	r24, 0x01	; 1
    3c38:	f1 f7       	brne	.-4      	; 0x3c36 <LCD_sendCommand+0x388>
    3c3a:	9c 83       	std	Y+4, r25	; 0x04
    3c3c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c3e:	8d 81       	ldd	r24, Y+5	; 0x05
    3c40:	9e 81       	ldd	r25, Y+6	; 0x06
    3c42:	01 97       	sbiw	r24, 0x01	; 1
    3c44:	9e 83       	std	Y+6, r25	; 0x06
    3c46:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c48:	8d 81       	ldd	r24, Y+5	; 0x05
    3c4a:	9e 81       	ldd	r25, Y+6	; 0x06
    3c4c:	00 97       	sbiw	r24, 0x00	; 0
    3c4e:	69 f7       	brne	.-38     	; 0x3c2a <LCD_sendCommand+0x37c>
    3c50:	14 c0       	rjmp	.+40     	; 0x3c7a <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c52:	6f 81       	ldd	r22, Y+7	; 0x07
    3c54:	78 85       	ldd	r23, Y+8	; 0x08
    3c56:	89 85       	ldd	r24, Y+9	; 0x09
    3c58:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c5e:	dc 01       	movw	r26, r24
    3c60:	cb 01       	movw	r24, r22
    3c62:	9e 83       	std	Y+6, r25	; 0x06
    3c64:	8d 83       	std	Y+5, r24	; 0x05
    3c66:	8d 81       	ldd	r24, Y+5	; 0x05
    3c68:	9e 81       	ldd	r25, Y+6	; 0x06
    3c6a:	9a 83       	std	Y+2, r25	; 0x02
    3c6c:	89 83       	std	Y+1, r24	; 0x01
    3c6e:	89 81       	ldd	r24, Y+1	; 0x01
    3c70:	9a 81       	ldd	r25, Y+2	; 0x02
    3c72:	01 97       	sbiw	r24, 0x01	; 1
    3c74:	f1 f7       	brne	.-4      	; 0x3c72 <LCD_sendCommand+0x3c4>
    3c76:	9a 83       	std	Y+2, r25	; 0x02
    3c78:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    3c7a:	e9 96       	adiw	r28, 0x39	; 57
    3c7c:	0f b6       	in	r0, 0x3f	; 63
    3c7e:	f8 94       	cli
    3c80:	de bf       	out	0x3e, r29	; 62
    3c82:	0f be       	out	0x3f, r0	; 63
    3c84:	cd bf       	out	0x3d, r28	; 61
    3c86:	cf 91       	pop	r28
    3c88:	df 91       	pop	r29
    3c8a:	08 95       	ret

00003c8c <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    3c8c:	df 93       	push	r29
    3c8e:	cf 93       	push	r28
    3c90:	cd b7       	in	r28, 0x3d	; 61
    3c92:	de b7       	in	r29, 0x3e	; 62
    3c94:	e9 97       	sbiw	r28, 0x39	; 57
    3c96:	0f b6       	in	r0, 0x3f	; 63
    3c98:	f8 94       	cli
    3c9a:	de bf       	out	0x3e, r29	; 62
    3c9c:	0f be       	out	0x3f, r0	; 63
    3c9e:	cd bf       	out	0x3d, r28	; 61
    3ca0:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    3ca2:	83 e0       	ldi	r24, 0x03	; 3
    3ca4:	64 e0       	ldi	r22, 0x04	; 4
    3ca6:	41 e0       	ldi	r20, 0x01	; 1
    3ca8:	0e 94 dd 17 	call	0x2fba	; 0x2fba <GPIO_writePin>
    3cac:	80 e0       	ldi	r24, 0x00	; 0
    3cae:	90 e0       	ldi	r25, 0x00	; 0
    3cb0:	a0 e8       	ldi	r26, 0x80	; 128
    3cb2:	bf e3       	ldi	r27, 0x3F	; 63
    3cb4:	8d ab       	std	Y+53, r24	; 0x35
    3cb6:	9e ab       	std	Y+54, r25	; 0x36
    3cb8:	af ab       	std	Y+55, r26	; 0x37
    3cba:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cbc:	6d a9       	ldd	r22, Y+53	; 0x35
    3cbe:	7e a9       	ldd	r23, Y+54	; 0x36
    3cc0:	8f a9       	ldd	r24, Y+55	; 0x37
    3cc2:	98 ad       	ldd	r25, Y+56	; 0x38
    3cc4:	20 e0       	ldi	r18, 0x00	; 0
    3cc6:	30 e0       	ldi	r19, 0x00	; 0
    3cc8:	4a ef       	ldi	r20, 0xFA	; 250
    3cca:	54 e4       	ldi	r21, 0x44	; 68
    3ccc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cd0:	dc 01       	movw	r26, r24
    3cd2:	cb 01       	movw	r24, r22
    3cd4:	89 ab       	std	Y+49, r24	; 0x31
    3cd6:	9a ab       	std	Y+50, r25	; 0x32
    3cd8:	ab ab       	std	Y+51, r26	; 0x33
    3cda:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3cdc:	69 a9       	ldd	r22, Y+49	; 0x31
    3cde:	7a a9       	ldd	r23, Y+50	; 0x32
    3ce0:	8b a9       	ldd	r24, Y+51	; 0x33
    3ce2:	9c a9       	ldd	r25, Y+52	; 0x34
    3ce4:	20 e0       	ldi	r18, 0x00	; 0
    3ce6:	30 e0       	ldi	r19, 0x00	; 0
    3ce8:	40 e8       	ldi	r20, 0x80	; 128
    3cea:	5f e3       	ldi	r21, 0x3F	; 63
    3cec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3cf0:	88 23       	and	r24, r24
    3cf2:	2c f4       	brge	.+10     	; 0x3cfe <LCD_displayCharacter+0x72>
		__ticks = 1;
    3cf4:	81 e0       	ldi	r24, 0x01	; 1
    3cf6:	90 e0       	ldi	r25, 0x00	; 0
    3cf8:	98 ab       	std	Y+48, r25	; 0x30
    3cfa:	8f a7       	std	Y+47, r24	; 0x2f
    3cfc:	3f c0       	rjmp	.+126    	; 0x3d7c <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    3cfe:	69 a9       	ldd	r22, Y+49	; 0x31
    3d00:	7a a9       	ldd	r23, Y+50	; 0x32
    3d02:	8b a9       	ldd	r24, Y+51	; 0x33
    3d04:	9c a9       	ldd	r25, Y+52	; 0x34
    3d06:	20 e0       	ldi	r18, 0x00	; 0
    3d08:	3f ef       	ldi	r19, 0xFF	; 255
    3d0a:	4f e7       	ldi	r20, 0x7F	; 127
    3d0c:	57 e4       	ldi	r21, 0x47	; 71
    3d0e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3d12:	18 16       	cp	r1, r24
    3d14:	4c f5       	brge	.+82     	; 0x3d68 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d16:	6d a9       	ldd	r22, Y+53	; 0x35
    3d18:	7e a9       	ldd	r23, Y+54	; 0x36
    3d1a:	8f a9       	ldd	r24, Y+55	; 0x37
    3d1c:	98 ad       	ldd	r25, Y+56	; 0x38
    3d1e:	20 e0       	ldi	r18, 0x00	; 0
    3d20:	30 e0       	ldi	r19, 0x00	; 0
    3d22:	40 e2       	ldi	r20, 0x20	; 32
    3d24:	51 e4       	ldi	r21, 0x41	; 65
    3d26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d2a:	dc 01       	movw	r26, r24
    3d2c:	cb 01       	movw	r24, r22
    3d2e:	bc 01       	movw	r22, r24
    3d30:	cd 01       	movw	r24, r26
    3d32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d36:	dc 01       	movw	r26, r24
    3d38:	cb 01       	movw	r24, r22
    3d3a:	98 ab       	std	Y+48, r25	; 0x30
    3d3c:	8f a7       	std	Y+47, r24	; 0x2f
    3d3e:	0f c0       	rjmp	.+30     	; 0x3d5e <LCD_displayCharacter+0xd2>
    3d40:	88 ec       	ldi	r24, 0xC8	; 200
    3d42:	90 e0       	ldi	r25, 0x00	; 0
    3d44:	9e a7       	std	Y+46, r25	; 0x2e
    3d46:	8d a7       	std	Y+45, r24	; 0x2d
    3d48:	8d a5       	ldd	r24, Y+45	; 0x2d
    3d4a:	9e a5       	ldd	r25, Y+46	; 0x2e
    3d4c:	01 97       	sbiw	r24, 0x01	; 1
    3d4e:	f1 f7       	brne	.-4      	; 0x3d4c <LCD_displayCharacter+0xc0>
    3d50:	9e a7       	std	Y+46, r25	; 0x2e
    3d52:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d54:	8f a5       	ldd	r24, Y+47	; 0x2f
    3d56:	98 a9       	ldd	r25, Y+48	; 0x30
    3d58:	01 97       	sbiw	r24, 0x01	; 1
    3d5a:	98 ab       	std	Y+48, r25	; 0x30
    3d5c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d5e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3d60:	98 a9       	ldd	r25, Y+48	; 0x30
    3d62:	00 97       	sbiw	r24, 0x00	; 0
    3d64:	69 f7       	brne	.-38     	; 0x3d40 <LCD_displayCharacter+0xb4>
    3d66:	14 c0       	rjmp	.+40     	; 0x3d90 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d68:	69 a9       	ldd	r22, Y+49	; 0x31
    3d6a:	7a a9       	ldd	r23, Y+50	; 0x32
    3d6c:	8b a9       	ldd	r24, Y+51	; 0x33
    3d6e:	9c a9       	ldd	r25, Y+52	; 0x34
    3d70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d74:	dc 01       	movw	r26, r24
    3d76:	cb 01       	movw	r24, r22
    3d78:	98 ab       	std	Y+48, r25	; 0x30
    3d7a:	8f a7       	std	Y+47, r24	; 0x2f
    3d7c:	8f a5       	ldd	r24, Y+47	; 0x2f
    3d7e:	98 a9       	ldd	r25, Y+48	; 0x30
    3d80:	9c a7       	std	Y+44, r25	; 0x2c
    3d82:	8b a7       	std	Y+43, r24	; 0x2b
    3d84:	8b a5       	ldd	r24, Y+43	; 0x2b
    3d86:	9c a5       	ldd	r25, Y+44	; 0x2c
    3d88:	01 97       	sbiw	r24, 0x01	; 1
    3d8a:	f1 f7       	brne	.-4      	; 0x3d88 <LCD_displayCharacter+0xfc>
    3d8c:	9c a7       	std	Y+44, r25	; 0x2c
    3d8e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    3d90:	83 e0       	ldi	r24, 0x03	; 3
    3d92:	65 e0       	ldi	r22, 0x05	; 5
    3d94:	41 e0       	ldi	r20, 0x01	; 1
    3d96:	0e 94 dd 17 	call	0x2fba	; 0x2fba <GPIO_writePin>
    3d9a:	80 e0       	ldi	r24, 0x00	; 0
    3d9c:	90 e0       	ldi	r25, 0x00	; 0
    3d9e:	a0 e8       	ldi	r26, 0x80	; 128
    3da0:	bf e3       	ldi	r27, 0x3F	; 63
    3da2:	8f a3       	std	Y+39, r24	; 0x27
    3da4:	98 a7       	std	Y+40, r25	; 0x28
    3da6:	a9 a7       	std	Y+41, r26	; 0x29
    3da8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3daa:	6f a1       	ldd	r22, Y+39	; 0x27
    3dac:	78 a5       	ldd	r23, Y+40	; 0x28
    3dae:	89 a5       	ldd	r24, Y+41	; 0x29
    3db0:	9a a5       	ldd	r25, Y+42	; 0x2a
    3db2:	20 e0       	ldi	r18, 0x00	; 0
    3db4:	30 e0       	ldi	r19, 0x00	; 0
    3db6:	4a ef       	ldi	r20, 0xFA	; 250
    3db8:	54 e4       	ldi	r21, 0x44	; 68
    3dba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dbe:	dc 01       	movw	r26, r24
    3dc0:	cb 01       	movw	r24, r22
    3dc2:	8b a3       	std	Y+35, r24	; 0x23
    3dc4:	9c a3       	std	Y+36, r25	; 0x24
    3dc6:	ad a3       	std	Y+37, r26	; 0x25
    3dc8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3dca:	6b a1       	ldd	r22, Y+35	; 0x23
    3dcc:	7c a1       	ldd	r23, Y+36	; 0x24
    3dce:	8d a1       	ldd	r24, Y+37	; 0x25
    3dd0:	9e a1       	ldd	r25, Y+38	; 0x26
    3dd2:	20 e0       	ldi	r18, 0x00	; 0
    3dd4:	30 e0       	ldi	r19, 0x00	; 0
    3dd6:	40 e8       	ldi	r20, 0x80	; 128
    3dd8:	5f e3       	ldi	r21, 0x3F	; 63
    3dda:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3dde:	88 23       	and	r24, r24
    3de0:	2c f4       	brge	.+10     	; 0x3dec <LCD_displayCharacter+0x160>
		__ticks = 1;
    3de2:	81 e0       	ldi	r24, 0x01	; 1
    3de4:	90 e0       	ldi	r25, 0x00	; 0
    3de6:	9a a3       	std	Y+34, r25	; 0x22
    3de8:	89 a3       	std	Y+33, r24	; 0x21
    3dea:	3f c0       	rjmp	.+126    	; 0x3e6a <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    3dec:	6b a1       	ldd	r22, Y+35	; 0x23
    3dee:	7c a1       	ldd	r23, Y+36	; 0x24
    3df0:	8d a1       	ldd	r24, Y+37	; 0x25
    3df2:	9e a1       	ldd	r25, Y+38	; 0x26
    3df4:	20 e0       	ldi	r18, 0x00	; 0
    3df6:	3f ef       	ldi	r19, 0xFF	; 255
    3df8:	4f e7       	ldi	r20, 0x7F	; 127
    3dfa:	57 e4       	ldi	r21, 0x47	; 71
    3dfc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3e00:	18 16       	cp	r1, r24
    3e02:	4c f5       	brge	.+82     	; 0x3e56 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e04:	6f a1       	ldd	r22, Y+39	; 0x27
    3e06:	78 a5       	ldd	r23, Y+40	; 0x28
    3e08:	89 a5       	ldd	r24, Y+41	; 0x29
    3e0a:	9a a5       	ldd	r25, Y+42	; 0x2a
    3e0c:	20 e0       	ldi	r18, 0x00	; 0
    3e0e:	30 e0       	ldi	r19, 0x00	; 0
    3e10:	40 e2       	ldi	r20, 0x20	; 32
    3e12:	51 e4       	ldi	r21, 0x41	; 65
    3e14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e18:	dc 01       	movw	r26, r24
    3e1a:	cb 01       	movw	r24, r22
    3e1c:	bc 01       	movw	r22, r24
    3e1e:	cd 01       	movw	r24, r26
    3e20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e24:	dc 01       	movw	r26, r24
    3e26:	cb 01       	movw	r24, r22
    3e28:	9a a3       	std	Y+34, r25	; 0x22
    3e2a:	89 a3       	std	Y+33, r24	; 0x21
    3e2c:	0f c0       	rjmp	.+30     	; 0x3e4c <LCD_displayCharacter+0x1c0>
    3e2e:	88 ec       	ldi	r24, 0xC8	; 200
    3e30:	90 e0       	ldi	r25, 0x00	; 0
    3e32:	98 a3       	std	Y+32, r25	; 0x20
    3e34:	8f 8f       	std	Y+31, r24	; 0x1f
    3e36:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3e38:	98 a1       	ldd	r25, Y+32	; 0x20
    3e3a:	01 97       	sbiw	r24, 0x01	; 1
    3e3c:	f1 f7       	brne	.-4      	; 0x3e3a <LCD_displayCharacter+0x1ae>
    3e3e:	98 a3       	std	Y+32, r25	; 0x20
    3e40:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e42:	89 a1       	ldd	r24, Y+33	; 0x21
    3e44:	9a a1       	ldd	r25, Y+34	; 0x22
    3e46:	01 97       	sbiw	r24, 0x01	; 1
    3e48:	9a a3       	std	Y+34, r25	; 0x22
    3e4a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e4c:	89 a1       	ldd	r24, Y+33	; 0x21
    3e4e:	9a a1       	ldd	r25, Y+34	; 0x22
    3e50:	00 97       	sbiw	r24, 0x00	; 0
    3e52:	69 f7       	brne	.-38     	; 0x3e2e <LCD_displayCharacter+0x1a2>
    3e54:	14 c0       	rjmp	.+40     	; 0x3e7e <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e56:	6b a1       	ldd	r22, Y+35	; 0x23
    3e58:	7c a1       	ldd	r23, Y+36	; 0x24
    3e5a:	8d a1       	ldd	r24, Y+37	; 0x25
    3e5c:	9e a1       	ldd	r25, Y+38	; 0x26
    3e5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e62:	dc 01       	movw	r26, r24
    3e64:	cb 01       	movw	r24, r22
    3e66:	9a a3       	std	Y+34, r25	; 0x22
    3e68:	89 a3       	std	Y+33, r24	; 0x21
    3e6a:	89 a1       	ldd	r24, Y+33	; 0x21
    3e6c:	9a a1       	ldd	r25, Y+34	; 0x22
    3e6e:	9e 8f       	std	Y+30, r25	; 0x1e
    3e70:	8d 8f       	std	Y+29, r24	; 0x1d
    3e72:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3e74:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3e76:	01 97       	sbiw	r24, 0x01	; 1
    3e78:	f1 f7       	brne	.-4      	; 0x3e76 <LCD_displayCharacter+0x1ea>
    3e7a:	9e 8f       	std	Y+30, r25	; 0x1e
    3e7c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    3e7e:	82 e0       	ldi	r24, 0x02	; 2
    3e80:	69 ad       	ldd	r22, Y+57	; 0x39
    3e82:	0e 94 a7 19 	call	0x334e	; 0x334e <GPIO_writePort>
    3e86:	80 e0       	ldi	r24, 0x00	; 0
    3e88:	90 e0       	ldi	r25, 0x00	; 0
    3e8a:	a0 e8       	ldi	r26, 0x80	; 128
    3e8c:	bf e3       	ldi	r27, 0x3F	; 63
    3e8e:	89 8f       	std	Y+25, r24	; 0x19
    3e90:	9a 8f       	std	Y+26, r25	; 0x1a
    3e92:	ab 8f       	std	Y+27, r26	; 0x1b
    3e94:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e96:	69 8d       	ldd	r22, Y+25	; 0x19
    3e98:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3e9a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3e9c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3e9e:	20 e0       	ldi	r18, 0x00	; 0
    3ea0:	30 e0       	ldi	r19, 0x00	; 0
    3ea2:	4a ef       	ldi	r20, 0xFA	; 250
    3ea4:	54 e4       	ldi	r21, 0x44	; 68
    3ea6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3eaa:	dc 01       	movw	r26, r24
    3eac:	cb 01       	movw	r24, r22
    3eae:	8d 8b       	std	Y+21, r24	; 0x15
    3eb0:	9e 8b       	std	Y+22, r25	; 0x16
    3eb2:	af 8b       	std	Y+23, r26	; 0x17
    3eb4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3eb6:	6d 89       	ldd	r22, Y+21	; 0x15
    3eb8:	7e 89       	ldd	r23, Y+22	; 0x16
    3eba:	8f 89       	ldd	r24, Y+23	; 0x17
    3ebc:	98 8d       	ldd	r25, Y+24	; 0x18
    3ebe:	20 e0       	ldi	r18, 0x00	; 0
    3ec0:	30 e0       	ldi	r19, 0x00	; 0
    3ec2:	40 e8       	ldi	r20, 0x80	; 128
    3ec4:	5f e3       	ldi	r21, 0x3F	; 63
    3ec6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3eca:	88 23       	and	r24, r24
    3ecc:	2c f4       	brge	.+10     	; 0x3ed8 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    3ece:	81 e0       	ldi	r24, 0x01	; 1
    3ed0:	90 e0       	ldi	r25, 0x00	; 0
    3ed2:	9c 8b       	std	Y+20, r25	; 0x14
    3ed4:	8b 8b       	std	Y+19, r24	; 0x13
    3ed6:	3f c0       	rjmp	.+126    	; 0x3f56 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    3ed8:	6d 89       	ldd	r22, Y+21	; 0x15
    3eda:	7e 89       	ldd	r23, Y+22	; 0x16
    3edc:	8f 89       	ldd	r24, Y+23	; 0x17
    3ede:	98 8d       	ldd	r25, Y+24	; 0x18
    3ee0:	20 e0       	ldi	r18, 0x00	; 0
    3ee2:	3f ef       	ldi	r19, 0xFF	; 255
    3ee4:	4f e7       	ldi	r20, 0x7F	; 127
    3ee6:	57 e4       	ldi	r21, 0x47	; 71
    3ee8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3eec:	18 16       	cp	r1, r24
    3eee:	4c f5       	brge	.+82     	; 0x3f42 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ef0:	69 8d       	ldd	r22, Y+25	; 0x19
    3ef2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3ef4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ef6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ef8:	20 e0       	ldi	r18, 0x00	; 0
    3efa:	30 e0       	ldi	r19, 0x00	; 0
    3efc:	40 e2       	ldi	r20, 0x20	; 32
    3efe:	51 e4       	ldi	r21, 0x41	; 65
    3f00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f04:	dc 01       	movw	r26, r24
    3f06:	cb 01       	movw	r24, r22
    3f08:	bc 01       	movw	r22, r24
    3f0a:	cd 01       	movw	r24, r26
    3f0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f10:	dc 01       	movw	r26, r24
    3f12:	cb 01       	movw	r24, r22
    3f14:	9c 8b       	std	Y+20, r25	; 0x14
    3f16:	8b 8b       	std	Y+19, r24	; 0x13
    3f18:	0f c0       	rjmp	.+30     	; 0x3f38 <LCD_displayCharacter+0x2ac>
    3f1a:	88 ec       	ldi	r24, 0xC8	; 200
    3f1c:	90 e0       	ldi	r25, 0x00	; 0
    3f1e:	9a 8b       	std	Y+18, r25	; 0x12
    3f20:	89 8b       	std	Y+17, r24	; 0x11
    3f22:	89 89       	ldd	r24, Y+17	; 0x11
    3f24:	9a 89       	ldd	r25, Y+18	; 0x12
    3f26:	01 97       	sbiw	r24, 0x01	; 1
    3f28:	f1 f7       	brne	.-4      	; 0x3f26 <LCD_displayCharacter+0x29a>
    3f2a:	9a 8b       	std	Y+18, r25	; 0x12
    3f2c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f2e:	8b 89       	ldd	r24, Y+19	; 0x13
    3f30:	9c 89       	ldd	r25, Y+20	; 0x14
    3f32:	01 97       	sbiw	r24, 0x01	; 1
    3f34:	9c 8b       	std	Y+20, r25	; 0x14
    3f36:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f38:	8b 89       	ldd	r24, Y+19	; 0x13
    3f3a:	9c 89       	ldd	r25, Y+20	; 0x14
    3f3c:	00 97       	sbiw	r24, 0x00	; 0
    3f3e:	69 f7       	brne	.-38     	; 0x3f1a <LCD_displayCharacter+0x28e>
    3f40:	14 c0       	rjmp	.+40     	; 0x3f6a <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f42:	6d 89       	ldd	r22, Y+21	; 0x15
    3f44:	7e 89       	ldd	r23, Y+22	; 0x16
    3f46:	8f 89       	ldd	r24, Y+23	; 0x17
    3f48:	98 8d       	ldd	r25, Y+24	; 0x18
    3f4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f4e:	dc 01       	movw	r26, r24
    3f50:	cb 01       	movw	r24, r22
    3f52:	9c 8b       	std	Y+20, r25	; 0x14
    3f54:	8b 8b       	std	Y+19, r24	; 0x13
    3f56:	8b 89       	ldd	r24, Y+19	; 0x13
    3f58:	9c 89       	ldd	r25, Y+20	; 0x14
    3f5a:	98 8b       	std	Y+16, r25	; 0x10
    3f5c:	8f 87       	std	Y+15, r24	; 0x0f
    3f5e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f60:	98 89       	ldd	r25, Y+16	; 0x10
    3f62:	01 97       	sbiw	r24, 0x01	; 1
    3f64:	f1 f7       	brne	.-4      	; 0x3f62 <LCD_displayCharacter+0x2d6>
    3f66:	98 8b       	std	Y+16, r25	; 0x10
    3f68:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    3f6a:	83 e0       	ldi	r24, 0x03	; 3
    3f6c:	65 e0       	ldi	r22, 0x05	; 5
    3f6e:	40 e0       	ldi	r20, 0x00	; 0
    3f70:	0e 94 dd 17 	call	0x2fba	; 0x2fba <GPIO_writePin>
    3f74:	80 e0       	ldi	r24, 0x00	; 0
    3f76:	90 e0       	ldi	r25, 0x00	; 0
    3f78:	a0 e8       	ldi	r26, 0x80	; 128
    3f7a:	bf e3       	ldi	r27, 0x3F	; 63
    3f7c:	8b 87       	std	Y+11, r24	; 0x0b
    3f7e:	9c 87       	std	Y+12, r25	; 0x0c
    3f80:	ad 87       	std	Y+13, r26	; 0x0d
    3f82:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f84:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f86:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f88:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f8c:	20 e0       	ldi	r18, 0x00	; 0
    3f8e:	30 e0       	ldi	r19, 0x00	; 0
    3f90:	4a ef       	ldi	r20, 0xFA	; 250
    3f92:	54 e4       	ldi	r21, 0x44	; 68
    3f94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f98:	dc 01       	movw	r26, r24
    3f9a:	cb 01       	movw	r24, r22
    3f9c:	8f 83       	std	Y+7, r24	; 0x07
    3f9e:	98 87       	std	Y+8, r25	; 0x08
    3fa0:	a9 87       	std	Y+9, r26	; 0x09
    3fa2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3fa4:	6f 81       	ldd	r22, Y+7	; 0x07
    3fa6:	78 85       	ldd	r23, Y+8	; 0x08
    3fa8:	89 85       	ldd	r24, Y+9	; 0x09
    3faa:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fac:	20 e0       	ldi	r18, 0x00	; 0
    3fae:	30 e0       	ldi	r19, 0x00	; 0
    3fb0:	40 e8       	ldi	r20, 0x80	; 128
    3fb2:	5f e3       	ldi	r21, 0x3F	; 63
    3fb4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3fb8:	88 23       	and	r24, r24
    3fba:	2c f4       	brge	.+10     	; 0x3fc6 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    3fbc:	81 e0       	ldi	r24, 0x01	; 1
    3fbe:	90 e0       	ldi	r25, 0x00	; 0
    3fc0:	9e 83       	std	Y+6, r25	; 0x06
    3fc2:	8d 83       	std	Y+5, r24	; 0x05
    3fc4:	3f c0       	rjmp	.+126    	; 0x4044 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    3fc6:	6f 81       	ldd	r22, Y+7	; 0x07
    3fc8:	78 85       	ldd	r23, Y+8	; 0x08
    3fca:	89 85       	ldd	r24, Y+9	; 0x09
    3fcc:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fce:	20 e0       	ldi	r18, 0x00	; 0
    3fd0:	3f ef       	ldi	r19, 0xFF	; 255
    3fd2:	4f e7       	ldi	r20, 0x7F	; 127
    3fd4:	57 e4       	ldi	r21, 0x47	; 71
    3fd6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3fda:	18 16       	cp	r1, r24
    3fdc:	4c f5       	brge	.+82     	; 0x4030 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fde:	6b 85       	ldd	r22, Y+11	; 0x0b
    3fe0:	7c 85       	ldd	r23, Y+12	; 0x0c
    3fe2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3fe4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3fe6:	20 e0       	ldi	r18, 0x00	; 0
    3fe8:	30 e0       	ldi	r19, 0x00	; 0
    3fea:	40 e2       	ldi	r20, 0x20	; 32
    3fec:	51 e4       	ldi	r21, 0x41	; 65
    3fee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ff2:	dc 01       	movw	r26, r24
    3ff4:	cb 01       	movw	r24, r22
    3ff6:	bc 01       	movw	r22, r24
    3ff8:	cd 01       	movw	r24, r26
    3ffa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ffe:	dc 01       	movw	r26, r24
    4000:	cb 01       	movw	r24, r22
    4002:	9e 83       	std	Y+6, r25	; 0x06
    4004:	8d 83       	std	Y+5, r24	; 0x05
    4006:	0f c0       	rjmp	.+30     	; 0x4026 <LCD_displayCharacter+0x39a>
    4008:	88 ec       	ldi	r24, 0xC8	; 200
    400a:	90 e0       	ldi	r25, 0x00	; 0
    400c:	9c 83       	std	Y+4, r25	; 0x04
    400e:	8b 83       	std	Y+3, r24	; 0x03
    4010:	8b 81       	ldd	r24, Y+3	; 0x03
    4012:	9c 81       	ldd	r25, Y+4	; 0x04
    4014:	01 97       	sbiw	r24, 0x01	; 1
    4016:	f1 f7       	brne	.-4      	; 0x4014 <LCD_displayCharacter+0x388>
    4018:	9c 83       	std	Y+4, r25	; 0x04
    401a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    401c:	8d 81       	ldd	r24, Y+5	; 0x05
    401e:	9e 81       	ldd	r25, Y+6	; 0x06
    4020:	01 97       	sbiw	r24, 0x01	; 1
    4022:	9e 83       	std	Y+6, r25	; 0x06
    4024:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4026:	8d 81       	ldd	r24, Y+5	; 0x05
    4028:	9e 81       	ldd	r25, Y+6	; 0x06
    402a:	00 97       	sbiw	r24, 0x00	; 0
    402c:	69 f7       	brne	.-38     	; 0x4008 <LCD_displayCharacter+0x37c>
    402e:	14 c0       	rjmp	.+40     	; 0x4058 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4030:	6f 81       	ldd	r22, Y+7	; 0x07
    4032:	78 85       	ldd	r23, Y+8	; 0x08
    4034:	89 85       	ldd	r24, Y+9	; 0x09
    4036:	9a 85       	ldd	r25, Y+10	; 0x0a
    4038:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    403c:	dc 01       	movw	r26, r24
    403e:	cb 01       	movw	r24, r22
    4040:	9e 83       	std	Y+6, r25	; 0x06
    4042:	8d 83       	std	Y+5, r24	; 0x05
    4044:	8d 81       	ldd	r24, Y+5	; 0x05
    4046:	9e 81       	ldd	r25, Y+6	; 0x06
    4048:	9a 83       	std	Y+2, r25	; 0x02
    404a:	89 83       	std	Y+1, r24	; 0x01
    404c:	89 81       	ldd	r24, Y+1	; 0x01
    404e:	9a 81       	ldd	r25, Y+2	; 0x02
    4050:	01 97       	sbiw	r24, 0x01	; 1
    4052:	f1 f7       	brne	.-4      	; 0x4050 <LCD_displayCharacter+0x3c4>
    4054:	9a 83       	std	Y+2, r25	; 0x02
    4056:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    4058:	e9 96       	adiw	r28, 0x39	; 57
    405a:	0f b6       	in	r0, 0x3f	; 63
    405c:	f8 94       	cli
    405e:	de bf       	out	0x3e, r29	; 62
    4060:	0f be       	out	0x3f, r0	; 63
    4062:	cd bf       	out	0x3d, r28	; 61
    4064:	cf 91       	pop	r28
    4066:	df 91       	pop	r29
    4068:	08 95       	ret

0000406a <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    406a:	df 93       	push	r29
    406c:	cf 93       	push	r28
    406e:	00 d0       	rcall	.+0      	; 0x4070 <LCD_displayString+0x6>
    4070:	0f 92       	push	r0
    4072:	cd b7       	in	r28, 0x3d	; 61
    4074:	de b7       	in	r29, 0x3e	; 62
    4076:	9b 83       	std	Y+3, r25	; 0x03
    4078:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    407a:	19 82       	std	Y+1, r1	; 0x01
    407c:	0e c0       	rjmp	.+28     	; 0x409a <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    407e:	89 81       	ldd	r24, Y+1	; 0x01
    4080:	28 2f       	mov	r18, r24
    4082:	30 e0       	ldi	r19, 0x00	; 0
    4084:	8a 81       	ldd	r24, Y+2	; 0x02
    4086:	9b 81       	ldd	r25, Y+3	; 0x03
    4088:	fc 01       	movw	r30, r24
    408a:	e2 0f       	add	r30, r18
    408c:	f3 1f       	adc	r31, r19
    408e:	80 81       	ld	r24, Z
    4090:	0e 94 46 1e 	call	0x3c8c	; 0x3c8c <LCD_displayCharacter>
		i++;
    4094:	89 81       	ldd	r24, Y+1	; 0x01
    4096:	8f 5f       	subi	r24, 0xFF	; 255
    4098:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    409a:	89 81       	ldd	r24, Y+1	; 0x01
    409c:	28 2f       	mov	r18, r24
    409e:	30 e0       	ldi	r19, 0x00	; 0
    40a0:	8a 81       	ldd	r24, Y+2	; 0x02
    40a2:	9b 81       	ldd	r25, Y+3	; 0x03
    40a4:	fc 01       	movw	r30, r24
    40a6:	e2 0f       	add	r30, r18
    40a8:	f3 1f       	adc	r31, r19
    40aa:	80 81       	ld	r24, Z
    40ac:	88 23       	and	r24, r24
    40ae:	39 f7       	brne	.-50     	; 0x407e <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    40b0:	0f 90       	pop	r0
    40b2:	0f 90       	pop	r0
    40b4:	0f 90       	pop	r0
    40b6:	cf 91       	pop	r28
    40b8:	df 91       	pop	r29
    40ba:	08 95       	ret

000040bc <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    40bc:	df 93       	push	r29
    40be:	cf 93       	push	r28
    40c0:	00 d0       	rcall	.+0      	; 0x40c2 <LCD_moveCursor+0x6>
    40c2:	00 d0       	rcall	.+0      	; 0x40c4 <LCD_moveCursor+0x8>
    40c4:	0f 92       	push	r0
    40c6:	cd b7       	in	r28, 0x3d	; 61
    40c8:	de b7       	in	r29, 0x3e	; 62
    40ca:	8a 83       	std	Y+2, r24	; 0x02
    40cc:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    40ce:	8a 81       	ldd	r24, Y+2	; 0x02
    40d0:	28 2f       	mov	r18, r24
    40d2:	30 e0       	ldi	r19, 0x00	; 0
    40d4:	3d 83       	std	Y+5, r19	; 0x05
    40d6:	2c 83       	std	Y+4, r18	; 0x04
    40d8:	8c 81       	ldd	r24, Y+4	; 0x04
    40da:	9d 81       	ldd	r25, Y+5	; 0x05
    40dc:	81 30       	cpi	r24, 0x01	; 1
    40de:	91 05       	cpc	r25, r1
    40e0:	c1 f0       	breq	.+48     	; 0x4112 <LCD_moveCursor+0x56>
    40e2:	2c 81       	ldd	r18, Y+4	; 0x04
    40e4:	3d 81       	ldd	r19, Y+5	; 0x05
    40e6:	22 30       	cpi	r18, 0x02	; 2
    40e8:	31 05       	cpc	r19, r1
    40ea:	2c f4       	brge	.+10     	; 0x40f6 <LCD_moveCursor+0x3a>
    40ec:	8c 81       	ldd	r24, Y+4	; 0x04
    40ee:	9d 81       	ldd	r25, Y+5	; 0x05
    40f0:	00 97       	sbiw	r24, 0x00	; 0
    40f2:	61 f0       	breq	.+24     	; 0x410c <LCD_moveCursor+0x50>
    40f4:	19 c0       	rjmp	.+50     	; 0x4128 <LCD_moveCursor+0x6c>
    40f6:	2c 81       	ldd	r18, Y+4	; 0x04
    40f8:	3d 81       	ldd	r19, Y+5	; 0x05
    40fa:	22 30       	cpi	r18, 0x02	; 2
    40fc:	31 05       	cpc	r19, r1
    40fe:	69 f0       	breq	.+26     	; 0x411a <LCD_moveCursor+0x5e>
    4100:	8c 81       	ldd	r24, Y+4	; 0x04
    4102:	9d 81       	ldd	r25, Y+5	; 0x05
    4104:	83 30       	cpi	r24, 0x03	; 3
    4106:	91 05       	cpc	r25, r1
    4108:	61 f0       	breq	.+24     	; 0x4122 <LCD_moveCursor+0x66>
    410a:	0e c0       	rjmp	.+28     	; 0x4128 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    410c:	8b 81       	ldd	r24, Y+3	; 0x03
    410e:	89 83       	std	Y+1, r24	; 0x01
    4110:	0b c0       	rjmp	.+22     	; 0x4128 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    4112:	8b 81       	ldd	r24, Y+3	; 0x03
    4114:	80 5c       	subi	r24, 0xC0	; 192
    4116:	89 83       	std	Y+1, r24	; 0x01
    4118:	07 c0       	rjmp	.+14     	; 0x4128 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    411a:	8b 81       	ldd	r24, Y+3	; 0x03
    411c:	80 5f       	subi	r24, 0xF0	; 240
    411e:	89 83       	std	Y+1, r24	; 0x01
    4120:	03 c0       	rjmp	.+6      	; 0x4128 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    4122:	8b 81       	ldd	r24, Y+3	; 0x03
    4124:	80 5b       	subi	r24, 0xB0	; 176
    4126:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    4128:	89 81       	ldd	r24, Y+1	; 0x01
    412a:	80 68       	ori	r24, 0x80	; 128
    412c:	0e 94 57 1c 	call	0x38ae	; 0x38ae <LCD_sendCommand>
}
    4130:	0f 90       	pop	r0
    4132:	0f 90       	pop	r0
    4134:	0f 90       	pop	r0
    4136:	0f 90       	pop	r0
    4138:	0f 90       	pop	r0
    413a:	cf 91       	pop	r28
    413c:	df 91       	pop	r29
    413e:	08 95       	ret

00004140 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    4140:	df 93       	push	r29
    4142:	cf 93       	push	r28
    4144:	00 d0       	rcall	.+0      	; 0x4146 <LCD_displayStringRowColumn+0x6>
    4146:	00 d0       	rcall	.+0      	; 0x4148 <LCD_displayStringRowColumn+0x8>
    4148:	cd b7       	in	r28, 0x3d	; 61
    414a:	de b7       	in	r29, 0x3e	; 62
    414c:	89 83       	std	Y+1, r24	; 0x01
    414e:	6a 83       	std	Y+2, r22	; 0x02
    4150:	5c 83       	std	Y+4, r21	; 0x04
    4152:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    4154:	89 81       	ldd	r24, Y+1	; 0x01
    4156:	6a 81       	ldd	r22, Y+2	; 0x02
    4158:	0e 94 5e 20 	call	0x40bc	; 0x40bc <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    415c:	8b 81       	ldd	r24, Y+3	; 0x03
    415e:	9c 81       	ldd	r25, Y+4	; 0x04
    4160:	0e 94 35 20 	call	0x406a	; 0x406a <LCD_displayString>
}
    4164:	0f 90       	pop	r0
    4166:	0f 90       	pop	r0
    4168:	0f 90       	pop	r0
    416a:	0f 90       	pop	r0
    416c:	cf 91       	pop	r28
    416e:	df 91       	pop	r29
    4170:	08 95       	ret

00004172 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    4172:	df 93       	push	r29
    4174:	cf 93       	push	r28
    4176:	cd b7       	in	r28, 0x3d	; 61
    4178:	de b7       	in	r29, 0x3e	; 62
    417a:	62 97       	sbiw	r28, 0x12	; 18
    417c:	0f b6       	in	r0, 0x3f	; 63
    417e:	f8 94       	cli
    4180:	de bf       	out	0x3e, r29	; 62
    4182:	0f be       	out	0x3f, r0	; 63
    4184:	cd bf       	out	0x3d, r28	; 61
    4186:	9a 8b       	std	Y+18, r25	; 0x12
    4188:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    418a:	89 89       	ldd	r24, Y+17	; 0x11
    418c:	9a 89       	ldd	r25, Y+18	; 0x12
    418e:	9e 01       	movw	r18, r28
    4190:	2f 5f       	subi	r18, 0xFF	; 255
    4192:	3f 4f       	sbci	r19, 0xFF	; 255
    4194:	b9 01       	movw	r22, r18
    4196:	4a e0       	ldi	r20, 0x0A	; 10
    4198:	50 e0       	ldi	r21, 0x00	; 0
    419a:	0e 94 e4 23 	call	0x47c8	; 0x47c8 <itoa>
   LCD_displayString(buff); /* Display the string */
    419e:	ce 01       	movw	r24, r28
    41a0:	01 96       	adiw	r24, 0x01	; 1
    41a2:	0e 94 35 20 	call	0x406a	; 0x406a <LCD_displayString>
}
    41a6:	62 96       	adiw	r28, 0x12	; 18
    41a8:	0f b6       	in	r0, 0x3f	; 63
    41aa:	f8 94       	cli
    41ac:	de bf       	out	0x3e, r29	; 62
    41ae:	0f be       	out	0x3f, r0	; 63
    41b0:	cd bf       	out	0x3d, r28	; 61
    41b2:	cf 91       	pop	r28
    41b4:	df 91       	pop	r29
    41b6:	08 95       	ret

000041b8 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    41b8:	df 93       	push	r29
    41ba:	cf 93       	push	r28
    41bc:	cd b7       	in	r28, 0x3d	; 61
    41be:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    41c0:	81 e0       	ldi	r24, 0x01	; 1
    41c2:	0e 94 57 1c 	call	0x38ae	; 0x38ae <LCD_sendCommand>
}
    41c6:	cf 91       	pop	r28
    41c8:	df 91       	pop	r29
    41ca:	08 95       	ret

000041cc <__vector_9>:
 *******************************************************************************/

/*
 *  Interrupt Service Routine for timer1 Overflow mode
 */
ISR(TIMER1_OVF_vect){
    41cc:	1f 92       	push	r1
    41ce:	0f 92       	push	r0
    41d0:	0f b6       	in	r0, 0x3f	; 63
    41d2:	0f 92       	push	r0
    41d4:	11 24       	eor	r1, r1
    41d6:	2f 93       	push	r18
    41d8:	3f 93       	push	r19
    41da:	4f 93       	push	r20
    41dc:	5f 93       	push	r21
    41de:	6f 93       	push	r22
    41e0:	7f 93       	push	r23
    41e2:	8f 93       	push	r24
    41e4:	9f 93       	push	r25
    41e6:	af 93       	push	r26
    41e8:	bf 93       	push	r27
    41ea:	ef 93       	push	r30
    41ec:	ff 93       	push	r31
    41ee:	df 93       	push	r29
    41f0:	cf 93       	push	r28
    41f2:	cd b7       	in	r28, 0x3d	; 61
    41f4:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    41f6:	80 91 ce 01 	lds	r24, 0x01CE
    41fa:	90 91 cf 01 	lds	r25, 0x01CF
    41fe:	00 97       	sbiw	r24, 0x00	; 0
    4200:	29 f0       	breq	.+10     	; 0x420c <__vector_9+0x40>
	{
		/*Call the Call Back function in the application after the edge is detected*/
		(*g_callBackPtr)();
    4202:	e0 91 ce 01 	lds	r30, 0x01CE
    4206:	f0 91 cf 01 	lds	r31, 0x01CF
    420a:	09 95       	icall
	}
}
    420c:	cf 91       	pop	r28
    420e:	df 91       	pop	r29
    4210:	ff 91       	pop	r31
    4212:	ef 91       	pop	r30
    4214:	bf 91       	pop	r27
    4216:	af 91       	pop	r26
    4218:	9f 91       	pop	r25
    421a:	8f 91       	pop	r24
    421c:	7f 91       	pop	r23
    421e:	6f 91       	pop	r22
    4220:	5f 91       	pop	r21
    4222:	4f 91       	pop	r20
    4224:	3f 91       	pop	r19
    4226:	2f 91       	pop	r18
    4228:	0f 90       	pop	r0
    422a:	0f be       	out	0x3f, r0	; 63
    422c:	0f 90       	pop	r0
    422e:	1f 90       	pop	r1
    4230:	18 95       	reti

00004232 <__vector_7>:

/* Interrupt Service Routine for timer1 compare mode */
ISR(TIMER1_COMPA_vect){
    4232:	1f 92       	push	r1
    4234:	0f 92       	push	r0
    4236:	0f b6       	in	r0, 0x3f	; 63
    4238:	0f 92       	push	r0
    423a:	11 24       	eor	r1, r1
    423c:	2f 93       	push	r18
    423e:	3f 93       	push	r19
    4240:	4f 93       	push	r20
    4242:	5f 93       	push	r21
    4244:	6f 93       	push	r22
    4246:	7f 93       	push	r23
    4248:	8f 93       	push	r24
    424a:	9f 93       	push	r25
    424c:	af 93       	push	r26
    424e:	bf 93       	push	r27
    4250:	ef 93       	push	r30
    4252:	ff 93       	push	r31
    4254:	df 93       	push	r29
    4256:	cf 93       	push	r28
    4258:	cd b7       	in	r28, 0x3d	; 61
    425a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    425c:	80 91 ce 01 	lds	r24, 0x01CE
    4260:	90 91 cf 01 	lds	r25, 0x01CF
    4264:	00 97       	sbiw	r24, 0x00	; 0
    4266:	29 f0       	breq	.+10     	; 0x4272 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)();
    4268:	e0 91 ce 01 	lds	r30, 0x01CE
    426c:	f0 91 cf 01 	lds	r31, 0x01CF
    4270:	09 95       	icall
	}

}
    4272:	cf 91       	pop	r28
    4274:	df 91       	pop	r29
    4276:	ff 91       	pop	r31
    4278:	ef 91       	pop	r30
    427a:	bf 91       	pop	r27
    427c:	af 91       	pop	r26
    427e:	9f 91       	pop	r25
    4280:	8f 91       	pop	r24
    4282:	7f 91       	pop	r23
    4284:	6f 91       	pop	r22
    4286:	5f 91       	pop	r21
    4288:	4f 91       	pop	r20
    428a:	3f 91       	pop	r19
    428c:	2f 91       	pop	r18
    428e:	0f 90       	pop	r0
    4290:	0f be       	out	0x3f, r0	; 63
    4292:	0f 90       	pop	r0
    4294:	1f 90       	pop	r1
    4296:	18 95       	reti

00004298 <__vector_8>:
/* Interrupt Service Routine for timer1 compare mode */
ISR(TIMER1_COMPB_vect){
    4298:	1f 92       	push	r1
    429a:	0f 92       	push	r0
    429c:	0f b6       	in	r0, 0x3f	; 63
    429e:	0f 92       	push	r0
    42a0:	11 24       	eor	r1, r1
    42a2:	2f 93       	push	r18
    42a4:	3f 93       	push	r19
    42a6:	4f 93       	push	r20
    42a8:	5f 93       	push	r21
    42aa:	6f 93       	push	r22
    42ac:	7f 93       	push	r23
    42ae:	8f 93       	push	r24
    42b0:	9f 93       	push	r25
    42b2:	af 93       	push	r26
    42b4:	bf 93       	push	r27
    42b6:	ef 93       	push	r30
    42b8:	ff 93       	push	r31
    42ba:	df 93       	push	r29
    42bc:	cf 93       	push	r28
    42be:	cd b7       	in	r28, 0x3d	; 61
    42c0:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    42c2:	80 91 ce 01 	lds	r24, 0x01CE
    42c6:	90 91 cf 01 	lds	r25, 0x01CF
    42ca:	00 97       	sbiw	r24, 0x00	; 0
    42cc:	29 f0       	breq	.+10     	; 0x42d8 <__vector_8+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)();
    42ce:	e0 91 ce 01 	lds	r30, 0x01CE
    42d2:	f0 91 cf 01 	lds	r31, 0x01CF
    42d6:	09 95       	icall
	}

}
    42d8:	cf 91       	pop	r28
    42da:	df 91       	pop	r29
    42dc:	ff 91       	pop	r31
    42de:	ef 91       	pop	r30
    42e0:	bf 91       	pop	r27
    42e2:	af 91       	pop	r26
    42e4:	9f 91       	pop	r25
    42e6:	8f 91       	pop	r24
    42e8:	7f 91       	pop	r23
    42ea:	6f 91       	pop	r22
    42ec:	5f 91       	pop	r21
    42ee:	4f 91       	pop	r20
    42f0:	3f 91       	pop	r19
    42f2:	2f 91       	pop	r18
    42f4:	0f 90       	pop	r0
    42f6:	0f be       	out	0x3f, r0	; 63
    42f8:	0f 90       	pop	r0
    42fa:	1f 90       	pop	r1
    42fc:	18 95       	reti

000042fe <Timer1_init>:
 * Functional responsible for Initialize the Timer1 device by:
 * 1. Setup the initial value and the prescalar.
 * 2. Setup the timer mode
 * 3. Enable interrput
 */
void Timer1_init(const Timer1_ConfigType * Config_Ptr){
    42fe:	df 93       	push	r29
    4300:	cf 93       	push	r28
    4302:	00 d0       	rcall	.+0      	; 0x4304 <Timer1_init+0x6>
    4304:	cd b7       	in	r28, 0x3d	; 61
    4306:	de b7       	in	r29, 0x3e	; 62
    4308:	9a 83       	std	Y+2, r25	; 0x02
    430a:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Config_Ptr->initial_value;
    430c:	ac e4       	ldi	r26, 0x4C	; 76
    430e:	b0 e0       	ldi	r27, 0x00	; 0
    4310:	e9 81       	ldd	r30, Y+1	; 0x01
    4312:	fa 81       	ldd	r31, Y+2	; 0x02
    4314:	80 81       	ld	r24, Z
    4316:	91 81       	ldd	r25, Z+1	; 0x01
    4318:	11 96       	adiw	r26, 0x01	; 1
    431a:	9c 93       	st	X, r25
    431c:	8e 93       	st	-X, r24

	/*
	 * set the pre-scaler value.
	 * set WGM12 value.
	 */
	TCCR1B = (Config_Ptr->prescaler) | ((Config_Ptr->mode<<1)&0x08);
    431e:	ae e4       	ldi	r26, 0x4E	; 78
    4320:	b0 e0       	ldi	r27, 0x00	; 0
    4322:	e9 81       	ldd	r30, Y+1	; 0x01
    4324:	fa 81       	ldd	r31, Y+2	; 0x02
    4326:	84 81       	ldd	r24, Z+4	; 0x04
    4328:	28 2f       	mov	r18, r24
    432a:	e9 81       	ldd	r30, Y+1	; 0x01
    432c:	fa 81       	ldd	r31, Y+2	; 0x02
    432e:	85 81       	ldd	r24, Z+5	; 0x05
    4330:	88 2f       	mov	r24, r24
    4332:	90 e0       	ldi	r25, 0x00	; 0
    4334:	88 0f       	add	r24, r24
    4336:	99 1f       	adc	r25, r25
    4338:	88 70       	andi	r24, 0x08	; 8
    433a:	82 2b       	or	r24, r18
    433c:	8c 93       	st	X, r24
	TCCR1A |=(1<<COM1A1) ;
    433e:	af e4       	ldi	r26, 0x4F	; 79
    4340:	b0 e0       	ldi	r27, 0x00	; 0
    4342:	ef e4       	ldi	r30, 0x4F	; 79
    4344:	f0 e0       	ldi	r31, 0x00	; 0
    4346:	80 81       	ld	r24, Z
    4348:	80 68       	ori	r24, 0x80	; 128
    434a:	8c 93       	st	X, r24

#if (PWM == FALSE)
	/*
	 * non pwm mode
	 */
	TCCR1A = (1<<FOC1A);
    434c:	ef e4       	ldi	r30, 0x4F	; 79
    434e:	f0 e0       	ldi	r31, 0x00	; 0
    4350:	88 e0       	ldi	r24, 0x08	; 8
    4352:	80 83       	st	Z, r24
	TCCR1A = (1<<FOC1B);
    4354:	ef e4       	ldi	r30, 0x4F	; 79
    4356:	f0 e0       	ldi	r31, 0x00	; 0
    4358:	84 e0       	ldi	r24, 0x04	; 4
    435a:	80 83       	st	Z, r24
#endif
	if (Config_Ptr->mode==CTC){
    435c:	e9 81       	ldd	r30, Y+1	; 0x01
    435e:	fa 81       	ldd	r31, Y+2	; 0x02
    4360:	85 81       	ldd	r24, Z+5	; 0x05
    4362:	84 30       	cpi	r24, 0x04	; 4
    4364:	89 f4       	brne	.+34     	; 0x4388 <Timer1_init+0x8a>
		#if (CTC_MODE == CTC_A)
		OCR1A=Config_Ptr->compare_value;
    4366:	aa e4       	ldi	r26, 0x4A	; 74
    4368:	b0 e0       	ldi	r27, 0x00	; 0
    436a:	e9 81       	ldd	r30, Y+1	; 0x01
    436c:	fa 81       	ldd	r31, Y+2	; 0x02
    436e:	82 81       	ldd	r24, Z+2	; 0x02
    4370:	93 81       	ldd	r25, Z+3	; 0x03
    4372:	11 96       	adiw	r26, 0x01	; 1
    4374:	9c 93       	st	X, r25
    4376:	8e 93       	st	-X, r24
		/*
		 * Enable Timer1 Compare A Interrupt
		 */
		TIMSK |= (1<<OCIE1A);
    4378:	a9 e5       	ldi	r26, 0x59	; 89
    437a:	b0 e0       	ldi	r27, 0x00	; 0
    437c:	e9 e5       	ldi	r30, 0x59	; 89
    437e:	f0 e0       	ldi	r31, 0x00	; 0
    4380:	80 81       	ld	r24, Z
    4382:	80 61       	ori	r24, 0x10	; 16
    4384:	8c 93       	st	X, r24
    4386:	0c c0       	rjmp	.+24     	; 0x43a0 <Timer1_init+0xa2>
		 * Enable Timer1 Compare A Interrupt
		 */
		TIMSK |= (1<<OCIE1B);
		#endif
	}
	else if(Config_Ptr->mode==NORMAL){
    4388:	e9 81       	ldd	r30, Y+1	; 0x01
    438a:	fa 81       	ldd	r31, Y+2	; 0x02
    438c:	85 81       	ldd	r24, Z+5	; 0x05
    438e:	88 23       	and	r24, r24
    4390:	39 f4       	brne	.+14     	; 0x43a0 <Timer1_init+0xa2>
		/*
		 * Enable Timer1 Normal mode Interrupt
		*/
		TIMSK|=(1<< TOIE1);
    4392:	a9 e5       	ldi	r26, 0x59	; 89
    4394:	b0 e0       	ldi	r27, 0x00	; 0
    4396:	e9 e5       	ldi	r30, 0x59	; 89
    4398:	f0 e0       	ldi	r31, 0x00	; 0
    439a:	80 81       	ld	r24, Z
    439c:	84 60       	ori	r24, 0x04	; 4
    439e:	8c 93       	st	X, r24
	}
}
    43a0:	0f 90       	pop	r0
    43a2:	0f 90       	pop	r0
    43a4:	cf 91       	pop	r28
    43a6:	df 91       	pop	r29
    43a8:	08 95       	ret

000043aa <Timer1_deInit>:
/*
 * Description :
 * Functional responsible for Deinitialize the Timer1
 * by setting all registers to zero
 */
void Timer1_deInit(void){
    43aa:	df 93       	push	r29
    43ac:	cf 93       	push	r28
    43ae:	cd b7       	in	r28, 0x3d	; 61
    43b0:	de b7       	in	r29, 0x3e	; 62
	TCNT1=0;
    43b2:	ec e4       	ldi	r30, 0x4C	; 76
    43b4:	f0 e0       	ldi	r31, 0x00	; 0
    43b6:	11 82       	std	Z+1, r1	; 0x01
    43b8:	10 82       	st	Z, r1
	OCR1A=0;
    43ba:	ea e4       	ldi	r30, 0x4A	; 74
    43bc:	f0 e0       	ldi	r31, 0x00	; 0
    43be:	11 82       	std	Z+1, r1	; 0x01
    43c0:	10 82       	st	Z, r1
	OCR1B=0;
    43c2:	e8 e4       	ldi	r30, 0x48	; 72
    43c4:	f0 e0       	ldi	r31, 0x00	; 0
    43c6:	11 82       	std	Z+1, r1	; 0x01
    43c8:	10 82       	st	Z, r1
	TCCR1A=0;
    43ca:	ef e4       	ldi	r30, 0x4F	; 79
    43cc:	f0 e0       	ldi	r31, 0x00	; 0
    43ce:	10 82       	st	Z, r1
	TCCR1B=0;
    43d0:	ee e4       	ldi	r30, 0x4E	; 78
    43d2:	f0 e0       	ldi	r31, 0x00	; 0
    43d4:	10 82       	st	Z, r1
	TIMSK=0;
    43d6:	e9 e5       	ldi	r30, 0x59	; 89
    43d8:	f0 e0       	ldi	r31, 0x00	; 0
    43da:	10 82       	st	Z, r1
	g_callBackPtr = NULL_PTR;
    43dc:	10 92 cf 01 	sts	0x01CF, r1
    43e0:	10 92 ce 01 	sts	0x01CE, r1
}
    43e4:	cf 91       	pop	r28
    43e6:	df 91       	pop	r29
    43e8:	08 95       	ret

000043ea <Timer1_setCallBack>:
/*
 * Description :
 * Save the address of the Call back function in a global variable
 */
void Timer1_setCallBack(void(*a_ptr)(void)){
    43ea:	df 93       	push	r29
    43ec:	cf 93       	push	r28
    43ee:	00 d0       	rcall	.+0      	; 0x43f0 <Timer1_setCallBack+0x6>
    43f0:	cd b7       	in	r28, 0x3d	; 61
    43f2:	de b7       	in	r29, 0x3e	; 62
    43f4:	9a 83       	std	Y+2, r25	; 0x02
    43f6:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr;
    43f8:	89 81       	ldd	r24, Y+1	; 0x01
    43fa:	9a 81       	ldd	r25, Y+2	; 0x02
    43fc:	90 93 cf 01 	sts	0x01CF, r25
    4400:	80 93 ce 01 	sts	0x01CE, r24
}
    4404:	0f 90       	pop	r0
    4406:	0f 90       	pop	r0
    4408:	cf 91       	pop	r28
    440a:	df 91       	pop	r29
    440c:	08 95       	ret

0000440e <UART_init>:
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */

void UART_init(UART_ConfigType * config_Ptr)
{
    440e:	df 93       	push	r29
    4410:	cf 93       	push	r28
    4412:	00 d0       	rcall	.+0      	; 0x4414 <UART_init+0x6>
    4414:	00 d0       	rcall	.+0      	; 0x4416 <UART_init+0x8>
    4416:	cd b7       	in	r28, 0x3d	; 61
    4418:	de b7       	in	r29, 0x3e	; 62
    441a:	9c 83       	std	Y+4, r25	; 0x04
    441c:	8b 83       	std	Y+3, r24	; 0x03
	  uint16_t Baud_value = 0;
    441e:	1a 82       	std	Y+2, r1	; 0x02
    4420:	19 82       	std	Y+1, r1	; 0x01

	  if (config_Ptr->Speed == NORMAL_SPEED) {
    4422:	eb 81       	ldd	r30, Y+3	; 0x03
    4424:	fc 81       	ldd	r31, Y+4	; 0x04
    4426:	87 81       	ldd	r24, Z+7	; 0x07
    4428:	88 23       	and	r24, r24
    442a:	69 f5       	brne	.+90     	; 0x4486 <UART_init+0x78>
		/*
		 * U2X = 0 for normal transmission speed
		 */
		CLEAR_BIT(UCSRA, U2X);
    442c:	ab e2       	ldi	r26, 0x2B	; 43
    442e:	b0 e0       	ldi	r27, 0x00	; 0
    4430:	eb e2       	ldi	r30, 0x2B	; 43
    4432:	f0 e0       	ldi	r31, 0x00	; 0
    4434:	80 81       	ld	r24, Z
    4436:	8d 7f       	andi	r24, 0xFD	; 253
    4438:	8c 93       	st	X, r24

		/*
		 * Calculate BaudRate
		 */
		Baud_value = ASYNCHRONOUS_NORMAL_MODE(F_CPU, config_Ptr->Baud_Rate);
    443a:	eb 81       	ldd	r30, Y+3	; 0x03
    443c:	fc 81       	ldd	r31, Y+4	; 0x04
    443e:	83 81       	ldd	r24, Z+3	; 0x03
    4440:	94 81       	ldd	r25, Z+4	; 0x04
    4442:	a5 81       	ldd	r26, Z+5	; 0x05
    4444:	b6 81       	ldd	r27, Z+6	; 0x06
    4446:	88 0f       	add	r24, r24
    4448:	99 1f       	adc	r25, r25
    444a:	aa 1f       	adc	r26, r26
    444c:	bb 1f       	adc	r27, r27
    444e:	88 0f       	add	r24, r24
    4450:	99 1f       	adc	r25, r25
    4452:	aa 1f       	adc	r26, r26
    4454:	bb 1f       	adc	r27, r27
    4456:	88 0f       	add	r24, r24
    4458:	99 1f       	adc	r25, r25
    445a:	aa 1f       	adc	r26, r26
    445c:	bb 1f       	adc	r27, r27
    445e:	88 0f       	add	r24, r24
    4460:	99 1f       	adc	r25, r25
    4462:	aa 1f       	adc	r26, r26
    4464:	bb 1f       	adc	r27, r27
    4466:	9c 01       	movw	r18, r24
    4468:	ad 01       	movw	r20, r26
    446a:	80 e0       	ldi	r24, 0x00	; 0
    446c:	92 e1       	ldi	r25, 0x12	; 18
    446e:	aa e7       	ldi	r26, 0x7A	; 122
    4470:	b0 e0       	ldi	r27, 0x00	; 0
    4472:	bc 01       	movw	r22, r24
    4474:	cd 01       	movw	r24, r26
    4476:	0e 94 8b 23 	call	0x4716	; 0x4716 <__udivmodsi4>
    447a:	da 01       	movw	r26, r20
    447c:	c9 01       	movw	r24, r18
    447e:	01 97       	sbiw	r24, 0x01	; 1
    4480:	9a 83       	std	Y+2, r25	; 0x02
    4482:	89 83       	std	Y+1, r24	; 0x01
    4484:	2e c0       	rjmp	.+92     	; 0x44e2 <UART_init+0xd4>
	  } else if (config_Ptr->Speed == DOUBLE_SPEED) {
    4486:	eb 81       	ldd	r30, Y+3	; 0x03
    4488:	fc 81       	ldd	r31, Y+4	; 0x04
    448a:	87 81       	ldd	r24, Z+7	; 0x07
    448c:	81 30       	cpi	r24, 0x01	; 1
    448e:	09 f0       	breq	.+2      	; 0x4492 <UART_init+0x84>
    4490:	a9 c0       	rjmp	.+338    	; 0x45e4 <UART_init+0x1d6>
		/*
		 * U2X = 1 for double transmission speed
		 */
		SET_BIT(UCSRA, U2X);
    4492:	ab e2       	ldi	r26, 0x2B	; 43
    4494:	b0 e0       	ldi	r27, 0x00	; 0
    4496:	eb e2       	ldi	r30, 0x2B	; 43
    4498:	f0 e0       	ldi	r31, 0x00	; 0
    449a:	80 81       	ld	r24, Z
    449c:	82 60       	ori	r24, 0x02	; 2
    449e:	8c 93       	st	X, r24

		/*
		 * Calculate BaudRate
		 */
		Baud_value = ASYNCHRONOUS_DOUBLE_SPEED_MODE(F_CPU, config_Ptr->Baud_Rate);
    44a0:	eb 81       	ldd	r30, Y+3	; 0x03
    44a2:	fc 81       	ldd	r31, Y+4	; 0x04
    44a4:	83 81       	ldd	r24, Z+3	; 0x03
    44a6:	94 81       	ldd	r25, Z+4	; 0x04
    44a8:	a5 81       	ldd	r26, Z+5	; 0x05
    44aa:	b6 81       	ldd	r27, Z+6	; 0x06
    44ac:	88 0f       	add	r24, r24
    44ae:	99 1f       	adc	r25, r25
    44b0:	aa 1f       	adc	r26, r26
    44b2:	bb 1f       	adc	r27, r27
    44b4:	88 0f       	add	r24, r24
    44b6:	99 1f       	adc	r25, r25
    44b8:	aa 1f       	adc	r26, r26
    44ba:	bb 1f       	adc	r27, r27
    44bc:	88 0f       	add	r24, r24
    44be:	99 1f       	adc	r25, r25
    44c0:	aa 1f       	adc	r26, r26
    44c2:	bb 1f       	adc	r27, r27
    44c4:	9c 01       	movw	r18, r24
    44c6:	ad 01       	movw	r20, r26
    44c8:	80 e0       	ldi	r24, 0x00	; 0
    44ca:	92 e1       	ldi	r25, 0x12	; 18
    44cc:	aa e7       	ldi	r26, 0x7A	; 122
    44ce:	b0 e0       	ldi	r27, 0x00	; 0
    44d0:	bc 01       	movw	r22, r24
    44d2:	cd 01       	movw	r24, r26
    44d4:	0e 94 8b 23 	call	0x4716	; 0x4716 <__udivmodsi4>
    44d8:	da 01       	movw	r26, r20
    44da:	c9 01       	movw	r24, r18
    44dc:	01 97       	sbiw	r24, 0x01	; 1
    44de:	9a 83       	std	Y+2, r25	; 0x02
    44e0:	89 83       	std	Y+1, r24	; 0x01

	  /*
	   * RXEN  = 1 Receiver Enable
	   * TXEN  = 1 Transmitter
	   */
	  UCSRB |= (1 << RXEN) | (1 << TXEN);
    44e2:	aa e2       	ldi	r26, 0x2A	; 42
    44e4:	b0 e0       	ldi	r27, 0x00	; 0
    44e6:	ea e2       	ldi	r30, 0x2A	; 42
    44e8:	f0 e0       	ldi	r31, 0x00	; 0
    44ea:	80 81       	ld	r24, Z
    44ec:	88 61       	ori	r24, 0x18	; 24
    44ee:	8c 93       	st	X, r24

	  /*
	   * Set parity bits
	   */
	  UCSRC |= (config_Ptr->Parity << UPM0);
    44f0:	a0 e4       	ldi	r26, 0x40	; 64
    44f2:	b0 e0       	ldi	r27, 0x00	; 0
    44f4:	e0 e4       	ldi	r30, 0x40	; 64
    44f6:	f0 e0       	ldi	r31, 0x00	; 0
    44f8:	80 81       	ld	r24, Z
    44fa:	28 2f       	mov	r18, r24
    44fc:	eb 81       	ldd	r30, Y+3	; 0x03
    44fe:	fc 81       	ldd	r31, Y+4	; 0x04
    4500:	81 81       	ldd	r24, Z+1	; 0x01
    4502:	88 2f       	mov	r24, r24
    4504:	90 e0       	ldi	r25, 0x00	; 0
    4506:	82 95       	swap	r24
    4508:	92 95       	swap	r25
    450a:	90 7f       	andi	r25, 0xF0	; 240
    450c:	98 27       	eor	r25, r24
    450e:	80 7f       	andi	r24, 0xF0	; 240
    4510:	98 27       	eor	r25, r24
    4512:	82 2b       	or	r24, r18
    4514:	8c 93       	st	X, r24
	  UCSRC |= (config_Ptr->Parity << UPM1);
    4516:	a0 e4       	ldi	r26, 0x40	; 64
    4518:	b0 e0       	ldi	r27, 0x00	; 0
    451a:	e0 e4       	ldi	r30, 0x40	; 64
    451c:	f0 e0       	ldi	r31, 0x00	; 0
    451e:	80 81       	ld	r24, Z
    4520:	28 2f       	mov	r18, r24
    4522:	eb 81       	ldd	r30, Y+3	; 0x03
    4524:	fc 81       	ldd	r31, Y+4	; 0x04
    4526:	81 81       	ldd	r24, Z+1	; 0x01
    4528:	88 2f       	mov	r24, r24
    452a:	90 e0       	ldi	r25, 0x00	; 0
    452c:	88 0f       	add	r24, r24
    452e:	99 1f       	adc	r25, r25
    4530:	82 95       	swap	r24
    4532:	92 95       	swap	r25
    4534:	90 7f       	andi	r25, 0xF0	; 240
    4536:	98 27       	eor	r25, r24
    4538:	80 7f       	andi	r24, 0xF0	; 240
    453a:	98 27       	eor	r25, r24
    453c:	82 2b       	or	r24, r18
    453e:	8c 93       	st	X, r24

	  /*
	   * Set stop bit value
	   */
	  UCSRC |= (config_Ptr->Stop_Bit << USBS);
    4540:	a0 e4       	ldi	r26, 0x40	; 64
    4542:	b0 e0       	ldi	r27, 0x00	; 0
    4544:	e0 e4       	ldi	r30, 0x40	; 64
    4546:	f0 e0       	ldi	r31, 0x00	; 0
    4548:	80 81       	ld	r24, Z
    454a:	28 2f       	mov	r18, r24
    454c:	eb 81       	ldd	r30, Y+3	; 0x03
    454e:	fc 81       	ldd	r31, Y+4	; 0x04
    4550:	82 81       	ldd	r24, Z+2	; 0x02
    4552:	88 2f       	mov	r24, r24
    4554:	90 e0       	ldi	r25, 0x00	; 0
    4556:	88 0f       	add	r24, r24
    4558:	99 1f       	adc	r25, r25
    455a:	88 0f       	add	r24, r24
    455c:	99 1f       	adc	r25, r25
    455e:	88 0f       	add	r24, r24
    4560:	99 1f       	adc	r25, r25
    4562:	82 2b       	or	r24, r18
    4564:	8c 93       	st	X, r24

	  /*
	   * Set UART bit mode value
	   */
	  if (config_Ptr->Bit_data != 9) {
    4566:	eb 81       	ldd	r30, Y+3	; 0x03
    4568:	fc 81       	ldd	r31, Y+4	; 0x04
    456a:	80 81       	ld	r24, Z
    456c:	89 30       	cpi	r24, 0x09	; 9
    456e:	41 f0       	breq	.+16     	; 0x4580 <UART_init+0x172>
		CLEAR_BIT(UCSRB, UCSZ2);
    4570:	aa e2       	ldi	r26, 0x2A	; 42
    4572:	b0 e0       	ldi	r27, 0x00	; 0
    4574:	ea e2       	ldi	r30, 0x2A	; 42
    4576:	f0 e0       	ldi	r31, 0x00	; 0
    4578:	80 81       	ld	r24, Z
    457a:	8b 7f       	andi	r24, 0xFB	; 251
    457c:	8c 93       	st	X, r24
    457e:	07 c0       	rjmp	.+14     	; 0x458e <UART_init+0x180>
	  } else {
		SET_BIT(UCSRB, UCSZ2);
    4580:	aa e2       	ldi	r26, 0x2A	; 42
    4582:	b0 e0       	ldi	r27, 0x00	; 0
    4584:	ea e2       	ldi	r30, 0x2A	; 42
    4586:	f0 e0       	ldi	r31, 0x00	; 0
    4588:	80 81       	ld	r24, Z
    458a:	84 60       	ori	r24, 0x04	; 4
    458c:	8c 93       	st	X, r24
	  }
	  UCSRC |= (config_Ptr->Bit_data << UCSZ0);
    458e:	a0 e4       	ldi	r26, 0x40	; 64
    4590:	b0 e0       	ldi	r27, 0x00	; 0
    4592:	e0 e4       	ldi	r30, 0x40	; 64
    4594:	f0 e0       	ldi	r31, 0x00	; 0
    4596:	80 81       	ld	r24, Z
    4598:	28 2f       	mov	r18, r24
    459a:	eb 81       	ldd	r30, Y+3	; 0x03
    459c:	fc 81       	ldd	r31, Y+4	; 0x04
    459e:	80 81       	ld	r24, Z
    45a0:	88 2f       	mov	r24, r24
    45a2:	90 e0       	ldi	r25, 0x00	; 0
    45a4:	88 0f       	add	r24, r24
    45a6:	99 1f       	adc	r25, r25
    45a8:	82 2b       	or	r24, r18
    45aa:	8c 93       	st	X, r24
	  UCSRC |= (config_Ptr->Bit_data << UCSZ1);
    45ac:	a0 e4       	ldi	r26, 0x40	; 64
    45ae:	b0 e0       	ldi	r27, 0x00	; 0
    45b0:	e0 e4       	ldi	r30, 0x40	; 64
    45b2:	f0 e0       	ldi	r31, 0x00	; 0
    45b4:	80 81       	ld	r24, Z
    45b6:	28 2f       	mov	r18, r24
    45b8:	eb 81       	ldd	r30, Y+3	; 0x03
    45ba:	fc 81       	ldd	r31, Y+4	; 0x04
    45bc:	80 81       	ld	r24, Z
    45be:	88 2f       	mov	r24, r24
    45c0:	90 e0       	ldi	r25, 0x00	; 0
    45c2:	88 0f       	add	r24, r24
    45c4:	99 1f       	adc	r25, r25
    45c6:	88 0f       	add	r24, r24
    45c8:	99 1f       	adc	r25, r25
    45ca:	82 2b       	or	r24, r18
    45cc:	8c 93       	st	X, r24

	  /*
	   * First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH
	   */
	  UBRRH = Baud_value >> 8;
    45ce:	e0 e4       	ldi	r30, 0x40	; 64
    45d0:	f0 e0       	ldi	r31, 0x00	; 0
    45d2:	89 81       	ldd	r24, Y+1	; 0x01
    45d4:	9a 81       	ldd	r25, Y+2	; 0x02
    45d6:	89 2f       	mov	r24, r25
    45d8:	99 27       	eor	r25, r25
    45da:	80 83       	st	Z, r24
	  UBRRL = Baud_value & 0xFF;
    45dc:	e9 e2       	ldi	r30, 0x29	; 41
    45de:	f0 e0       	ldi	r31, 0x00	; 0
    45e0:	89 81       	ldd	r24, Y+1	; 0x01
    45e2:	80 83       	st	Z, r24
}
    45e4:	0f 90       	pop	r0
    45e6:	0f 90       	pop	r0
    45e8:	0f 90       	pop	r0
    45ea:	0f 90       	pop	r0
    45ec:	cf 91       	pop	r28
    45ee:	df 91       	pop	r29
    45f0:	08 95       	ret

000045f2 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    45f2:	df 93       	push	r29
    45f4:	cf 93       	push	r28
    45f6:	0f 92       	push	r0
    45f8:	cd b7       	in	r28, 0x3d	; 61
    45fa:	de b7       	in	r29, 0x3e	; 62
    45fc:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    45fe:	eb e2       	ldi	r30, 0x2B	; 43
    4600:	f0 e0       	ldi	r31, 0x00	; 0
    4602:	80 81       	ld	r24, Z
    4604:	88 2f       	mov	r24, r24
    4606:	90 e0       	ldi	r25, 0x00	; 0
    4608:	80 72       	andi	r24, 0x20	; 32
    460a:	90 70       	andi	r25, 0x00	; 0
    460c:	00 97       	sbiw	r24, 0x00	; 0
    460e:	b9 f3       	breq	.-18     	; 0x45fe <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    4610:	ec e2       	ldi	r30, 0x2C	; 44
    4612:	f0 e0       	ldi	r31, 0x00	; 0
    4614:	89 81       	ldd	r24, Y+1	; 0x01
    4616:	80 83       	st	Z, r24
}
    4618:	0f 90       	pop	r0
    461a:	cf 91       	pop	r28
    461c:	df 91       	pop	r29
    461e:	08 95       	ret

00004620 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    4620:	df 93       	push	r29
    4622:	cf 93       	push	r28
    4624:	cd b7       	in	r28, 0x3d	; 61
    4626:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    4628:	eb e2       	ldi	r30, 0x2B	; 43
    462a:	f0 e0       	ldi	r31, 0x00	; 0
    462c:	80 81       	ld	r24, Z
    462e:	88 23       	and	r24, r24
    4630:	dc f7       	brge	.-10     	; 0x4628 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    4632:	ec e2       	ldi	r30, 0x2C	; 44
    4634:	f0 e0       	ldi	r31, 0x00	; 0
    4636:	80 81       	ld	r24, Z
}
    4638:	cf 91       	pop	r28
    463a:	df 91       	pop	r29
    463c:	08 95       	ret

0000463e <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    463e:	df 93       	push	r29
    4640:	cf 93       	push	r28
    4642:	00 d0       	rcall	.+0      	; 0x4644 <UART_sendString+0x6>
    4644:	0f 92       	push	r0
    4646:	cd b7       	in	r28, 0x3d	; 61
    4648:	de b7       	in	r29, 0x3e	; 62
    464a:	9b 83       	std	Y+3, r25	; 0x03
    464c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    464e:	19 82       	std	Y+1, r1	; 0x01
    4650:	0e c0       	rjmp	.+28     	; 0x466e <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    4652:	89 81       	ldd	r24, Y+1	; 0x01
    4654:	28 2f       	mov	r18, r24
    4656:	30 e0       	ldi	r19, 0x00	; 0
    4658:	8a 81       	ldd	r24, Y+2	; 0x02
    465a:	9b 81       	ldd	r25, Y+3	; 0x03
    465c:	fc 01       	movw	r30, r24
    465e:	e2 0f       	add	r30, r18
    4660:	f3 1f       	adc	r31, r19
    4662:	80 81       	ld	r24, Z
    4664:	0e 94 f9 22 	call	0x45f2	; 0x45f2 <UART_sendByte>
		i++;
    4668:	89 81       	ldd	r24, Y+1	; 0x01
    466a:	8f 5f       	subi	r24, 0xFF	; 255
    466c:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    466e:	89 81       	ldd	r24, Y+1	; 0x01
    4670:	28 2f       	mov	r18, r24
    4672:	30 e0       	ldi	r19, 0x00	; 0
    4674:	8a 81       	ldd	r24, Y+2	; 0x02
    4676:	9b 81       	ldd	r25, Y+3	; 0x03
    4678:	fc 01       	movw	r30, r24
    467a:	e2 0f       	add	r30, r18
    467c:	f3 1f       	adc	r31, r19
    467e:	80 81       	ld	r24, Z
    4680:	88 23       	and	r24, r24
    4682:	39 f7       	brne	.-50     	; 0x4652 <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
    4684:	0f 90       	pop	r0
    4686:	0f 90       	pop	r0
    4688:	0f 90       	pop	r0
    468a:	cf 91       	pop	r28
    468c:	df 91       	pop	r29
    468e:	08 95       	ret

00004690 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    4690:	0f 93       	push	r16
    4692:	1f 93       	push	r17
    4694:	df 93       	push	r29
    4696:	cf 93       	push	r28
    4698:	00 d0       	rcall	.+0      	; 0x469a <UART_receiveString+0xa>
    469a:	0f 92       	push	r0
    469c:	cd b7       	in	r28, 0x3d	; 61
    469e:	de b7       	in	r29, 0x3e	; 62
    46a0:	9b 83       	std	Y+3, r25	; 0x03
    46a2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    46a4:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    46a6:	89 81       	ldd	r24, Y+1	; 0x01
    46a8:	28 2f       	mov	r18, r24
    46aa:	30 e0       	ldi	r19, 0x00	; 0
    46ac:	8a 81       	ldd	r24, Y+2	; 0x02
    46ae:	9b 81       	ldd	r25, Y+3	; 0x03
    46b0:	8c 01       	movw	r16, r24
    46b2:	02 0f       	add	r16, r18
    46b4:	13 1f       	adc	r17, r19
    46b6:	0e 94 10 23 	call	0x4620	; 0x4620 <UART_recieveByte>
    46ba:	f8 01       	movw	r30, r16
    46bc:	80 83       	st	Z, r24
    46be:	0f c0       	rjmp	.+30     	; 0x46de <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    46c0:	89 81       	ldd	r24, Y+1	; 0x01
    46c2:	8f 5f       	subi	r24, 0xFF	; 255
    46c4:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    46c6:	89 81       	ldd	r24, Y+1	; 0x01
    46c8:	28 2f       	mov	r18, r24
    46ca:	30 e0       	ldi	r19, 0x00	; 0
    46cc:	8a 81       	ldd	r24, Y+2	; 0x02
    46ce:	9b 81       	ldd	r25, Y+3	; 0x03
    46d0:	8c 01       	movw	r16, r24
    46d2:	02 0f       	add	r16, r18
    46d4:	13 1f       	adc	r17, r19
    46d6:	0e 94 10 23 	call	0x4620	; 0x4620 <UART_recieveByte>
    46da:	f8 01       	movw	r30, r16
    46dc:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    46de:	89 81       	ldd	r24, Y+1	; 0x01
    46e0:	28 2f       	mov	r18, r24
    46e2:	30 e0       	ldi	r19, 0x00	; 0
    46e4:	8a 81       	ldd	r24, Y+2	; 0x02
    46e6:	9b 81       	ldd	r25, Y+3	; 0x03
    46e8:	fc 01       	movw	r30, r24
    46ea:	e2 0f       	add	r30, r18
    46ec:	f3 1f       	adc	r31, r19
    46ee:	80 81       	ld	r24, Z
    46f0:	83 32       	cpi	r24, 0x23	; 35
    46f2:	31 f7       	brne	.-52     	; 0x46c0 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    46f4:	89 81       	ldd	r24, Y+1	; 0x01
    46f6:	28 2f       	mov	r18, r24
    46f8:	30 e0       	ldi	r19, 0x00	; 0
    46fa:	8a 81       	ldd	r24, Y+2	; 0x02
    46fc:	9b 81       	ldd	r25, Y+3	; 0x03
    46fe:	fc 01       	movw	r30, r24
    4700:	e2 0f       	add	r30, r18
    4702:	f3 1f       	adc	r31, r19
    4704:	10 82       	st	Z, r1
}
    4706:	0f 90       	pop	r0
    4708:	0f 90       	pop	r0
    470a:	0f 90       	pop	r0
    470c:	cf 91       	pop	r28
    470e:	df 91       	pop	r29
    4710:	1f 91       	pop	r17
    4712:	0f 91       	pop	r16
    4714:	08 95       	ret

00004716 <__udivmodsi4>:
    4716:	a1 e2       	ldi	r26, 0x21	; 33
    4718:	1a 2e       	mov	r1, r26
    471a:	aa 1b       	sub	r26, r26
    471c:	bb 1b       	sub	r27, r27
    471e:	fd 01       	movw	r30, r26
    4720:	0d c0       	rjmp	.+26     	; 0x473c <__udivmodsi4_ep>

00004722 <__udivmodsi4_loop>:
    4722:	aa 1f       	adc	r26, r26
    4724:	bb 1f       	adc	r27, r27
    4726:	ee 1f       	adc	r30, r30
    4728:	ff 1f       	adc	r31, r31
    472a:	a2 17       	cp	r26, r18
    472c:	b3 07       	cpc	r27, r19
    472e:	e4 07       	cpc	r30, r20
    4730:	f5 07       	cpc	r31, r21
    4732:	20 f0       	brcs	.+8      	; 0x473c <__udivmodsi4_ep>
    4734:	a2 1b       	sub	r26, r18
    4736:	b3 0b       	sbc	r27, r19
    4738:	e4 0b       	sbc	r30, r20
    473a:	f5 0b       	sbc	r31, r21

0000473c <__udivmodsi4_ep>:
    473c:	66 1f       	adc	r22, r22
    473e:	77 1f       	adc	r23, r23
    4740:	88 1f       	adc	r24, r24
    4742:	99 1f       	adc	r25, r25
    4744:	1a 94       	dec	r1
    4746:	69 f7       	brne	.-38     	; 0x4722 <__udivmodsi4_loop>
    4748:	60 95       	com	r22
    474a:	70 95       	com	r23
    474c:	80 95       	com	r24
    474e:	90 95       	com	r25
    4750:	9b 01       	movw	r18, r22
    4752:	ac 01       	movw	r20, r24
    4754:	bd 01       	movw	r22, r26
    4756:	cf 01       	movw	r24, r30
    4758:	08 95       	ret

0000475a <__prologue_saves__>:
    475a:	2f 92       	push	r2
    475c:	3f 92       	push	r3
    475e:	4f 92       	push	r4
    4760:	5f 92       	push	r5
    4762:	6f 92       	push	r6
    4764:	7f 92       	push	r7
    4766:	8f 92       	push	r8
    4768:	9f 92       	push	r9
    476a:	af 92       	push	r10
    476c:	bf 92       	push	r11
    476e:	cf 92       	push	r12
    4770:	df 92       	push	r13
    4772:	ef 92       	push	r14
    4774:	ff 92       	push	r15
    4776:	0f 93       	push	r16
    4778:	1f 93       	push	r17
    477a:	cf 93       	push	r28
    477c:	df 93       	push	r29
    477e:	cd b7       	in	r28, 0x3d	; 61
    4780:	de b7       	in	r29, 0x3e	; 62
    4782:	ca 1b       	sub	r28, r26
    4784:	db 0b       	sbc	r29, r27
    4786:	0f b6       	in	r0, 0x3f	; 63
    4788:	f8 94       	cli
    478a:	de bf       	out	0x3e, r29	; 62
    478c:	0f be       	out	0x3f, r0	; 63
    478e:	cd bf       	out	0x3d, r28	; 61
    4790:	09 94       	ijmp

00004792 <__epilogue_restores__>:
    4792:	2a 88       	ldd	r2, Y+18	; 0x12
    4794:	39 88       	ldd	r3, Y+17	; 0x11
    4796:	48 88       	ldd	r4, Y+16	; 0x10
    4798:	5f 84       	ldd	r5, Y+15	; 0x0f
    479a:	6e 84       	ldd	r6, Y+14	; 0x0e
    479c:	7d 84       	ldd	r7, Y+13	; 0x0d
    479e:	8c 84       	ldd	r8, Y+12	; 0x0c
    47a0:	9b 84       	ldd	r9, Y+11	; 0x0b
    47a2:	aa 84       	ldd	r10, Y+10	; 0x0a
    47a4:	b9 84       	ldd	r11, Y+9	; 0x09
    47a6:	c8 84       	ldd	r12, Y+8	; 0x08
    47a8:	df 80       	ldd	r13, Y+7	; 0x07
    47aa:	ee 80       	ldd	r14, Y+6	; 0x06
    47ac:	fd 80       	ldd	r15, Y+5	; 0x05
    47ae:	0c 81       	ldd	r16, Y+4	; 0x04
    47b0:	1b 81       	ldd	r17, Y+3	; 0x03
    47b2:	aa 81       	ldd	r26, Y+2	; 0x02
    47b4:	b9 81       	ldd	r27, Y+1	; 0x01
    47b6:	ce 0f       	add	r28, r30
    47b8:	d1 1d       	adc	r29, r1
    47ba:	0f b6       	in	r0, 0x3f	; 63
    47bc:	f8 94       	cli
    47be:	de bf       	out	0x3e, r29	; 62
    47c0:	0f be       	out	0x3f, r0	; 63
    47c2:	cd bf       	out	0x3d, r28	; 61
    47c4:	ed 01       	movw	r28, r26
    47c6:	08 95       	ret

000047c8 <itoa>:
    47c8:	fb 01       	movw	r30, r22
    47ca:	9f 01       	movw	r18, r30
    47cc:	e8 94       	clt
    47ce:	42 30       	cpi	r20, 0x02	; 2
    47d0:	c4 f0       	brlt	.+48     	; 0x4802 <itoa+0x3a>
    47d2:	45 32       	cpi	r20, 0x25	; 37
    47d4:	b4 f4       	brge	.+44     	; 0x4802 <itoa+0x3a>
    47d6:	4a 30       	cpi	r20, 0x0A	; 10
    47d8:	29 f4       	brne	.+10     	; 0x47e4 <itoa+0x1c>
    47da:	97 fb       	bst	r25, 7
    47dc:	1e f4       	brtc	.+6      	; 0x47e4 <itoa+0x1c>
    47de:	90 95       	com	r25
    47e0:	81 95       	neg	r24
    47e2:	9f 4f       	sbci	r25, 0xFF	; 255
    47e4:	64 2f       	mov	r22, r20
    47e6:	77 27       	eor	r23, r23
    47e8:	0e 94 15 24 	call	0x482a	; 0x482a <__udivmodhi4>
    47ec:	80 5d       	subi	r24, 0xD0	; 208
    47ee:	8a 33       	cpi	r24, 0x3A	; 58
    47f0:	0c f0       	brlt	.+2      	; 0x47f4 <itoa+0x2c>
    47f2:	89 5d       	subi	r24, 0xD9	; 217
    47f4:	81 93       	st	Z+, r24
    47f6:	cb 01       	movw	r24, r22
    47f8:	00 97       	sbiw	r24, 0x00	; 0
    47fa:	a1 f7       	brne	.-24     	; 0x47e4 <itoa+0x1c>
    47fc:	16 f4       	brtc	.+4      	; 0x4802 <itoa+0x3a>
    47fe:	5d e2       	ldi	r21, 0x2D	; 45
    4800:	51 93       	st	Z+, r21
    4802:	10 82       	st	Z, r1
    4804:	c9 01       	movw	r24, r18
    4806:	0c 94 05 24 	jmp	0x480a	; 0x480a <strrev>

0000480a <strrev>:
    480a:	dc 01       	movw	r26, r24
    480c:	fc 01       	movw	r30, r24
    480e:	67 2f       	mov	r22, r23
    4810:	71 91       	ld	r23, Z+
    4812:	77 23       	and	r23, r23
    4814:	e1 f7       	brne	.-8      	; 0x480e <strrev+0x4>
    4816:	32 97       	sbiw	r30, 0x02	; 2
    4818:	04 c0       	rjmp	.+8      	; 0x4822 <strrev+0x18>
    481a:	7c 91       	ld	r23, X
    481c:	6d 93       	st	X+, r22
    481e:	70 83       	st	Z, r23
    4820:	62 91       	ld	r22, -Z
    4822:	ae 17       	cp	r26, r30
    4824:	bf 07       	cpc	r27, r31
    4826:	c8 f3       	brcs	.-14     	; 0x481a <strrev+0x10>
    4828:	08 95       	ret

0000482a <__udivmodhi4>:
    482a:	aa 1b       	sub	r26, r26
    482c:	bb 1b       	sub	r27, r27
    482e:	51 e1       	ldi	r21, 0x11	; 17
    4830:	07 c0       	rjmp	.+14     	; 0x4840 <__udivmodhi4_ep>

00004832 <__udivmodhi4_loop>:
    4832:	aa 1f       	adc	r26, r26
    4834:	bb 1f       	adc	r27, r27
    4836:	a6 17       	cp	r26, r22
    4838:	b7 07       	cpc	r27, r23
    483a:	10 f0       	brcs	.+4      	; 0x4840 <__udivmodhi4_ep>
    483c:	a6 1b       	sub	r26, r22
    483e:	b7 0b       	sbc	r27, r23

00004840 <__udivmodhi4_ep>:
    4840:	88 1f       	adc	r24, r24
    4842:	99 1f       	adc	r25, r25
    4844:	5a 95       	dec	r21
    4846:	a9 f7       	brne	.-22     	; 0x4832 <__udivmodhi4_loop>
    4848:	80 95       	com	r24
    484a:	90 95       	com	r25
    484c:	bc 01       	movw	r22, r24
    484e:	cd 01       	movw	r24, r26
    4850:	08 95       	ret

00004852 <_exit>:
    4852:	f8 94       	cli

00004854 <__stop_program>:
    4854:	ff cf       	rjmp	.-2      	; 0x4854 <__stop_program>
