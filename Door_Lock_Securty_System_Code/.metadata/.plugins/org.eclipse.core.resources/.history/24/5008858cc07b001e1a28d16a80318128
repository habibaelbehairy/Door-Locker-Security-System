/*/*******************************************************************************
 *
 *  module: CONTROL ECU
 *
 *  file name: CONTROL_Main.c
 *
 *  Description: source file for the CONTROL ECU micro-controller
 *
 *  Author: Habiba Elbehairy
 *
 *******************************************************************************/

#include"uart.h"
#include"twi.h"
#include"external_eeprom.h"
#include"timer1.h"
#include"DC_Motor.h"
#include"Buzzer.h"
#include"common_macros.h"
#include<avr/io.h>
#include<util/delay.h>

/*******************************************************************************
 *                                  Definitions                                *
 *******************************************************************************/

#define MC1_READY 			0x10
#define MC2_READY 			0x20
#define CHANGE_PASSWORD 	0xA0
#define SAVE 				0xA1
#define END_SAVING 			0xA2
#define CHECK_PASSWORD 		0xA3
#define UNLOCK_DOOR 		0xA4
#define OPEN_BUZZER			0XA5
#define PASSWORD 			0xA6
#define PASSWORD_MATCH		0xA7
#define PASSWORD_DOESNT_MATCH 0xA8
#define PASSWORD_ADDRESS	0x70

/*******************************************************************************
 *                           Global Variables                                  *
 *******************************************************************************/
volatile uint8 g_countSeconds = 0;
uint8 g_recieveByte = 0;
uint8 g_passFLag=0;
uint8_t global_error_counter = 0;
Timer1_ConfigType Timer1_Configuration = {0,TICKS_PER_ONE_SECOND,F_CPU_256,CTC};
/*******************************************************************************
 *                              Functions Prototypes                           *
 *******************************************************************************/

void Motorwork(void);
void openBuzzer(void);
void Recieve_password(void);
void Check_PasswordCLU(void);
void Timer1_CallBackFun(void);

/*******************************************************************************
 *                              Functions Implementation                        *
 *******************************************************************************/
/*
 * Description:
 * Call back Fun for timer 1
 */
void Timer1_CallBackFun(void){
	g_countSeconds++;
}


/*
 * Description:
 * Function receive password from HMI and write it in EEPROM
 * then send confirmation to HMI
 */

void Recieve_password(void)
{	
	/*
	 * password to store the password
	 * pass_Counter to count the number of digits entered
	*/
	uint8 password,pass_Counter;
	/*
	 * wait for the HMI to send save command
	*/
	while(UART_recieveByte()!= SAVE);
	/*
	 * for loop to receive the password and write it in EEPROM
	*/
	for(pass_Counter=0; pass_Counter<5; pass_Counter++)
	{
		/*
		 * send ready to HMI to send the password
		*/
		UART_sendByte(MC2_READY);
		/*
		 * receive the password
		 */
		password = UART_recieveByte();
		/*
		 * write the password in EEPROM
		 */
		EEPROM_writeByte((PASSWORD_ADDRESS+pass_Counter), password);
		_delay_ms(70);
	}
	/*
	 * send end of saving to HMI
	*/
	UART_sendByte(END_SAVING);
}





/*
 * Description:
 * Function to check the password from HMI with the saved password in EEPROM
 * if the password is correct send confirmation to HMI
 * else send error to HMI
 */

void Check_PasswordCLU(void) {
    uint8 password[5];
    uint8 password_saved[5];
    uint8 pass_Counter;
    uint8 Error_Counter = 0;

    while (UART_recieveByte() != CHECK_PASSWORD) {
        // Wait for the HMI to send the check command
    }

    for (pass_Counter = 0; pass_Counter < 5; pass_Counter++) {
        UART_sendByte(MC2_READY);
        password[pass_Counter] = UART_recieveByte();
        EEPROM_readByte((PASSWORD_ADDRESS + pass_Counter), &password_saved[pass_Counter]);

        if (password[pass_Counter] != password_saved[pass_Counter]) {
            Error_Counter++;
        }

        if (Error_Counter!=0){
        	UART_sendByte(PASSWORD_DOESNT_MATCH);
        	   g_passFLag=PASSWORD_DOESNT_MATCH;
        }
        else {
               UART_sendByte(PASSWORD_MATCH);
               g_passFLag=PASSWORD_MATCH;
          }

//        if (Error_Counter < 3) {
//            UART_sendByte(Error_Counter);
//        } else if (Error_Counter == 3) {
//            Timer1_init(&Timer1_Configuration);
//            Buzzer_on();
//            g_countSeconds = 0;
//            while (g_countSeconds != 60) {
//                // Wait for 60 seconds
//            }
//            Buzzer_off();
//        }
    }
}
/*
 * Description:
 * Function to open the door
 * 1- rotate the motor in clockwise direction for 15 seconds as the door is unlocking
 * 2- stop the motor for 3 seconds as the door is on hold
 * 3- rotate the motor in anti-clockwise direction for 15 seconds as the door is locking
 * 4- stop the motor as the door is locked
*/
void Motorwork(void){
	
	/*
	 * init timer 1
	 */
	Timer1_init(&Timer1_Configuration);
	
	/*
	 * Dc Motor
	 */
	DcMotor_Init();

	g_countSeconds = 0;
	/*
	 * rotate Motor for 15 seconds in clockwise direction
	 * (Unlocking the door)
	 */
	DcMotor_Rotate(CLOCKWISE,100);
	/*
	 * wait for 15 seconds
	 */
	while (g_countSeconds != 15) {
	}

	g_countSeconds = 0;
	/*
	 * Stop Motor for 3 seconds in
	 * (Door on Hold)
	 */
	DcMotor_Rotate(STOP,0);
	/*
	 * wait for 3 seconds
	 */
	while (g_countSeconds != 3) {
	}

	g_countSeconds = 0;
	/*
	 * rotate Motor for 15 seconds in anti-clockwise direction
	 * (locking the door)
	 */
	DcMotor_Rotate(ANTI_CLOCKWISE,100);
	/*
	 * wait for 15 seconds
	 */
	while (g_countSeconds != 15) {
	}

	/*
	 * Stop Motor
	 * (Door locked)
	 */
	DcMotor_Rotate(STOP,0);

	g_countSeconds = 0;
	/*
	 * turn off the timer
	 */
	Timer1_deInit();
}

/*
 * Description:
 * Function to turn on the buzzer for 60 seconds as 
 * the password is wrong for 3 times
*/
void openBuzzer(void){
	/*
	 * init timer 1
	 */
	Buzzer_on();
	Timer1_init(&Timer1_Configuration);
	/*
	 * Turn on buzzer
	 */
	g_countSeconds = 0;
	/*
	 * wait for 60 seconds
	 */
	while (g_countSeconds != 60) {
	}
	Buzzer_off();
	g_countSeconds = 0;

	/*
	 * turn off the timer
	 */
	Timer1_deInit();

}


int main(){
	SREG |= (1 << 7);

	UART_ConfigType UART_Configuration= {UART_8_BIT_DATA,DISABLED,ONE_BIT,UART_BAUD_RATE_9600,DOUBLE_SPEED};

	TWI_ConfigType TWI_Configuration={ADDRESS_1,TWI_BAUDRATE_400K};
	Timer1_setCallBack(Timer1_CallBackFun);

	UART_init(&UART_Configuration);
	TWI_init(&TWI_Configuration);
	Buzzer_init();
	DcMotor_Init();


    while (UART_recieveByte() != MC1_READY);
    Recieve_password();

    while (1) {
    	g_recieveByte  = UART_recieveByte();
    	if (g_recieveByte == PASSWORD) {
    		Check_PasswordCLU();
    		UART_sendByte(g_passFLag);
    	}
    	else if (g_recieveByte == UNLOCK_DOOR) {
    		   Motorwork();
    	}
    	else if (g_recieveByte == OPEN_BUZZER) {
//    		Buzzer_on();
    			openBuzzer();
    	}
    	else if (g_recieveByte == CHANGE_PASSWORD) {
    	    Recieve_password();
        }
    }
}

