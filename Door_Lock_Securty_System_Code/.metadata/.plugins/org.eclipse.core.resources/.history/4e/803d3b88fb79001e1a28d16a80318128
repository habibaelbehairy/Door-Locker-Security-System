 /******************************************************************************
 *
 * Module: UART
 *
 * File Name: uart.c
 *
 * Description: Source file for the UART AVR driver
 *
 * Author: Habiba Elbehairy
 *
 *******************************************************************************/

#include "uart.h"
#include "avr/io.h"
#include "common_macros.h"
#include "uart.h"

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

/*
 * Description :
 * Functional responsible for Initialize the UART device by:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
//void UART_init(UART_ConfigType * config_Ptr)
//{
//	uint16 Baud_value = 0;
//
//	if (config_Ptr->Speed == NORMAL_SPEED) {
//	    /*
//	     * U2X = 0 for normal transmission speed
//	     */
//	     CLEAR_BIT(UCSRA, U2X);
//	    /*
//	     *  Calculate BaudRate
//	     */
//	     Baud_value = ASYNCHRONOUS_NORMAL_MODE(F_CPU, config_Ptr->Baud_Rate);
//	}
//	else if(config_Ptr->Speed == DOUBLE_SPEED){
//		/*
//		 * U2X = 1 for double transmission speed
//		 */
//		SET_BIT(UCSRA,U2X);
//		/*
//		 * Calculate BaudRate
//		 */
//		Baud_value = ASYNCHRONOUS_DOUNLE_SPEED_MODE(F_CPU, config_Ptr->Baud_Rate);
//	}
//	 /*
//	  * RXEN  = 1 Receiver Enable
//	  * TXEN  = 1 Transmitter
//	  */
//	UCSRB = (1<<RXEN) | (1<<TXEN);
//	/*
//	 * The URSEL must be one when writing the UCSRC
//	 */
//	UCSRC = (1<<URSEL);
//	/*
//	 * Set parity bits
//	 */
//	UCSRC = (UCSRC & 0xFD) | (config_Ptr->Bit_data << UCSZ0);
//	UCSRC = (UCSRC & 0xFB) | (config_Ptr->Bit_data << UCSZ1);
//
//	/*
//	 * set stop bit value
//	 */
//	UCSRC = (UCSRC & 0xF7) | (config_Ptr->Stop_Bit << USBS);
//
//	/*
//	 *set UART bit mode value
//	 */
//
//	if(config_Ptr->Bit_data!=9){
//		CLEAR_BIT(UCSRB, UCSZ2);
//	}
//	else{
//		SET_BIT(UCSRB, UCSZ2);
//	}
//	UCSRC = (UCSRC & 0xFD) | (config_Ptr->Parity << UCSZ0);
//	UCSRC = (UCSRC & 0xFB) | (config_Ptr->Parity << UCSZ1);
//	/*
//	 * First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH
//	 */
//	UBRRH =Baud_value >> 8;
//	UBRRL = Baud_value;
//}
void UART_init(UART_ConfigType * config_Ptr)
{
  uint16_t Baud_value = 0;

  if (config_Ptr->Speed == NORMAL_SPEED) {
    /*
     * U2X = 0 for normal transmission speed
     */
    CLEAR_BIT(UCSRA, U2X);

    /*
     * Calculate BaudRate
     */
    Baud_value = ASYNCHRONOUS_NORMAL_MODE(F_CPU, config_Ptr->Baud_Rate);
  } else if (config_Ptr->Speed == DOUBLE_SPEED) {
    /*
     * U2X = 1 for double transmission speed
     */
    SET_BIT(UCSRA, U2X);

    /*
     * Calculate BaudRate
     */
    Baud_value = ASYNCHRONOUS_DOUBLE_SPEED_MODE(F_CPU, config_Ptr->Baud_Rate);
  } else {
    // Invalid speed setting, return
    return;
  }

  /*
   * RXEN  = 1 Receiver Enable
   * TXEN  = 1 Transmitter
   */
  UCSRB |= (1 << RXEN) | (1 << TXEN);

  /*
   * Set parity bits
   */
  UCSRC |= (config_Ptr->Parity << UPM0);
  UCSRC |= (config_Ptr->Parity << UPM1);

  /*
   * Set stop bit value
   */
  UCSRC |= (config_Ptr->Stop_Bit << USBS);

  /*
   * Set UART bit mode value
   */
  if (config_Ptr->Bit_data != 9) {
    CLEAR_BIT(UCSRB, UCSZ2);
  } else {
    SET_BIT(UCSRB, UCSZ2);
  }
  UCSRC |= (config_Ptr->Bit_data << UCSZ0);
  UCSRC |= (config_Ptr->Bit_data << UCSZ1);

  /*
   * First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH
   */
  UBRRH = Baud_value >> 8;
  UBRRL = Baud_value & 0xFF;
}

/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
}

/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
}

/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
		i++;
	}
}

/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
}
