// /******************************************************************************
// *
// * Module: Timer1
// *
// * File Name: Timer1.h
// *
// * Description: Header file for the Timer1 AVR driver
// *
// * Author: Habiba Elbehairy
// *
// *******************************************************************************/
//#include"std_types.h"
//
//#ifndef TIMER1_H_
//#define TIMER1_H_
//
//
///*******************************************************************************
// *                                Definitions                                  *
// *******************************************************************************/
//
//#define PWM                 FALSE
//#define CTC_A				0
//#define CTC_B				1
//#define CTC_MODE			CTC_A
//
//#define OVERFLOWS_PER_MINUTE_NORMAL_MODE 1875
//#define TICKS_PER_ONE_SECOND 31250
//
///*
// * Description :
// * enum responsible for Timer1 pre scalar values.
// */
//typedef enum{
//	NO_CLOCK,F_CPU_CLOCK,F_CPU_8,F_CPU_64,F_CPU_256,F_CPU_1024,EXTERNAL_CLOCK_FALLING,EXTERNAL_CLOCK_RISING
//} Timer1_Prescaler;
//
///*
// * Description :
// * enum responsible for Timer1 Mode.
// */
//typedef enum{
//	NORMAL,CTC=4
//}Timer1_Mode;
//
//
///*
// * Description :
// * struct responsible for Timer1 Configuration.
// */
//typedef struct {
// uint16 initial_value;
// uint16 compare_value; // it will be used in compare mode only.
// Timer1_Prescaler prescaler;
// Timer1_Mode mode;
//} Timer1_ConfigType;
//
//
///*
// * Description :
// * Functional responsible for Initialize the Timer1 device by:
// * 1. Setup the initial value and the prescalar.
// * 2. Setup the timer mode
// * 3. Enable interrput
// */
//void Timer1_init(const Timer1_ConfigType * Config_Ptr);
///*
// * Description :
// * Functional responsible for Deinitialize the Timer1
// * by setting all registers to zero
// */
//void Timer1_deInit(void);
///*
// * Description :
// * Save the address of the Call back function in a global variable
// */
//
//void Timer1_setCallBack(void(*a_ptr)(void));
//
//
//#endif /* TIMER1_H_ */
// /******************************************************************************
// *
// * Module: Timer1
// *
// * File Name: Timer1.h
// *
// * Description: Header file for the Timer1 AVR driver
// *
// * Author: Habiba Elbehairy
// *
// *******************************************************************************/
//#include"std_types.h"
//
//#ifndef TIMER1_H_
//#define TIMER1_H_
//
//
///*******************************************************************************
// *                                Definitions                                  *
// *******************************************************************************/
//
//#define PWM                 FALSE
//#define CTC_A				0
//#define CTC_B				1
//#define CTC_MODE			CTC_A
//
//
//#define OVERFLOWS_PER_MINUTE_NORMAL_MODE 1875
//#define TICKS_PER_ONE_SECOND 31250
//
///*
// * Description :
// * enum responsible for Timer1 pre scalar values.
// */
//typedef enum{
//	NO_CLOCK,F_CPU_CLOCK,F_CPU_8,F_CPU_64,F_CPU_256,F_CPU_1024,EXTERNAL_CLOCK_FALLING,EXTERNAL_CLOCK_RISING
//} Timer1_Prescaler;
//
///*
// * Description :
// * enum responsible for Timer1 Mode.
// */
//typedef enum{
//	NORMAL,CTC=4
//}Timer1_Mode;
//
//
///*
// * Description :
// * struct responsible for Timer1 Configuration.
// */
//typedef struct {
// uint16 initial_value;
// uint16 compare_value; // it will be used in compare mode only.
// Timer1_Prescaler prescaler;
// Timer1_Mode mode;
//} Timer1_ConfigType;
//
//
///*
// * Description :
// * Functional responsible for Initialize the Timer1 device by:
// * 1. Setup the initial value and the prescalar.
// * 2. Setup the timer mode
// * 3. Enable interrput
// */
//void Timer1_init(const Timer1_ConfigType * Config_Ptr);
///*
// * Description :
// * Functional responsible for Deinitialize the Timer1
// * by setting all registers to zero
// */
//void Timer1_deInit(void);
///*
// * Description :
// * Save the address of the Call back function in a global variable
// */
//
//void Timer1_setCallBack(void(*a_ptr)(void));
//
//
//#endif /* TIMER1_H_ */
 /******************************************************************************
 *
 * Module: TIMER1
 *
 * File Name: timer1.h
 *
 * Description: header file for the timer1 driver
 *
 * Author: Abdelrahman gomaa
 *
 *******************************************************************************/

#ifndef TIMER1_H_
#define TIMER1_H_
#include "std_types.h"

//uint8 g_OverflowsPerMinute;

/*using pre-scaler 256*/
#define OVERFLOWS_PER_MINUE_NORMAL_MODE 29
/*for the simulation to be accurate the number of ticks can be around 25000 ticks*/
#define TICKS_PER_ONE_SECOND            31249


/*Clock select first three bits values for the pre-scaler in TCCR1B register*/
typedef enum {
	no_clock,
	prescaler_1,
	prescaler_8,
	prescaler_64,
	prescaler_256,
	prescaler_1024
} Timer1_Prescaler;
/*
 * WGM10, WGM11 and WGM12 values that select the mode for timer1
 * WGM10 and WGM11 bit 0 1 in TCCR1A register. WGM12 bit 3 in TCCR1B register
 * timer1 here supports two modes: normal mode and CTC mode
 */
typedef enum {
	normal_mode, CTC_mode = 0x04
} Timer1_Mode;

typedef struct {
	uint16 initial_value;
	uint16 compare_value; // it will be used in compare mode only.
	Timer1_Prescaler prescaler;
	Timer1_Mode mode;
} Timer1_ConfigType;
/*
 * Description:
 *      set TCNT1, OCR1A, pre-scaler and timer1 mode
*/
void Timer1_init(const Timer1_ConfigType * Config_Ptr);
/*
 * Description:
 *      clears all timer1 registers
*/
void Timer1_deInit(void);
/*
 * Description:
 *      set the call back function
*/
void Timer1_setCallBack(void(*a_ptr)(void));

#endif /* TIMER1_H_ */
