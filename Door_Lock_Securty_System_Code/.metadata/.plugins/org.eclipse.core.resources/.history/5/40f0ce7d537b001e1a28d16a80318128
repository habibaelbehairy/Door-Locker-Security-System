///******************************************************************************
// *
// * Module: Timer1
// *
// * File Name: Timer1.c
// *
// * Description: Source file for the Timer1 AVR driver
// *
// * Author: Habiba Elbehairy
// *
// *******************************************************************************/
//#include "timer1.h"
//#include <avr/io.h>
//#include <avr/interrupt.h>
//
//
//
///*******************************************************************************
// *                           Global Variables                                  *
// *******************************************************************************/
//static volatile void (*g_callBackPtr)(void) = NULL_PTR;
//
//
//
//
///*******************************************************************************
// *                       Interrupt Service Routines                            *
// *******************************************************************************/
//
///* Interrupt Service Routine for timer1 Overflow mode */
//ISR(TIMER1_OVF_vect){
//	if(g_callBackPtr != NULL_PTR)
//	{
//		/* Call the Call Back function in the application after the edge is detected */
//		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
//	}
//}
//
///* Interrupt Service Routine for timer1 compare mode */
//ISR(TIMER1_COMPA_vect){
//	if(g_callBackPtr != NULL_PTR)
//	{
//		/* Call the Call Back function in the application after the edge is detected */
//		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
//	}
//
//}
///* Interrupt Service Routine for timer1 compare mode */
//ISR(TIMER1_COMPB_vect){
//	if(g_callBackPtr != NULL_PTR)
//	{
//		/* Call the Call Back function in the application after the edge is detected */
//		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
//	}
//
//}
//
//
///*******************************************************************************
// *                      Functions Definitions                                  *
// *******************************************************************************/
//
///*
// * Description :
// * Functional responsible for Initialize the Timer1 device by:
// * 1. Setup the initial value and the prescalar.
// * 2. Setup the timer mode
// * 3. Enable interrput
// */
//void Timer1_init(const Timer1_ConfigType * Config_Ptr){
//	TCNT1 = Config_Ptr->initial_value;
//
//	TCCR1A = (TCCR1B&0xFC) |(Config_Ptr->mode);
//	TCCR1B = (TCCR1B&0xE7) |(Config_Ptr->mode<<3);
//
//	TCCR1B = (TCCR1B&0xFC) |(Config_Ptr-> prescaler);
//
//#if (PWM == FALSE)
//	/* non pwm mode*/
//	TCCR1A = (1<<FOC1A);
//	TCCR1A = (1<<FOC1B);
//#endif
//	if (Config_Ptr->mode==CTC){
//		#if (CTC_MODE == CTC_A)
//		OCR1A=Config_Ptr->compare_value;
//		/*Enable Timer1 Compare A Interrupt*/
//		TIMSK |= (1<<OCIE1A);
//		#endif
//		#if (CTC_MODE == CTC_B)
//		OCR1B=Config_Ptr->compare_value;
//		/*Enable Timer1 Compare A Interrupt*/
//		TIMSK |= (1<<OCIE1B);
//		#endif
//	}
//	else if(Config_Ptr->mode==NORMAL){
//		TIMSK|=(1<< TOIE1);
//	}
//}
///*
// * Description :
// * Functional responsible for Deinitialize the Timer1
// * by setting all registers to zero
// */
//void Timer1_deInit(void){
//	TCNT1=0;
//	OCR1A=0;
//	OCR1B=0;
//	TCCR1A=0;
//	TCCR1B=0;
//	TIMSK=0;
//	g_callBackPtr = NULL_PTR;
//}
///*
// * Description :
// * Save the address of the Call back function in a global variable
// */
//
//void Timer1_setCallBack(void(*a_ptr)(void)){
//	g_callBackPtr = a_ptr;
//}
//
//
 /******************************************************************************
 *
 * Module: TIMER1
 *
 * File Name: timer1.h
 *
 * Description: header file for the timer1 driver
 *
 * Author: Abdelrahman gomaa
 *
 *******************************************************************************/

#ifndef TIMER1_H_
#define TIMER1_H_
#include "std_types.h"

//uint8 g_OverflowsPerMinute;

/*using pre-scaler 256*/
#define OVERFLOWS_PER_MINUE_NORMAL_MODE 29
/*for the simulation to be accurate the number of ticks can be around 25000 ticks*/
#define TICKS_PER_ONE_SECOND            31249


/*Clock select first three bits values for the pre-scaler in TCCR1B register*/
typedef enum {
	no_clock,
	prescaler_1,
	prescaler_8,
	prescaler_64,
	prescaler_256,
	prescaler_1024
} Timer1_Prescaler;
/*
 * WGM10, WGM11 and WGM12 values that select the mode for timer1
 * WGM10 and WGM11 bit 0 1 in TCCR1A register. WGM12 bit 3 in TCCR1B register
 * timer1 here supports two modes: normal mode and CTC mode
 */
typedef enum {
	normal_mode, CTC_mode = 0x04
} Timer1_Mode;

typedef struct {
	uint16 initial_value;
	uint16 compare_value; // it will be used in compare mode only.
	Timer1_Prescaler prescaler;
	Timer1_Mode mode;
} Timer1_ConfigType;
/*
 * Description:
 *      set TCNT1, OCR1A, pre-scaler and timer1 mode
*/
void Timer1_init(const Timer1_ConfigType * Config_Ptr);
/*
 * Description:
 *      clears all timer1 registers
*/
void Timer1_deInit(void);
/*
 * Description:
 *      set the call back function
*/
void Timer1_setCallBack(void(*a_ptr)(void));

#endif /* TIMER1_H_ */
